{"version":3,"sources":["lib/styles/palette.js","components/common/Button.js","components/common/Responsive.js","components/common/Headers.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/posts.js","modules/posts.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","components/posts/PostList.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/comment.js","components/post/PostRecommentItem.js","components/post/PostCommentToggle.js","components/post/PostCommentItem.js","components/post/PostCommentList.js","modules/commentwrite.js","containers/post/PostCommentContainer.js","modules/post.js","components/post/PostViewer.js","components/common/SubInfo.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","styled","button","StyledLink","Link","Button","to","ResponsiveBlock","div","Responsive","children","rest","HaderBlock","Wrapper","MenuGroup","Headers","user","onLogout","boards","useState","check","onCheck","$toggles","document","querySelectorAll","a","toggles2","getElementById","console","log","classList","toggle","e","boards_data","localStorage","setItem","JSON","stringify","parse","getItem","className","style","display","replace","onClick","forEach","call","id","class","map","board","pk","rep","lace","fields","name","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","response","data","meta","error","client","axios","create","defaults","baseURL","withCredentials","deleteComment","queryString","qs","delete","deleteRecomment","deletePost","readPost","start","end","get","postsSaga","NEXT_PAGE","PREV_PAGE","READ_BOAD","READ_BOAD_SUCCESS","READ_BOAD_FAILURE","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","TOGGLE_MENU","toggleMenu","readBoard","listPosts","listPostsSaga","postsAPI","readBoardSaga","posts","takeLatest","postsdata","lastPage","parseInt","headers","logout","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","LOGOUT","tempSetUser","checkSaga","authAPI","removeItem","username","checkError","HeaderContainer","useSelector","dispatch","useDispatch","useEffect","PostListBlock","Buttons","WritePostButtonWrapper","BoardItemBlock","PostItemBlock","PostItem","post","reply_length","author","title","postDate","writeAt","split","withRouter","showWriteButton","postId","match","history","params","_postId","undefined","toString","PaginationBlock","PageNumber","buildLink","tag","page","query","Pagination","disabled","location","search","ignoreQueryPrefix","page_num","PostListPage","AuthTemplateBlock","WitheBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","nickname","email","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","cookies","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ErrorMessage","ButtonWithMarginTop","textMap","AuthForm","onChange","onSubmit","text","autoComplete","placeholder","setError","_id","push","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","content","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","originalPostId","updatePost","writePostSaga","updatePostSaga","postError","write","useCallback","post_pk","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","onUpdatePost","local_pk","tags","alert","goBack","WritePage","commentSaga","READ_COMMENT","READ_COMMENT_SUCCESS","READ_COMMENT_FAILURE","DELETE_COMMENT","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","UNLOAD_COMMENT","READ_RECOMMENT","READ_RECOMMENT_SUUCCESS","READ_RECOMMENT_FAILURE","CHANGE_COMMENT","CHANGE_COMMENT_SUUCCESS","CHANGE_COMMENT_FAILURE","CHANGE_RECOMMENT","CHANGE_RECOMMENT_SUUCCESS","CHANGE_RECOMMENT_FAILURE","CLEAR_RECOMMENTS","readComment","unloadComment","readRecomment","changeComment","changeReComment","readCommentSaga","deleteCommentSaga","readRecommentSaga","changeCommentSaga","changeReCommentSaga","qeryString","comment","recomment","recommentdata","recommentList","concat","ReCommentBlock","span","Blank","ActionButton","palatte","Input","PostRecommentItem","onRecomment","onChangeReComment","reply","setText","edit","setEdit","out","setOut","ownRecomment","onRemove","recomment_pk","ToggleButton","Button2","RecommentBlock","PostCommentToggle","recommnet_datas","onClickRe","onWriteRecomment","onReadComment","answer_reply_length","recomment_data","set","onSet","setRe","onSetRe","onSubmitRe","color","CommentBlock","PostCommentItem","ownComment","onChangeComment","onRemoveComment","ownThing","React","memo","PostHead","PostViewerBlock","PostCommentList","number","commentWriteSaga","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","WRITE_RECOMMENT","WRITE_RECOMMENT_SUCCESS","WRITE_RECOMMENT_FAILURE","writeComment","writeReComment","writeCommentSaga","wrtieRecommentSaga","selectComment","commentError","commentwrite","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","unloadPost","readPostSaga","hasMarginTop","SubInfoinPost","PostContent","actionButtons","ownPost","_data","find","x","post_id","dangerouslySetInnerHTML","__html","FullScreen","AskModalBlock","AskModal","visible","description","confirmText","cancleText","onConfirm","onCancle","AskRemoveModal","PostActionButtonBlock","onEdit","modal","setModal","new_data","PostId","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleWare","store","createStore","composeWithDevTools","applyMiddleware","run","loadUser","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a440caa2.chunk.js","sourcesContent":["// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  /* align-items: center;\r\n  align-content: center;\r\n  justify-content: center;\r\n  justify-self: center; */\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n      @media (max-width: 768px) {\r\n        width: 100%;\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ResponsiveBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auto; /* 중앙 정렬 */\r\n\r\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport Button from \"./Button\";\r\nimport Responsive from \"./Responsive\";\r\n\r\nconst HaderBlock = styled.div`\r\n  //clearfix\r\n  .clearfix::after {\r\n    content: \"\";\r\n    clear: both;\r\n    display: block;\r\n  }\r\n\r\n  .float--left {\r\n    float: left;\r\n  }\r\n\r\n  .float--right {\r\n    float: right;\r\n  }\r\n\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 3;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n  @media (max-width: 768px) {\r\n    .float--left,\r\n    .float--right {\r\n      float: none;\r\n    }\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: none;\r\n    /* 초기화 */\r\n    height: auto;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\nconst MenuGroup = styled.div`\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n    margin-top: 0.5rem;\r\n    margin-left: 0;\r\n  }\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n\r\n  .logo {\r\n    @media (max-width: 768px) {\r\n      display: flex;\r\n      width: 7rem;\r\n    }\r\n    display: flex;\r\n    align-content: center;\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  #toggle-btn {\r\n    display: none;\r\n    font-size: 1.5rem;\r\n    position: absolute;\r\n    top: 0.55rem;\r\n    right: 1rem;\r\n    cursor: pointer;\r\n    text-indent: -9999px;\r\n    @media (max-width: 768px) {\r\n      display: block;\r\n    }\r\n  }\r\n  .main-menu {\r\n    display: flex;\r\n    font-size: 1rem;\r\n    font-weight: 800;\r\n    align-content: center;\r\n\r\n    @media (max-width: 768px) {\r\n      display: block;\r\n    }\r\n  }\r\n\r\n  .main-menu .myLink {\r\n    @media (max-width: 768px) {\r\n      display: block;\r\n      margin-left: 0;\r\n      box-sizing: border-box;\r\n      margin: 0.5rem;\r\n      :first-child {\r\n        border-top: 1px solid #e5e5e5;\r\n      }\r\n      border-bottom: 1px solid #e5e5e5;\r\n    }\r\n    margin-left: 7rem;\r\n    display: flex;\r\n\r\n    padding: 10px;\r\n    color: #3c4146;\r\n  }\r\n\r\n  .btn {\r\n    order: 2;\r\n    justify-content: center;\r\n    @media (max-width: 768px) {\r\n      text-align: center;\r\n      box-sizing: border-box;\r\n      margin: 0.5rem;\r\n      display: block;\r\n      justify-self: center;\r\n    }\r\n  }\r\n  .username {\r\n    order: 1;\r\n    font-weight: 800;\r\n    margin-right: 1.5rem;\r\n    justify-content: center;\r\n    p {\r\n      display: none;\r\n    }\r\n    @media (max-width: 768px) {\r\n      margin-left: 1.5rem;\r\n      p {\r\n        display: inline;\r\n      }\r\n    }\r\n  }\r\n  @media (max-width: 768px) {\r\n    .toggle {\r\n      display: none;\r\n    }\r\n    .toggle.on {\r\n      display: block;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Headers = ({ user, onLogout, boards }) => {\r\n  const [check, onCheck] = useState(false);\r\n\r\n  const $toggles = document.querySelectorAll(\".toggle\"); //NodeList\r\n\r\n  function toggleElements() {\r\n    [].forEach.call($toggles, function (toggle) {\r\n      toggle.classList.toggle(\"on\");\r\n    });\r\n  }\r\n\r\n  async function get() {\r\n    try {\r\n      onLogout();\r\n      const toggles2 = document.getElementById(\".log\");\r\n      console.log(\"select\", toggles2);\r\n      toggles2.classList.toggle(\"on\");\r\n      onCheck(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  if (check) {\r\n    const toggles2 = document.getElementById(\".log\");\r\n    console.log(\"select\", toggles2);\r\n    toggles2.classList.toggle(\"on\");\r\n    onCheck(false);\r\n  }\r\n  let boards_data = boards && boards;\r\n  if (boards !== null) {\r\n    localStorage.setItem(\"boards\", JSON.stringify(boards));\r\n  } else {\r\n    boards_data = JSON.parse(localStorage.getItem(\"boards\"));\r\n  }\r\n  return (\r\n    <HaderBlock>\r\n      <Wrapper className=\"clearfix\">\r\n        <MenuGroup className=\"float--left\">\r\n          <Link style={{ display: \"flex\" }} to=\"/\" className=\"logo\" replace>\r\n            REACTERS\r\n          </Link>\r\n          <GiHamburgerMenu\r\n            onClick={toggleElements}\r\n            id=\"toggle-btn\"\r\n          ></GiHamburgerMenu>\r\n          <div class=\"main-menu toggle\">\r\n            {boards_data && (\r\n              <div className=\"main-menu\">\r\n                {boards_data.map((board) => (\r\n                  <Link\r\n                    to={`/board/${board.pk}`}\r\n                    className=\"myLink\"\r\n                    key={board.pk}\r\n                    rep\r\n                    lace\r\n                  >\r\n                    {board.fields.name}\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </MenuGroup>\r\n        <MenuGroup className=\"float--right\">\r\n          {user ? (\r\n            <>\r\n              <div className=\"toggle username\">\r\n                <p>ID : </p>\r\n                {user}\r\n              </div>\r\n              <Button className=\"toggle btn\" cyan onClick={get}>\r\n                로그아웃\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <Button className=\"toggle btn\" id=\"log\" cyan to=\"/login\">\r\n              로그인\r\n            </Button>\r\n          )}\r\n        </MenuGroup>\r\n      </Wrapper>\r\n    </HaderBlock>\r\n  );\r\n};\r\n\r\nexport default Headers;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type));\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\n// axios 인스턴스 생성\r\n\r\nconst client = axios.create();\r\n\r\n// // 글로벌 설정\r\n\r\n// // API 주소 다른 곳 사용\r\nclient.defaults.baseURL = \"https://djangocrudboard.ml\";\r\nclient.defaults.withCredentials = true;\r\nclient.withCredentials = true;\r\n\r\n// //header\r\n// client.defaults.headers.common['Authorization'] = '주소';\r\n\r\n// //인터셉터\r\n// axios.intercepter.response.use(\r\n//     response => {\r\n//         //요청 성공시 특정 작업\r\n//         return response;\r\n//     },\r\n//     error => {\r\n//         //요청 실패 시 특정 작업\r\n//         return Promise.reject(error);\r\n//     }\r\n// )\r\nexport default client;\r\n","import qs from \"qs\";\r\nimport client from \"./client\";\r\n// 게시판 목록 불러오기\r\nexport const getBoard = (posts) => (posts = client.get(`/board`));\r\n\r\n// 글쓰기\r\nexport const writePost = ({ title, pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    title,\r\n    pk,\r\n    content,\r\n  });\r\n  console.log(\"postitem\", queryString);\r\n  return client.post(\"/post\", queryString);\r\n};\r\n\r\n// 댓글 쓰기\r\nexport const writeCommnet = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  console.log((\"query\", queryString));\r\n  return client.post(\"/reply\", queryString);\r\n};\r\n\r\n// 글 수정하기\r\nexport const updatePost = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.put(\"/post\", queryString);\r\n};\r\n\r\n// 댓글 수정하기\r\nexport const changeComment = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.put(\"/reply\", queryString);\r\n};\r\n// 대댓글 수정하기\r\nexport const changeReComment = ({ pk, content }) => {\r\n  const qeryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.put(\"/answer_reply\", qeryString);\r\n};\r\n\r\n// 댓글 삭제하기\r\nexport const deleteComment = ({ pk }) => {\r\n  const queryString = qs.stringify({ pk });\r\n  console.log(\"hajsdfhajsdf\", pk);\r\n  return client.delete(\"/reply\", {\r\n    data: queryString,\r\n  });\r\n  // return client.delete(\"/reply\", queryString);\r\n};\r\n\r\nexport const deleteRecomment = ({ pk }) => {\r\n  const queryString = qs.stringify({ pk });\r\n  return client.delete(\"/answer_reply\", { data: queryString });\r\n};\r\n\r\n// 글 삭제하기\r\nexport const deletePost = ({ pk }) => {\r\n  const queryString = qs.stringify({ pk });\r\n  return client.delete(\"/post\", { data: queryString });\r\n};\r\n\r\nexport const writeReCommnet = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.post(`/answer_reply?pk=${pk}`, queryString);\r\n};\r\n\r\n// 댓글 읽어오기\r\nexport const readComment = (id) => client.get(`/reply?pk=${id}`);\r\n\r\n// 모든 댓글 읽어오기\r\nexport const readComments = (id) => client.get(`/replies?pk=${id}`);\r\n\r\n// 대댓글 읽어오기\r\nexport const readRecoment = (id) => client.get(`/answer_reply?pk=${id}`);\r\n\r\n// 글 읽어오기\r\nexport const readPost = ({ id, start, end }) =>\r\n  client.get(`/post?pk=${id}&start=${start}&end=${end}`);\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\n// 다음버튼\r\nconst [NEXT_PAGE] = \"posts/NEXT_PAGE\";\r\nconst [PREV_PAGE] = \"post/PREV_PAGE\";\r\n\r\n// 게시판 목록 불러오기\r\nconst [\r\n  READ_BOAD,\r\n  READ_BOAD_SUCCESS,\r\n  READ_BOAD_FAILURE,\r\n] = createRequestActionTypes(\"posts/READ_BOARD\");\r\n\r\n// 글 목록 불러오기\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes(\"posts/LIST_POSTS\");\r\n\r\nconst TOGGLE_MENU = \"posts/TOGGLE/MENU\";\r\n\r\nexport const toggleMenu = createAction(TOGGLE_MENU);\r\n\r\n// 액션 만들어주기\r\n\r\nexport const nextPage = createAction(NEXT_PAGE);\r\nexport const prevPage = createAction(PREV_PAGE);\r\nexport const readBoard = createAction(READ_BOAD);\r\nexport const listPosts = createAction(LIST_POSTS, ({ id, start, end }) => ({\r\n  id,\r\n  start: start,\r\n  end: end,\r\n}));\r\n\r\n//Saga 만들어주기\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.readPost);\r\nconst readBoardSaga = createRequestSaga(READ_BOAD, postsAPI.getBoard);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n  yield takeLatest(READ_BOAD, readBoardSaga);\r\n}\r\n\r\nconst initialState = {\r\n  boards: null,\r\n  posts: null,\r\n  data: null,\r\n  postsdata: null,\r\n  error: null,\r\n  start: 1,\r\n  end: 10,\r\n  lastPage: 1,\r\n  toggle: false,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [NEXT_PAGE]: (state) => ({\r\n      ...state,\r\n      start: state.start + 1,\r\n    }),\r\n    [PREV_PAGE]: (state) => ({\r\n      ...state,\r\n      end: state.end - 1,\r\n    }),\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      postsdata: posts.data,\r\n      posts,\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [READ_BOAD_SUCCESS]: (state, { payload: data, meta: response }) => ({\r\n      ...state,\r\n      data,\r\n      boards: data.data,\r\n      lastPage: parseInt(response.headers[\"last-page\"], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    // (data = posts.data)\r\n    // console.log(data)\r\n    [READ_BOAD_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [TOGGLE_MENU]: (state, { payload: toggle }) => ({\r\n      ...state,\r\n      toggle: !toggle,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default posts;\r\n","import client from \"./client\";\r\nimport qs from \"qs\";\r\n\r\n// 회원가입\r\n\r\nexport const register = ({ username, nickname, email, password }) =>\r\n  client.post(\r\n    \"/register\",\r\n    qs.stringify({ username, nickname, email, password })\r\n  );\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n   client.post(\"/login\", qs.stringify({ username, password }));\r\n\r\n// 로그인 상태 확인\r\nexport const check = client.get(\"/login\");\r\n\r\n// 로그아웃\r\nexport const logout = () => client.get(\"/logout\");\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport { takeLatest, call } from \"redux-saga/effects\";\r\nimport * as authAPI from \"../lib/api/auth\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\n\r\nconst TEMP_SET_USER = \"user/TEMP_SET_USER\"; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  \"user/CHECK\"\r\n);\r\nconst LOGOUT = \"user/LOGOUT\";\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    console.log();\r\n    localStorage.removeItem(\"user\"); // localStorage 에서 user 제거하고\r\n  } catch (e) {\r\n    console.log(\"localStorage is not working\");\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API 호출\r\n    console.log(\"hjisadfjaiskdlf\");\r\n    localStorage.removeItem(\"user\"); // localStorage 에서 user 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n  // yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n}\r\n\r\nconst initialState = {\r\n  data: null,\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      data,\r\n      user: state.data.username,\r\n      checkError: null,\r\n    }),\r\n    // [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n    //   ...state,\r\n    //   user: null,\r\n    //   checkError: error,\r\n    // }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Headers from \"../../components/common/Headers\";\r\nimport { readBoard, toggleMenu } from \"../../modules/posts\";\r\nimport { logout } from \"../../modules/user\";\r\n\r\nconst HeaderContainer = () => {\r\n  const { user, toggle, boards, data } = useSelector(({ user, posts }) => ({\r\n    user: user.user,\r\n    toggle: posts.toggle,\r\n    boards: posts.boards,\r\n    data: posts.data,\r\n  }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  //게시판 목록 불러오기\r\n  useEffect(() => {\r\n    dispatch(readBoard());\r\n  }, [dispatch]);\r\n  const onClick = () => {\r\n    dispatch(toggleMenu(toggle));\r\n  };\r\n  return (\r\n    <>\r\n      <Headers\r\n        user={user}\r\n        onLogout={onLogout}\r\n        onClick={onClick}\r\n        boards={boards}\r\n        data={data}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport Button from \"../common/Button\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n  @media (max-width: 768px) {\r\n    margin-top: 0.5rem;\r\n  }\r\n`;\r\nconst Buttons = styled(Button)`\r\n  width: auto;\r\n`;\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst BoardItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-right: 2rem;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-right: 2rem;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { reply_length } = post;\r\n  const { username } = post.fields.author.fields;\r\n\r\n  const { title, writeAt } = post.fields;\r\n\r\n  const postDate = writeAt.split(\"T\");\r\n\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/board/post/${post.pk}`}>{title}</Link>\r\n      </h2>\r\n\r\n      <p>\r\n        <Link to={`/board/post/${post.pk}`}>\r\n          작성자 : {username}, 작성일 : {postDate[0]}\r\n        </Link>\r\n      </p>\r\n\r\n      <br />\r\n      <span>댓글 수 : {reply_length}</span>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({\r\n  posts,\r\n  loading,\r\n  error,\r\n  showWriteButton,\r\n  postsdata,\r\n  postId,\r\n\r\n  user,\r\n}) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n  }\r\n  return (\r\n    <BoardItemBlock>\r\n      <PostListBlock>\r\n        <WritePostButtonWrapper>\r\n          {showWriteButton && user ? (\r\n            <Buttons cyan to={`/write/${postId}`}>\r\n              새 글 작성하기\r\n            </Buttons>\r\n          ) : null}\r\n        </WritePostButtonWrapper>\r\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\r\n\r\n        {!loading && posts && postsdata && (\r\n          <div>\r\n            {postsdata.map((post) => (\r\n              <PostItem post={post} key={post.pk} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </PostListBlock>\r\n    </BoardItemBlock>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostList);\r\n","import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostList from \"../../components/posts/PostList\";\r\nimport { listPosts } from \"../../modules/posts\";\r\n\r\nconst PostListContainer = ({ match, history }) => {\r\n  let { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user, data, post, postsdata } = useSelector(\r\n    ({ posts, loading, user, post }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading[\"posts/READ_BOARD\"],\r\n      user: user.user,\r\n      data: posts.data,\r\n      boards: posts.boards,\r\n      post: post.post,\r\n      _postId: post._postId,\r\n      postsdata: posts.postsdata,\r\n    })\r\n  );\r\n  // 각 게시판 별 게시물들 불러오기\r\n  useEffect(() => {\r\n    if (postId === undefined) {\r\n      postId = 1;\r\n    }\r\n    let id = postId;\r\n    let start = localStorage.getItem(\"start\");\r\n    let end = localStorage.getItem(\"end\");\r\n\r\n    if (start === null || end === null) {\r\n      localStorage.setItem(\"start\", 0);\r\n      localStorage.setItem(\"end\", 10);\r\n      start = 0;\r\n      end = 10;\r\n    } else {\r\n      start = start.toString().replace(/\"/g, \"\");\r\n      end = end.toString().replace(/\"/g, \"\");\r\n    }\r\n    console.log(\"start, end\", start, end);\r\n    dispatch(listPosts({ id, start, end }));\r\n  }, [dispatch, postId]);\r\n  useEffect(() => {\r\n    if (postId) {\r\n      try {\r\n        localStorage.setItem(\"postId\", JSON.stringify(postId));\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n    }\r\n  }, [history, postId]);\r\n  return (\r\n    <PostList\r\n      postId={postId}\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      data={data}\r\n      post={post}\r\n      user={user}\r\n      postsdata={postsdata}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport qs from \"qs\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 5rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={page === 1 ? undefined : buildLink({ page: page - 1 })}\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={page === lastPage ? undefined : buildLink({ page: page + 1 })}\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport Pagination from \"../../components/posts/Pagination\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport qs from \"qs\";\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    start: posts.start,\r\n    end: posts.end,\r\n    posts: posts.posts,\r\n    loading: loading[\"posts/LIST_POSTS\"],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  let page_num = parseInt(page, 10);\r\n\r\n  let start = localStorage.getItem(\"start\");\r\n  let end = localStorage.getItem(\"end\");\r\n\r\n  if (end !== null) {\r\n    end = end.toString().replace(/\"/g, \"\");\r\n    start = start.toString().replace(/\"/g, \"\");\r\n  }\r\n  // 마지막 페이지 넘버와 저장된 페이지 넘버가 같지 않을경우 페이지 넘어갔다고 인식\r\n  if (end !== page_num * 10) {\r\n    localStorage.setItem(\"start\", (page_num - 1) * 10 + 1);\r\n    localStorage.setItem(\"end\", page_num * 10);\r\n  }\r\n\r\n  return <Pagination page={page_num} lastPage={lastPage} />;\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostListContainer from \"../containers/posts/PostListContainer\";\r\nimport PaginationContainer from \"../containers/posts/PaginationContainer\";\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n// 페이지 레이아웃 담당\r\n\r\n// 화면 전체 채움\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  //flex로 내부 중앙 정렬\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n// 흰색 박스\r\nconst WitheBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WitheBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/board/1\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WitheBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport produce from \"immer\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as authAPI from \"../lib/api/auth\";\r\n\r\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\";\r\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  \"auth/REGISTER\"\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  \"auth/LOGIN\"\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  })\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(\r\n  REGISTER,\r\n  ({ username, nickname, email, password }) => ({\r\n    username,\r\n    nickname,\r\n    email,\r\n    password,\r\n  })\r\n);\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: \"\",\r\n    nickname: \"\",\r\n    password: \"\",\r\n    email: \"\",\r\n    passwordConfirm: \"\",\r\n  },\r\n  login: {\r\n    username: \"\",\r\n    password: \"\",\r\n  },\r\n  auth: null,\r\n  cookies: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      auth: null,\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default auth;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../common/Button\";\r\n// 회원가입 또는 로그인 폼\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n// 스타일링 된 input\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n// 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\n// 에러 메세지\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: \"로그인\",\r\n  register: \"회원가입\",\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        {type === \"register\" && (\r\n          <StyledInput\r\n            autoComplete=\"nickname\"\r\n            name=\"nickname\"\r\n            placeholder=\"닉네임\"\r\n            onChange={onChange}\r\n            value={form.nickname}\r\n          />\r\n        )}\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === \"register\" && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {type === \"register\" && (\r\n          <StyledInput\r\n            autoComplete=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일 입력\"\r\n            type=\"email\"\r\n            onChange={onChange}\r\n            value={form.email}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === \"login\" ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { changeField, initializeForm, login } from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport { check, tempSetUser } from \"../../modules/user\";\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    error: user.error,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: \"login\",\r\n        key: name,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"login\"));\r\n    return () => {\r\n      dispatch(initializeForm(\"login\"));\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log(\"오류 발생\");\r\n      console.log(authError);\r\n      setError(\"로그인 실패\");\r\n      return;\r\n    }\r\n    if (auth) {\r\n      const { username } = form;\r\n\r\n      console.log(\"로그인 성공\");\r\n      // dispatch(check(username));\r\n      dispatch(tempSetUser(username));\r\n    }\r\n  }, [auth, authError, dispatch, form]);\r\n\r\n  useEffect(() => {\r\n    dispatch(check());\r\n    if (user) {\r\n      try {\r\n        const _id = user.toString().replace(/\"/g, \"\");\r\n        localStorage.setItem(\"user\", JSON.stringify(_id));\r\n        console.log(\"set user ok\");\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n      history.push(\"/\");\r\n      console.log(\"user\", user);\r\n    }\r\n  }, [history, auth, form, user, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\n\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  changeField,\r\n  initializeForm,\r\n  login,\r\n  register,\r\n} from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport { check } from \"../../modules/user\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: \"register\",\r\n        key: name,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, nickname, password, passwordConfirm, email } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, nickname, password, passwordConfirm, email].includes(\"\")) {\r\n      setError(\"빈 칸을 모두 입력하세요.\");\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError(\"비밀번호가 일치하지 않습니다.\");\r\n      dispatch(changeField({ form: \"register\", key: \"password\", value: \"\" }));\r\n      dispatch(\r\n        changeField({ form: \"register\", key: \"passwordConfirm\", value: \"\" })\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, nickname, email, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"register\"));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공 / 실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log(\"authError is : \", authError);\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError(\"이미 존재하는 계정명입니다.\");\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError(\"회원가입 실패\");\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      const { username, password } = form;\r\n      dispatch(login({ username, password }));\r\n      console.log(\"회원가입 성공\");\r\n      history.push(\"/\");\r\n      console.log(auth);\r\n    }\r\n  }, [auth, authError, dispatch, user, form, history]);\r\n\r\n  // user 값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    dispatch(check());\r\n    console.log(\"checking\");\r\n    if (user) {\r\n      try {\r\n        const _id = user.toString().replace(/\"/g, \"\");\r\n        console.log(\"myidis\", _id);\r\n        localStorage.setItem(\"user\", JSON.stringify(_id));\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n      history.push(\"/\"); // 홈 화면으로 이동\r\n    }\r\n  }, [history, user, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport Quill from \"quill\";\r\nimport \"quill/dist/quill.bubble.css\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  @media (max-width: 768px) {\r\n    font-size: 1.125rem;\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    margin-bottom: -5.5rem;\r\n    @media (max-width: 768px) {\r\n      font-size: 1rem;\r\n      padding-left: 0.5rem;\r\n      padding-top: 1rem;\r\n      z-index: 1;\r\n    }\r\n    line-height: 1.5;\r\n    border-bottom: 1px solid ${palette.gray[4]};\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, content, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: \"bubble\",\r\n      placeholder: \" 내용을 작성하세요...\",\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: \"1\" }, { header: \"2\" }],\r\n          [\"bold\", \"italic\", \"underline\", \"strike\"],\r\n          [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n          [\"blockquote\", \"code-block\", \"link\", \"image\"],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on(\"text-change\", (delta, oldDelta, source) => {\r\n      if (source === \"user\") {\r\n        onChangeField({ key: \"content\", value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = content;\r\n  }, [content]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: \"title\", value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"&nbsp;제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as api from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst INITIALIZE = \"write/INITIALIZE\"; // 모든 내용 초기화\r\nconst CHANGE_FIELD = \"write/CHANGE_FIELD\"; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes(\"write/WRITE_POST\"); // 포스트 작성\r\nconst SET_ORIGINAL_POST = \"write/SET_ORIGINAL_POST\";\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes(\"write/UPDATE_POST\"); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, pk, content }) => ({\r\n  title,\r\n  pk,\r\n  content,\r\n}));\r\nexport const setOriginalPost = createAction(\r\n  SET_ORIGINAL_POST,\r\n  ({ title, pk, content, originalPostId }) => ({\r\n    title,\r\n    pk,\r\n    content,\r\n    originalPostId,\r\n  })\r\n);\r\nexport const updatePost = createAction(UPDATE_POST, ({ pk, content }) => ({\r\n  pk,\r\n  content,\r\n}));\r\n\r\n// saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, api.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, api.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: \"\",\r\n  pk: \"\",\r\n  content: \"\",\r\n  originalPostId: \"\",\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post, meta: response }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (\r\n      state,\r\n      { payload: { title, pk, content, originalPostId } }\r\n    ) => ({\r\n      ...state,\r\n      title,\r\n      pk,\r\n      content,\r\n      originalPostId,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default write;\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport Editor from \"../../components/write/Editor\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { changeField, initialize } from \"../../modules/write\";\r\n\r\nconst EditorContainer = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, content } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    content: write.content,\r\n  }));\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch]\r\n  );\r\n  let post_pk;\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    let post_pk = localStorage.getItem(\"postId\");\r\n    console.log(\"Id\", post_pk);\r\n    post_pk = match.params;\r\n    if (post_pk === undefined) post_pk = 1;\r\n\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch, match.params]);\r\n  return (\r\n    <Editor onChangeField={onChangeField} title={title} content={content} />\r\n  );\r\n};\r\n\r\nexport default withRouter(EditorContainer);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  white-space: nowrap;\r\n  button + button {\r\n    margin-right: 0.5rem;\r\n  }\r\n  :last-child {\r\n    padding-right: 1rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({\r\n  onCancel,\r\n  onPublish,\r\n  onUpdatePost,\r\n  originalPostId,\r\n  pk,\r\n}) => {\r\n  const onPublishPost = () => {\r\n    let post_pk = localStorage.getItem(\"postId\");\r\n    let local_pk = post_pk.toString().replace(/\"/g, \"\");\r\n    onPublish(local_pk);\r\n  };\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n      {!originalPostId ? (\r\n        <StyledButton cyan onClick={onPublishPost}>\r\n          포스트 등록\r\n        </StyledButton>\r\n      ) : (\r\n        <StyledButton cyan onClick={() => onUpdatePost({ pk })}>\r\n          포스트 수정\r\n        </StyledButton>\r\n      )}\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from \"react\";\r\nimport WriteActionButtons from \"../../components/write/WriteActionButtons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { writePost, updatePost } from \"../../modules/write\";\r\n\r\nconst WriteActionButtonsContainer = ({ history, match }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, content, pk, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      pk: write.pk,\r\n      content: write.content,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    })\r\n  );\r\n\r\n  // 포스트 등록\r\n  const onPublish = (pk) => {\r\n    console.log(pk);\r\n    if (title === \"\") {\r\n      alert(\"빈 제목은 입력할 수 없습니다!\");\r\n      return;\r\n    }\r\n    if (content === \"\") {\r\n      alert(\"내용이 비어 있습니다!\");\r\n      return;\r\n    }\r\n    localStorage.setItem(\"write_pk\", pk);\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        pk,\r\n        content,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      let page_pk = localStorage.getItem(\"write_pk\");\r\n      const _id = page_pk.toString().replace(/\"/g, \"\");\r\n      history.push(`/board/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  const onUpdatePost = ({ pk }) => {\r\n    dispatch(updatePost({ pk, content }));\r\n  };\r\n  return (\r\n    <WriteActionButtons\r\n      pk={pk}\r\n      originalPostId={originalPostId}\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      onUpdatePost={onUpdatePost}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n","import React from \"react\";\r\nimport Responsive from \"../components/common/Responsive\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport EditorContainer from \"../containers/write/EditorContainer\";\r\nimport WriteActionButtonsContainer from \"../containers/write/WriteActionButtonsContainer\";\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <Responsive>\r\n        <EditorContainer />\r\n        <WriteActionButtonsContainer />\r\n      </Responsive>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst [\r\n  READ_COMMENT,\r\n  READ_COMMENT_SUCCESS,\r\n  READ_COMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_COMMENT\");\r\nconst [\r\n  DELETE_COMMENT,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/DELETE_COMMENT\");\r\nconst UNLOAD_COMMENT = \"post/UNLOAD_COMMENT\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nconst [\r\n  READ_RECOMMENT,\r\n  READ_RECOMMENT_SUUCCESS,\r\n  READ_RECOMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_RECOMMENT\");\r\n\r\nconst [\r\n  CHANGE_COMMENT,\r\n  CHANGE_COMMENT_SUUCCESS,\r\n  CHANGE_COMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/CHANGE_COMMENT\");\r\n\r\nconst [\r\n  CHANGE_RECOMMENT,\r\n  CHANGE_RECOMMENT_SUUCCESS,\r\n  CHANGE_RECOMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/CHANGE_RECOMMENT\");\r\n\r\nconst CLEAR_RECOMMENTS = \"post/CLEAR_RECOMMENTS\";\r\n\r\nexport const deleteComment = createAction(DELETE_COMMENT, ({ pk }) => ({ pk }));\r\nexport const readComment = createAction(READ_COMMENT, (id) => id);\r\nexport const unloadComment = createAction(UNLOAD_COMMENT);\r\nexport const readRecomment = createAction(READ_RECOMMENT, (id) => id);\r\nexport const changeComment = createAction(\r\n  CHANGE_COMMENT,\r\n  ({ pk, content }) => ({ pk, content })\r\n);\r\nexport const changeReComment = createAction(\r\n  CHANGE_RECOMMENT,\r\n  ({ pk, content }) => ({ pk, content })\r\n);\r\nexport const clearRecomments = createAction(CLEAR_RECOMMENTS);\r\n\r\nconst readCommentSaga = createRequestSaga(READ_COMMENT, postsAPI.readComments);\r\nconst deleteCommentSaga = createRequestSaga(\r\n  DELETE_COMMENT,\r\n  postsAPI.deleteComment\r\n);\r\nconst readRecommentSaga = createRequestSaga(\r\n  READ_RECOMMENT,\r\n  postsAPI.readRecoment\r\n);\r\nconst changeCommentSaga = createRequestSaga(\r\n  CHANGE_COMMENT,\r\n  postsAPI.changeComment\r\n);\r\nconst changeReCommentSaga = createRequestSaga(\r\n  CHANGE_RECOMMENT,\r\n  postsAPI.changeReComment\r\n);\r\n\r\nexport function* commentSaga() {\r\n  yield takeLatest(READ_COMMENT, readCommentSaga);\r\n  yield takeLatest(DELETE_COMMENT, deleteCommentSaga);\r\n  yield takeLatest(READ_RECOMMENT, readRecommentSaga);\r\n  yield takeLatest(CHANGE_COMMENT, changeCommentSaga);\r\n  yield takeLatest(CHANGE_RECOMMENT, changeReCommentSaga);\r\n}\r\n\r\nconst initialState = {\r\n  comment: null,\r\n  recomment: null,\r\n  data: [],\r\n  recommentdata: [],\r\n  recommentList: [],\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n      data: comment.data,\r\n      comment,\r\n    }),\r\n    [READ_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [DELETE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n      comment,\r\n    }),\r\n    [DELETE_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [CLEAR_RECOMMENTS]: (state, { payload: error }) => ({\r\n      ...state,\r\n      recommentList: [],\r\n    }),\r\n    [READ_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\r\n      ...state,\r\n      recommentdata: recomment.data,\r\n      recommentList: state.recommentList.concat(recomment.data),\r\n      recomment,\r\n    }),\r\n    [READ_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [CHANGE_COMMENT_SUUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n\r\n      comment,\r\n    }),\r\n    [CHANGE_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [CHANGE_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\r\n      ...state,\r\n\r\n      recomment,\r\n    }),\r\n    [CHANGE_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_COMMENT]: () => initialState,\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default post;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { deleteRecomment } from \"../../lib/api/posts\";\r\nimport palatte from \"../../lib/styles/palette\";\r\n\r\nconst ReCommentBlock = styled.span`\r\n  display: inline-flex;\r\n  width: 80%;\r\n\r\n  white-space: normal;\r\n  hr {\r\n    width: 90%;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 56%;\r\n  }\r\n  word-break: break-all;\r\n`;\r\nconst Blank = styled.div`\r\n  display: inline-flex;\r\n  width: 7%;\r\n  @media (max-width: 768px) {\r\n    width: 3%;\r\n  }\r\n`;\r\nconst ActionButton = styled.button`\r\n  display: inline-flex;\r\n  @media (max-width: 768px) {\r\n    width: 20%;\r\n    font-size: 0.765rem;\r\n    padding: 0.2rem 0;\r\n  }\r\n  width: 6%;\r\n  /* padding: 0.25rem 0.5rem; */\r\n  border-radius: 4px;\r\n  justify-content: center;\r\n  padding: 0.25rem 0.5rem;\r\n  box-sizing: border-box;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n    @media (max-width: 768px) {\r\n      margin-left: 0.05rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  /* margin-bottom: 1.5rem; */\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  padding-bottom: -1rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst PostRecommentItem = ({\r\n  recomment,\r\n  onRecomment,\r\n  user,\r\n  onChangeReComment,\r\n}) => {\r\n  const { reply } = recomment.fields;\r\n  // username 불러오기\r\n  const { username } = recomment.fields.author.fields;\r\n  const { pk } = recomment;\r\n  const [text, setText] = useState(\"\");\r\n  const [edit, setEdit] = useState(false);\r\n  const [out, setOut] = useState(false);\r\n\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const onSumbit = (e) => {\r\n    e.preventDefault();\r\n    // 내용이 비어있을 경우 경고 표시\r\n    if (text === \"\") {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    const content = text;\r\n    const recomment_pk = reply;\r\n    onChangeReComment({ pk, content, recomment_pk });\r\n    setText(\"\");\r\n    setEdit(!edit);\r\n  };\r\n\r\n  // 자신이 쓴 대댓글인지 확인\r\n  const ownRecomment = user === username;\r\n\r\n  const { writeAt, content } = recomment.fields;\r\n  const postDate = writeAt.split(\"T\");\r\n  // 대댓글 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      deleteRecomment({ pk });\r\n      setOut(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {out || (\r\n        <>\r\n          {/* 댓글 정보 */}\r\n          <div>\r\n            Date: {postDate[0]} username: {username}\r\n          </div>\r\n          <hr />\r\n          {/* 댓글 수정 부 form 으로 구현  */}\r\n          {edit && (\r\n            <form onSubmit={onSumbit}>\r\n              <Input value={text} onChange={onChange}></Input>\r\n              <>\r\n                <ActionButton type={\"submit\"}>등록</ActionButton>\r\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\r\n              </>\r\n            </form>\r\n          )}\r\n          {edit || (\r\n            <>\r\n              <ReCommentBlock className=\"content\">{content}</ReCommentBlock>\r\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\r\n              {ownRecomment ? (\r\n                <>\r\n                  <Blank>&nbsp;</Blank>\r\n                  <ActionButton\r\n                    onClick={() => {\r\n                      setEdit(!edit);\r\n                      setText(content);\r\n                    }}\r\n                  >\r\n                    수정\r\n                  </ActionButton>\r\n                  <ActionButton onClick={onRemove}>삭제</ActionButton>\r\n                </>\r\n              ) : (\r\n                <div>&nbsp;&nbsp;</div>\r\n              )}\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostRecommentItem;\r\n","import React, { useState } from \"react\";\r\nimport { AiOutlinePlusSquare, AiOutlineMinusSquare } from \"react-icons/ai\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport PostRecommentItem from \"./PostRecommentItem\";\r\nconst ToggleButton = styled.div`\r\n  display: block;\r\n  align-items: center;\r\n\r\n  font-weight: bold;\r\n  font-size: 1.5rem;\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  z-index: 2;\r\n  span {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 1.7rem;\r\n    font-size: 1rem;\r\n    text-align: center;\r\n    margin-bottom: 2px;\r\n  }\r\n  p {\r\n    position: absolute;\r\n    top: -2rem;\r\n    left: 0;\r\n    width: 100%;\r\n    display: hidden;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1rem;\r\n  @media (max-width: 768px) {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  margin-bottom: 1rem;\r\n  cursor: pointer;\r\n  background: ${palette.cyan[5]};\r\n  &:hover {\r\n    background: ${palette.cyan[4]};\r\n  }\r\n  float: right;\r\n`;\r\nconst Button2 = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  width: 100%;\r\n  color: white;\r\n  margin-bottom: 2rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.cyan[5]};\r\n  &:hover {\r\n    background: ${palette.cyan[4]};\r\n  }\r\n`;\r\nconst RecommentBlock = styled.div`\r\n  border: 1px solid rgba(0, 0, 0, 0.02);\r\n  background-color: rgba(0, 0, 0, 0.016);\r\n  padding: 1.5rem;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst PostCommentToggle = ({\r\n  comment,\r\n  onRecomment,\r\n  onClickRe,\r\n  recommentdata,\r\n  onWriteRecomment,\r\n  onReadComment,\r\n  onChangeReComment,\r\n  user,\r\n}) => {\r\n  const { pk } = comment;\r\n  const { answer_reply_length } = comment;\r\n  let recommnet_datas;\r\n  if (answer_reply_length !== 0) {\r\n    recommnet_datas = comment.recomment_data;\r\n  }\r\n  console.log(\"redatais\", recommnet_datas);\r\n  // const { id } = comment.recomments;\r\n  const [set, onSet] = useState(false);\r\n  const [setRe, onSetRe] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const onSubmitRe = (e) => {\r\n    e.preventDefault();\r\n    const content = text;\r\n    onWriteRecomment({ pk, content });\r\n    setText(\"\");\r\n  };\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const onClick = () => {\r\n    onSet(!set);\r\n    let id = pk;\r\n    onClickRe(id);\r\n  };\r\n  const onClick2 = () => {\r\n    onSetRe(!setRe);\r\n  };\r\n\r\n  const onRead = () => {\r\n    let id = pk;\r\n    onReadComment({ id });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        <ToggleButton>\r\n          {set ? (\r\n            <AiOutlineMinusSquare\r\n              onClick={onClick}\r\n              color=\"#22b8cf\"\r\n            ></AiOutlineMinusSquare>\r\n          ) : (\r\n            <AiOutlinePlusSquare\r\n              onClick={onClick}\r\n              color=\"#22b8cf\"\r\n            ></AiOutlinePlusSquare>\r\n          )}\r\n\r\n          {set ? (\r\n            <span onClick={onClick}>숨기기</span>\r\n          ) : (\r\n            <div>\r\n              {answer_reply_length === 0 ? (\r\n                <span onClick={onClick}>답글 달기</span>\r\n              ) : (\r\n                <span onClick={onClick}>{answer_reply_length}개의 댓글</span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </ToggleButton>\r\n      </>\r\n      <br />\r\n      {set && answer_reply_length === 0 ? (\r\n        <form onSubmit={onSubmitRe}>\r\n          <Input\r\n            type=\"text\"\r\n            value={text}\r\n            placeholder=\"답글을 입력하세요\"\r\n            onChange={onChange}\r\n          ></Input>\r\n          <Button type={\"submit\"} onClick={onRead}>\r\n            등록\r\n          </Button>\r\n          <br />\r\n          <br />\r\n        </form>\r\n      ) : null}\r\n      {set && answer_reply_length !== 0 && (\r\n        <>\r\n          <RecommentBlock>\r\n            {recommnet_datas.map((recomment) => (\r\n              <PostRecommentItem\r\n                key={recomment.pk}\r\n                recomment={recomment}\r\n                user={user}\r\n                onChangeReComment={onChangeReComment}\r\n              ></PostRecommentItem>\r\n            ))}\r\n          </RecommentBlock>\r\n          {user && (\r\n            <Button2 onClick={onClick2}>\r\n              {setRe ? \"숨기기\" : \"답글달기\"}\r\n            </Button2>\r\n          )}\r\n          {setRe && (\r\n            <form onSubmit={onSubmitRe}>\r\n              <Input\r\n                type=\"text\"\r\n                value={text}\r\n                placeholder=\"답글을 입력하세요\"\r\n                onChange={onChange}\r\n              ></Input>\r\n              <Button type={\"submit\"}>등록</Button>\r\n              <br />\r\n            </form>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default PostCommentToggle;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport PostCommentToggle from \"./PostCommentToggle\";\r\n// import { deleteComment } from \"../../modules/comment\";\r\nimport { deleteComment } from \"../../lib/api/posts\";\r\nconst CommentBlock = styled.span`\r\n  display: inline-flex;\r\n  width: 80%;\r\n  margin-bottom: 1rem;\r\n  @media (max-width: 768px) {\r\n    width: 70%;\r\n  }\r\n  word-break: break-all;\r\n`;\r\nconst Blank = styled.div`\r\n  display: inline-flex;\r\n  width: 9%;\r\n  @media (max-width: 768px) {\r\n    width: 3%;\r\n  }\r\n`;\r\nconst ActionButton = styled.button`\r\n  display: inline-flex;\r\n  @media (max-width: 768px) {\r\n    width: 13%;\r\n    font-size: 0.875rem;\r\n  }\r\n  width: 5%;\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n    @media (max-width: 768px) {\r\n      margin-left: 0.1rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  word-break: break-all;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst PostCommentItem = ({\r\n  comment,\r\n  user,\r\n  onClickRe,\r\n  recommentdata,\r\n  onWriteRecomment,\r\n  onReadComment,\r\n\r\n  ownComment,\r\n  onChangeComment,\r\n  onChangeReComment,\r\n  recommentList,\r\n}) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [edit, setEdit] = useState(false);\r\n  const [out, setOut] = useState(false);\r\n  const { writeAt, content } = comment.fields;\r\n  const { username } = comment.fields.author.fields;\r\n  const { pk } = comment;\r\n  console.log(comment.answer_reply_length);\r\n\r\n  //  const { content } = recommentList.fields;\r\n\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const onRemoveComment = async () => {\r\n    try {\r\n      await deleteComment({ pk });\r\n      setOut(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const onChangeComments = () => {\r\n    const content = text;\r\n    onChangeComment({ pk, content });\r\n  };\r\n  const onSumbit = (e) => {\r\n    e.preventDefault();\r\n    // 내용이 비어있을 경우 경고 표시\r\n    if (text === \"\") {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    onChangeComments();\r\n    setText(\"\");\r\n    setEdit(!edit);\r\n  };\r\n\r\n  const ownThing = ownComment(username);\r\n  const postDate = writeAt.split(\"T\");\r\n  return (\r\n    <>\r\n      {out || (\r\n        <>\r\n          {/* 댓글 정보 */}\r\n          <div>\r\n            Date: {postDate[0]} username: {username}\r\n          </div>\r\n          <hr />\r\n          {/* 댓글 수정 부 form 으로 구현  */}\r\n          {edit && (\r\n            <form onSubmit={onSumbit}>\r\n              <Input value={text} onChange={onChange}></Input>\r\n              <>\r\n                <ActionButton type={\"submit\"}>등록</ActionButton>\r\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\r\n              </>\r\n            </form>\r\n          )}\r\n          {edit || (\r\n            <>\r\n              <CommentBlock className=\"box\">{content}</CommentBlock>\r\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\r\n              {ownThing ? (\r\n                <>\r\n                  <Blank>&nbsp;</Blank>\r\n                  <ActionButton\r\n                    onClick={() => {\r\n                      setEdit(!edit);\r\n                      setText(content);\r\n                    }}\r\n                  >\r\n                    수정\r\n                  </ActionButton>\r\n                  <ActionButton onClick={onRemoveComment}>삭제</ActionButton>\r\n                </>\r\n              ) : (\r\n                <div>&nbsp;&nbsp;</div>\r\n              )}\r\n            </>\r\n          )}\r\n\r\n          <PostCommentToggle\r\n            comment={comment}\r\n            onClickRe={onClickRe}\r\n            recommentdata={recommentdata}\r\n            onWriteRecomment={onWriteRecomment}\r\n            onReadComment={onReadComment}\r\n            user={user}\r\n            recommentList={recommentList}\r\n            onChangeReComment={onChangeReComment}\r\n          />\r\n          <br />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(PostCommentItem);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PostCommentItem from \"./PostCommentItem\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.cyan[5]};\r\n  &:hover {\r\n    background: ${palette.cyan[4]};\r\n  }\r\n  float: right;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nconst PostCommentList = ({\r\n  user,\r\n  comment,\r\n  number,\r\n  data,\r\n  onPublish,\r\n  onRemove,\r\n  onClickRe,\r\n  recommentdata,\r\n  onWriteRecomment,\r\n  onReadComment,\r\n  ownComment,\r\n  onChangeComment,\r\n  onChangeReComment,\r\n}) => {\r\n  const [content, setText] = useState(\"\");\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (content === \"\") {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    onPublish({ content });\r\n    setText(\"\");\r\n  };\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  console.log(number);\r\n\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <form onSubmit={onSubmit}>\r\n          <Input\r\n            type=\"text\"\r\n            value={content}\r\n            placeholder=\"댓글을 입력하세요\"\r\n            onChange={onChange}\r\n          />\r\n          <Button cyan type={\"submit\"}>\r\n            등록\r\n          </Button>\r\n        </form>\r\n        <br />\r\n        <br />\r\n\r\n        <>\r\n          {data.map((comment) => (\r\n            <PostCommentItem\r\n              key={comment.pk}\r\n              comment={comment}\r\n              onRemove={onRemove}\r\n              onClickRe={onClickRe}\r\n              recommentdata={recommentdata}\r\n              onWriteRecomment={onWriteRecomment}\r\n              onReadComment={onReadComment}\r\n              ownComment={ownComment}\r\n              user={user}\r\n              onChangeComment={onChangeComment}\r\n              onChangeReComment={onChangeReComment}\r\n            ></PostCommentItem>\r\n          ))}\r\n        </>\r\n      </PostHead>\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default React.memo(PostCommentList);\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'commentwrite/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'commentwrite/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_COMMENT,\r\n  WRITE_COMMENT_SUCCESS,\r\n  WRITE_COMMENT_FAILURE,\r\n] = createRequestActionTypes('commentwrite/WRITE_COMMENT'); // 댓글 작성\r\nconst [\r\n  WRITE_RECOMMENT,\r\n  WRITE_RECOMMENT_SUCCESS,\r\n  WRITE_RECOMMENT_FAILURE,\r\n] = createRequestActionTypes('commentwrite/WRITE_RECOMMENT'); // 댓글 작성\r\n// const REMOVE = 'comment/REMOVE';\r\nconst SET_ORIGINAL_COMMENT = 'commentwrite/SET_ORIGINAL_COMMENT';\r\n// const TOGGLE = 'comment/TOGGLE';\r\n// const [\r\n//   UPDATE_COMMENT,\r\n//   UPDATE_COMMENT_SUCCESS,\r\n//   UPDATE_COMMENT_FAILURE,\r\n// ] = createRequestActionTypes('write/UPDATE_COMMENT'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writeComment = createAction(WRITE_COMMENT, ({ pk, content }) => ({\r\n  pk,\r\n  content,\r\n}));\r\nexport const writeReComment = createAction(\r\n  WRITE_RECOMMENT,\r\n  ({ pk, content }) => ({\r\n    pk,\r\n    content,\r\n  }),\r\n);\r\nexport const setOriginalComment = createAction(\r\n  SET_ORIGINAL_COMMENT,\r\n  (post) => post,\r\n);\r\n// export const updateComment = createAction(UPDATE_COMMENT, ({ id, text }) => ({\r\n//   id,\r\n//   text,\r\n// }));\r\n\r\nconst writeCommentSaga = createRequestSaga(\r\n  WRITE_COMMENT,\r\n  postsAPI.writeCommnet,\r\n);\r\n// const updatePostSaga = createRequestSaga(UPDATE_COMMENT, postsAPI);\r\nconst wrtieRecommentSaga = createRequestSaga(\r\n  WRITE_RECOMMENT,\r\n  postsAPI.writeReCommnet,\r\n);\r\nexport function* commentWriteSaga() {\r\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\r\n  yield takeLatest(WRITE_RECOMMENT, wrtieRecommentSaga);\r\n  // yield takeLatest(UPDATE_COMMENT, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  pk: 3,\r\n  content: '123',\r\n  post: null,\r\n  selectComment: null,\r\n  commentError: null,\r\n};\r\n\r\nconst commentwrite = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_COMMENT]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_COMMENT_FAILURE]: (state, { payload: commentError }) => ({\r\n      ...state,\r\n      commentError,\r\n    }),\r\n    [WRITE_RECOMMENT_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_RECOMMENT_FAILURE]: (state, { payload: commentError }) => ({\r\n      ...state,\r\n      commentError,\r\n    }),\r\n    // [SET_ORIGINAL_COMMENT]: (state, { payload: post }) => ({\r\n    //   ...state,\r\n    //   title: post.title,\r\n    //   body: post.body,\r\n    //   tags: post.tags,\r\n    //   originalPostId: post._id,\r\n    // }),\r\n    // [UPDATE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n    //   ...state,\r\n    //   comment,\r\n    // }),\r\n    // [UPDATE_COMMENT_FAILURE]: (state, { payload: postError }) => ({\r\n    //   ...state,\r\n    //   postError,\r\n    // }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default commentwrite;\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteComment,\r\n  readComment,\r\n  unloadComment,\r\n  readRecomment,\r\n  changeComment,\r\n  changeReComment,\r\n} from \"../../modules/comment\";\r\nimport PostCommentList from \"../../components/post/PostCommentList\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  initialize,\r\n  writeComment,\r\n  writeReComment,\r\n} from \"../../modules/commentwrite\";\r\n\r\nconst PostCommentContainer = ({ match }) => {\r\n  const { postId } = match.params;\r\n  const {\r\n    comment,\r\n    data,\r\n    user,\r\n    content,\r\n    pk,\r\n    recommentdata,\r\n    recommentList,\r\n  } = useSelector(({ comment, user, commentwrite }) => ({\r\n    comment: comment.comment,\r\n    data: comment.data,\r\n    user: user.user,\r\n    content: commentwrite.content,\r\n    pk: postId,\r\n    recommentdata: comment.recommentdata,\r\n    recommentList: comment.recommentList,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    dispatch(initialize());\r\n    // 댓글 읽어오기\r\n    dispatch(readComment(postId));\r\n    return () => {\r\n      // dispatch(clearRecomments());\r\n      dispatch(initialize());\r\n      dispatch(unloadComment());\r\n    };\r\n  }, [dispatch, pk, content, postId]);\r\n  // 댓글 읽어오기\r\n  const onReadComment = useCallback(\r\n    ({ id }) => {\r\n      dispatch(readComment(id));\r\n      // dispatch(readRecomment(id));\r\n      // //여기서 해주면\r\n      // dispatch(readRecomment(id));\r\n    },\r\n    [dispatch]\r\n  );\r\n  // 대댓글 읽어오기\r\n  const onClickRe = useCallback(\r\n    (id) => {\r\n      dispatch(readRecomment(id));\r\n      // dispatch(readRecomment(id));\r\n    },\r\n    [dispatch]\r\n  );\r\n  // 댓글 쓰기\r\n  const onPublish = useCallback(\r\n    ({ content }) => {\r\n      dispatch(writeComment({ pk, content }));\r\n      //댓글 읽어오기\r\n      const id = pk;\r\n      dispatch(readComment(id));\r\n      dispatch(readComment(id));\r\n      dispatch(readComment(id));\r\n    },\r\n    [dispatch, pk]\r\n  );\r\n  // 대댓글 쓰기\r\n  const onWriteRecomment = useCallback(\r\n    ({ pk, content }) => {\r\n      dispatch(writeReComment({ pk, content }));\r\n      const id = pk;\r\n      dispatch(readComment(postId));\r\n      dispatch(readRecomment(id));\r\n      dispatch(readRecomment(id));\r\n      dispatch(readRecomment(id));\r\n    },\r\n    [dispatch, postId]\r\n  );\r\n  // // 댓글 삭제하기\r\n  // let is = 'hihi';\r\n  const onRemove = useCallback(\r\n    ({ pk }) => {\r\n      dispatch(deleteComment({ pk }));\r\n    },\r\n    [dispatch]\r\n  );\r\n  // 작성자 게시물 확인하기\r\n  const ownComment = useCallback(\r\n    (postId) => {\r\n      if (postId === user) {\r\n        return true;\r\n      }\r\n    },\r\n    [user]\r\n  );\r\n  // 댓글 수정하기\r\n  const onChangeComment = useCallback(\r\n    ({ pk, content }) => {\r\n      dispatch(changeComment({ pk, content }));\r\n      dispatch(readComment(postId));\r\n      dispatch(readComment(postId));\r\n    },\r\n    [dispatch, postId]\r\n  );\r\n  // 대댓글 수정하기\r\n  const onChangeReComment = useCallback(\r\n    ({ pk, content, recomment_pk }) => {\r\n      dispatch(changeReComment({ pk, content }));\r\n      dispatch(readRecomment(recomment_pk));\r\n      dispatch(readRecomment(recomment_pk));\r\n    },\r\n    [dispatch]\r\n  );\r\n  let number = 0;\r\n  return (\r\n    <PostCommentList\r\n      comment={comment}\r\n      onPublish={onPublish}\r\n      onRemove={onRemove}\r\n      postId={postId}\r\n      number={number}\r\n      data={data}\r\n      user={user}\r\n      onReadComment={onReadComment}\r\n      recommentdata={recommentdata}\r\n      onWriteRecomment={onWriteRecomment}\r\n      onClickRe={onClickRe}\r\n      ownComment={ownComment}\r\n      onChangeComment={onChangeComment}\r\n      onChangeReComment={onChangeReComment}\r\n      recommentList={recommentList}\r\n    >\r\n      {(number += 1)}\r\n    </PostCommentList>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostCommentContainer);\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_POST\");\r\nconst UNLOAD_POST = \"post/UNLOAD_POST\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  data: null,\r\n  error: null,\r\n  _postId: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      data: post.data,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default post;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport SubInfo from \"../common/SubInfo\";\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  @media (max-width: 768px) {\r\n    margin-bottom: 2rem;\r\n    padding-bottom: 2rem;\r\n  }\r\n  h1 {\r\n    @media (max-width: 768px) {\r\n      margin-left: 1rem;\r\n      font-size: 2rem;\r\n      padding-top: 0;\r\n    }\r\n\r\n    padding-top: 2rem;\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst SubInfoinPost = styled.div`\r\n  margin-top: 2rem;\r\n  display: flex;\r\n  margin-left: 1rem;\r\n  font-size: 1rem;\r\n  box-sizing: border-box;\r\n  span + span {\r\n    margin-left: 0.25rem;\r\n    margin-right: 0.25rem;\r\n  }\r\n  span.name {\r\n    margin-left: -0.8rem;\r\n    @media (max-width: 768px) {\r\n      margin-left: 0;\r\n    }\r\n    font-weight: bold;\r\n  }\r\n  span.content {\r\n    margin-left: 0;\r\n    font-weight: normal;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  @media (max-width: 768px) {\r\n    margin-top: -1rem;\r\n    width: 100%;\r\n    margin-left: 1rem;\r\n    font-size: 1rem;\r\n  }\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({\r\n  error,\r\n  loading,\r\n  actionButtons,\r\n  postId,\r\n  postsdata,\r\n  ownPost,\r\n}) => {\r\n  // const [set, onSet] = useState(false);\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    console.log(error);\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  const _postId = parseInt(postId, 10);\r\n  // postsdata 배열에서 주소와 일치하는 post 찾기\r\n  let _data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === _postId;\r\n    });\r\n  // redirecting(새로고침)에서 데이터 사라짐 방지용 localStorage 저장\r\n  if (_data !== null) {\r\n    localStorage.setItem(\"data\", JSON.stringify(_data));\r\n  } else {\r\n    _data = JSON.parse(localStorage.getItem(\"data\"));\r\n  }\r\n  const { title, content, writeAt } = _data.fields;\r\n  let postDate = writeAt.split(\"T\");\r\n  ownPost(_data.fields.author.fields.username);\r\n  let post_id = _data.fields.author.fields.username;\r\n\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <h1>{title}</h1>\r\n        <SubInfoinPost>\r\n          <span className=\"name\">{post_id}</span>\r\n          <span>·</span>\r\n          <span className=\"content\">{postDate[0]}</span>\r\n        </SubInfoinPost>\r\n      </PostHead>\r\n\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: content }} />\r\n\r\n      <PostHead />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewer);\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: black;\r\n\r\n  /* span 사이에 가운뎃점 문자 보여주기*/\r\n  span + span:before {\r\n    color: ${palette.gray[6]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n  }\r\n  div {\r\n    display: block;\r\n  }\r\n  span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ children, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <div></div>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst FullScreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancleText = '취소',\r\n  onConfirm,\r\n  onCancle,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <FullScreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancle}>{cancleText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </FullScreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancle }) => {\r\n  return <AskModal\r\n    visible={visible}\r\n    title=\"포스트 삭제\"\r\n    description=\"포스트를 정말 삭제하시겠습니까?\"\r\n    confirmText=\"삭제\"\r\n    onConfirm={onConfirm}\r\n    onCancle={onCancle}\r\n  ></AskModal>;\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport AskRemoveModal from \"./AskRemoveModal\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst PostActionButtonBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\nconst PostActionButtons = ({ onEdit, onRemove, check, postsdata, match }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancle = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n  const { postId } = match.params;\r\n\r\n  let new_data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === parseInt(postId, 10);\r\n    });\r\n  if (postsdata !== null) {\r\n    localStorage.setItem(\"postdata\", JSON.stringify(new_data));\r\n  } else {\r\n    new_data = JSON.parse(localStorage.getItem(\"postdata\"));\r\n  }\r\n\r\n  const { title, content } = new_data.fields;\r\n  const { pk } = new_data;\r\n  const { username } = new_data.fields.author.fields;\r\n  const originalPostId = username;\r\n\r\n  const onEditThing = () => {\r\n    onEdit({ title, pk, content, originalPostId });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {check && (\r\n        <>\r\n          <PostActionButtonBlock>\r\n            <ActionButton onClick={onEditThing}>수정</ActionButton>\r\n            <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n          </PostActionButtonBlock>\r\n          <AskRemoveModal\r\n            visible={modal}\r\n            onConfirm={onConfirm}\r\n            onCancle={onCancle}\r\n          ></AskRemoveModal>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostActionButtons);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { unloadPost } from \"../../modules/post\";\r\nimport PostViewer from \"../../components/post/PostViewer\";\r\nimport PostActionButtons from \"../../components/post/PostActionButtons\";\r\nimport { setOriginalPost } from \"../../modules/write\";\r\nimport { deletePost } from \"../../lib/api/posts\";\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const [check, onCheck] = useState(false);\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const {\r\n    post,\r\n    error,\r\n    loading,\r\n    user,\r\n    data,\r\n    _postId,\r\n\r\n    postsdata,\r\n  } = useSelector(({ post, loading, user, posts, write }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading[\"post/READ_POST\"],\r\n    user: user.user,\r\n    data: post.data,\r\n    _postId: post._postId,\r\n    title: write.title,\r\n    pk: write.pk,\r\n    content: write.content,\r\n    originalPostId: write.originalPostId,\r\n    postsdata: posts.postsdata,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, _postId]);\r\n\r\n  const onEdit = ({ title, pk, content, originalPostId }) => {\r\n    dispatch(setOriginalPost({ title, pk, content, originalPostId }));\r\n    history.push(\"/write\");\r\n  };\r\n  // 게시물 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      let pk = postId;\r\n      await deletePost({ pk });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  // 수정 삭제 (id 확인)\r\n  const ownPost = (PostId) => {\r\n    if (PostId === user) {\r\n      onCheck(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostViewer\r\n        post={post}\r\n        postsdata={postsdata}\r\n        loading={loading}\r\n        error={error}\r\n        data={data}\r\n        postId={postId}\r\n        ownPost={ownPost}\r\n        actionButtons={\r\n          <PostActionButtons\r\n            postsdata={postsdata}\r\n            onEdit={onEdit}\r\n            onRemove={onRemove}\r\n            check={check}\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostCommentContainer from \"../containers/post/PostCommentContainer\";\r\n\r\nimport PostViewerContainer from \"../containers/post/PostViewerContainer\";\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n      <PostCommentContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import \"./App.css\";\r\nimport { Route } from \"react-router-dom\";\r\nimport PostListPage from \"./pages/PostListPage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport WritePage from \"./pages/WritePage\";\r\nimport PostPage from \"./pages/PostPage\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>REACTERS</title>\r\n      </Helmet>\r\n      <Route\r\n        component={PostListPage}\r\n        path={[\"/board/:postId\", \"/board\", \"/\"]}\r\n        exact\r\n      />\r\n      <Route component={LoginPage} path=\"/login\" />\r\n      <Route component={RegisterPage} path=\"/register\" />\r\n      <Route component={WritePage} path=\"/write\" />\r\n      <Route component={PostPage} path=\"/board/post/:postId\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport loading from './loading';\r\nimport auth, { authSaga } from './auth';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nimport comment, { commentSaga } from './comment';\r\nimport commentwrite, { commentWriteSaga } from './commentwrite';\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n  comment,\r\n  commentwrite,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    authSaga(),\r\n    userSaga(),\r\n    writeSaga(),\r\n    postSaga(),\r\n    postsSaga(),\r\n\r\n    commentSaga(),\r\n    commentWriteSaga(),\r\n  ]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleWare from \"redux-saga\";\r\nimport rootReducer, { rootSaga } from \"./modules\";\r\nimport { tempSetUser, check } from \"./modules/user\";\r\nimport { HelmetProvider } from \"react-helmet-async\";\r\nconst sagaMiddleware = createSagaMiddleWare();\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\n// local Stroage에 저장된 user 불러와 \"\" 제거\r\nfunction loadUser() {\r\n  try {\r\n    const user = localStorage.getItem(\"user\");\r\n    if (!user) return;\r\n    console.log(\"localuser is : \", user);\r\n    const _id = user.toString().replace(/\"/g, \"\");\r\n    store.dispatch(tempSetUser(_id));\r\n  } catch (e) {\r\n    console.log(\"Storage is not working\");\r\n  }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <HelmetProvider>\r\n          <App />\r\n        </HelmetProvider>\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}