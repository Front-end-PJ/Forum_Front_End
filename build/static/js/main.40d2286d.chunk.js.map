{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/posts.js","modules/posts.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","components/posts/PostList.js","modules/post.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/comment.js","components/post/PostRecommentItem.js","components/post/PostCommentToggle.js","components/post/PostCommentItem.js","components/post/PostCommentList.js","modules/commentwrite.js","containers/post/PostCommentContainer.js","components/common/SubInfo.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","MenuList","BoardList","Header","user","onLogout","boards","console","log","className","onClick","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","deleteComment","pk","queryString","qs","stringify","delete","deleteRecomment","deletePost","readPost","id","get","postsSaga","READ_BOAD","READ_BOAD_SUCCESS","READ_BOAD_FAILURE","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","TOGGLE_MENU","toggleMenu","readBoard","listPosts","listPostsSaga","postsAPI","readBoardSaga","posts","takeLatest","postsdata","lastPage","parseInt","headers","toggle","logout","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","checkFailureSaga","localStorage","removeItem","e","authAPI","checkError","HeaderContainer","useSelector","dispatch","useDispatch","useEffect","PostListBlock","WritePostButtonWrapper","BoardItemBlock","PostItemBlock","PostItem","post","reply_length","username","fields","author","title","postDate","writeAt","split","withRouter","showWriteButton","postId","map","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","unloadPost","readPostSaga","initialState","_postId","match","history","params","undefined","setItem","JSON","PaginationBlock","PageNumber","buildLink","tag","page","query","Pagination","disabled","location","parse","search","ignoreQueryPrefix","PostListPage","AuthTemplateBlock","WitheBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","email","password","login","registerSaga","loginSaga","passwordConfirm","auth","cookies","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ErrorMessage","ButtonWithMarginTop","textMap","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","useState","setError","push","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","content","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","originalPostId","updatePost","writePostSaga","updatePostSaga","postError","write","EditorContainer","useCallback","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","onUpdatePost","tags","_id","goBack","WritePage","commentSaga","READ_COMMENT","READ_COMMENT_SUCCESS","READ_COMMENT_FAILURE","DELETE_COMMENT","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","UNLOAD_COMMENT","READ_RECOMMENT","READ_RECOMMENT_SUUCCESS","READ_RECOMMENT_FAILURE","CHANGE_COMMENT","CHANGE_COMMENT_SUUCCESS","CHANGE_COMMENT_FAILURE","CHANGE_RECOMMENT","CHANGE_RECOMMENT_SUUCCESS","CHANGE_RECOMMENT_FAILURE","readComment","unloadComment","readRecomment","changeComment","changeReComment","readCommentSaga","deleteCommentSaga","readRecommentSaga","changeCommentSaga","changeReCommentSaga","qeryString","comment","recomment","recommentdata","ReCommentBlock","span","ActionButton","Input","PostRecommentItem","onRecomment","onChangeReComment","reply","setText","edit","setEdit","out","setOut","ownRecomment","onRemove","a","recomment_pk","alert","ToggleButton","Button2","RecommentBlock","PostCommentToggle","onClickRe","onWriteRecomment","onReadComment","answer_reply_length","set","onSet","setRe","onSetRe","onSubmitRe","color","CommentBlock","palatte","PostCommentItem","ownComment","onChangeComment","onRemoveComment","ownThing","PostHead","PostViewerBlock","PostCommentList","commentWriteSaga","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","WRITE_RECOMMENT","WRITE_RECOMMENT_SUCCESS","WRITE_RECOMMENT_FAILURE","writeComment","writeReComment","writeCommentSaga","wrtieRecommentSaga","selectComment","commentError","commentwrite","onCheck","SubInfoBlock","hasMarginTop","SubInfo","SubInfoinPost","PostContent","actionButtons","ownPost","_data","find","x","getItem","publishedDate","dangerouslySetInnerHTML","__html","FullScreen","AskModalBlock","AskModal","visible","description","confirmText","cancleText","onConfirm","onCancle","AskRemoveModal","PostActionButtonBlock","onEdit","modal","setModal","new_data","PostId","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleWare","store","createStore","composeWithDevTools","applyMiddleware","run","toString","replace","loadUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40d2286d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport Responsive from \"./Responsive\";\n\nimport Button from \"./Button\";\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n  z-index: 3;\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 800;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst MenuList = styled(Link)`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst BoardList = styled.div`\n  ul {\n    display: none;\n    position: fixed;\n  }\n\n  :hover {\n    ul {\n      display: block;\n      border-radius: 10px;\n      box-sizing: border-box;\n    }\n  }\n`;\n\nconst Header = ({ user, onLogout, boards }) => {\n  return (\n    <>\n      {console.log(boards)}\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            REACTERS\n          </Link>\n          <MenuList>\n            <BoardList>Board List</BoardList>\n          </MenuList>\n          <MenuList to=\"/board/1\">Q&A</MenuList>\n\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user}</UserInfo>\n              <Button cyan onClick={onLogout}>\n                로그아웃\n              </Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button cyan to=\"/login\">\n                로그인\n              </Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type));\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\n// axios 인스턴스 생성\r\n\r\nconst client = axios.create();\r\n\r\n// // 글로벌 설정\r\n\r\n// // // API 주소 다른 곳 사용\r\n// client.defaults.baseURL = \"https://djangocrudboard.ml\";\r\n// client.defaults.withCredentials = true;\r\n\r\n// //header\r\n// client.defaults.headers.common['Authorization'] = '주소';\r\n\r\n// //인터셉터\r\n// axios.intercepter.response.use(\r\n//     response => {\r\n//         //요청 성공시 특정 작업\r\n//         return response;\r\n//     },\r\n//     error => {\r\n//         //요청 실패 시 특정 작업\r\n//         return Promise.reject(error);\r\n//     }\r\n// )\r\nexport default client;\r\n","import qs from \"qs\";\nimport client from \"./client\";\n// 게시판 목록 불러오기\nexport const getBoard = (posts) => (posts = client.get(`/board`));\n\n// 글쓰기\nexport const writePost = ({ title, pk, content }) => {\n  const queryString = qs.stringify({\n    title,\n    pk,\n    content,\n  });\n  console.log(\"postitem\", queryString);\n  return client.post(\"/post\", queryString);\n};\n\n// 댓글 쓰기\nexport const writeCommnet = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  console.log((\"query\", queryString));\n  return client.post(\"/reply\", queryString);\n};\n\n// 글 수정하기\nexport const updatePost = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/post\", queryString);\n};\n\n// 댓글 수정하기\nexport const changeComment = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/reply\", queryString);\n};\n// 대댓글 수정하기\nexport const changeReComment = ({ pk, content }) => {\n  const qeryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/answer_reply\", qeryString);\n};\n\n// 댓글 삭제하기\nexport const deleteComment = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  console.log(\"hajsdfhajsdf\", pk);\n  return client.delete(\"/reply\", {\n    data: queryString,\n  });\n  // return client.delete(\"/reply\", queryString);\n};\n\nexport const deleteRecomment = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  return client.delete(\"/answer_reply\", { data: queryString });\n};\n\n// 글 삭제하기\nexport const deletePost = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  return client.delete(\"/post\", { data: queryString });\n};\n\nexport const writeReCommnet = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.post(`/answer_reply?pk=${pk}`, queryString);\n};\n\n// 댓글 읽어오기\nexport const readComment = (id) => client.get(`/reply?pk=${id}`);\n\n// 대댓글 읽어오기\nexport const readRecoment = (id) => client.get(`/answer_reply?pk=${id}`);\n\n// 글 읽어오기\nexport const readPost = (id) => client.get(`/post?pk=${id}`);\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\n// 게시판 목록 불러오기\r\nconst [\r\n  READ_BOAD,\r\n  READ_BOAD_SUCCESS,\r\n  READ_BOAD_FAILURE,\r\n] = createRequestActionTypes(\"posts/READ_BOARD\");\r\n\r\n// 글 목록 불러오기\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes(\"posts/LIST_POSTS\");\r\n\r\nconst TOGGLE_MENU = \"posts/TOGGLE/MENU\";\r\n\r\nexport const toggleMenu = createAction(TOGGLE_MENU);\r\n\r\n// 액션 만들어주기\r\n\r\nexport const readBoard = createAction(READ_BOAD);\r\nexport const listPosts = createAction(LIST_POSTS, (id) => id);\r\n\r\n//Saga 만들어주기\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.readPost);\r\nconst readBoardSaga = createRequestSaga(READ_BOAD, postsAPI.getBoard);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n  yield takeLatest(READ_BOAD, readBoardSaga);\r\n}\r\n\r\nconst initialState = {\r\n  boards: null,\r\n  posts: null,\r\n  data: null,\r\n  postsdata: null,\r\n  error: null,\r\n  lastPage: 1,\r\n  toggle: false,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      postsdata: posts.data,\r\n      posts,\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [READ_BOAD_SUCCESS]: (state, { payload: data, meta: response }) => ({\r\n      ...state,\r\n      data,\r\n      boards: data.data,\r\n      lastPage: parseInt(response.headers[\"last-page\"], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    // (data = posts.data)\r\n    // console.log(data)\r\n    [READ_BOAD_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [TOGGLE_MENU]: (state, { payload: toggle }) => ({\r\n      ...state,\r\n      toggle: !toggle,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default posts;\r\n","import client from \"./client\";\r\nimport qs from \"qs\";\r\n\r\n// 회원가입\r\n\r\nexport const register = ({ username, email, password }) =>\r\n  client.post(\"/register\", qs.stringify({ username, email, password }));\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post(\"/login\", qs.stringify({ username, password }));\r\n\r\n// 로그인 상태 확인\r\nexport const check = (user) => client.get(`/login?=${user}`);\r\n\r\n// 로그아웃\r\nexport const logout = () => client.get(\"/logout\");\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport { takeLatest, call } from \"redux-saga/effects\";\r\nimport * as authAPI from \"../lib/api/auth\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\n\r\nconst TEMP_SET_USER = \"user/TEMP_SET_USER\"; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  \"user/CHECK\"\r\n);\r\nconst LOGOUT = \"user/LOGOUT\";\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK, (user) => user);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    console.log(\"hihih\");\r\n    localStorage.removeItem(\"user\"); // localStorage 에서 user 제거하고\r\n  } catch (e) {\r\n    console.log(\"localStorage is not working\");\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API 호출\r\n    localStorage.removeItem(\"user\"); // localStorage 에서 user 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  data: null,\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      data,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { readBoard, toggleMenu } from '../../modules/posts';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n  const { user, toggle, boards, data } = useSelector(({ user, posts }) => ({\r\n    user: user.user,\r\n    toggle: posts.toggle,\r\n    boards: posts.boards,\r\n    data: posts.data,\r\n  }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  //게시판 목록 불러오기\r\n  useEffect(() => {\r\n    dispatch(readBoard());\r\n  }, [dispatch]);\r\n  const onClick = () => {\r\n    dispatch(toggleMenu(toggle));\r\n  };\r\n  return (\r\n    <Header\r\n      user={user}\r\n      onLogout={onLogout}\r\n      onClick={onClick}\r\n      boards={boards}\r\n      data={data}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Responsive from \"../common/Responsive\";\nimport Button from \"../common/Button\";\nimport palette from \"../../lib/styles/palette\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst BoardItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-right: 2rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-right: 2rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { reply_length } = post;\n  const { username } = post.fields.author.fields;\n\n  const { title, writeAt } = post.fields;\n\n  const postDate = writeAt.split(\"T\");\n\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/board/post/${post.pk}`}>{title}</Link>\n      </h2>\n\n      <p>\n        작성자 : {username} 작성일 {postDate[0]}\n      </p>\n\n      <br />\n      <span>댓글 수 : {reply_length}</span>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({\n  posts,\n  loading,\n  error,\n  showWriteButton,\n  postsdata,\n  postId,\n\n  user,\n}) => {\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n  return (\n    <BoardItemBlock>\n      <PostListBlock>\n        <WritePostButtonWrapper>\n          {showWriteButton && user ? (\n            <Button cyan to={`/write/${postId}`}>\n              새 글 작성하기\n            </Button>\n          ) : null}\n        </WritePostButtonWrapper>\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n\n        {!loading && posts && postsdata && (\n          <div>\n            {postsdata.map((post) => (\n              <PostItem post={post} key={post.pk} />\n            ))}\n          </div>\n        )}\n      </PostListBlock>\n    </BoardItemBlock>\n  );\n};\n\nexport default withRouter(PostList);\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_POST\");\r\nconst UNLOAD_POST = \"post/UNLOAD_POST\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  data: null,\r\n  error: null,\r\n  _postId: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      data: post.data,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default post;\r\n","import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostList from \"../../components/posts/PostList\";\r\nimport { listPosts } from \"../../modules/posts\";\r\nimport { readPost } from \"../../modules/post\";\r\n\r\nconst PostListContainer = ({ match, history }) => {\r\n  let { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user, data, post, postsdata } = useSelector(\r\n    ({ posts, loading, user, post }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading[\"posts/READ_BOARD\"],\r\n      user: user.user,\r\n      data: posts.data,\r\n      boards: posts.boards,\r\n      post: post.post,\r\n      _postId: post._postId,\r\n      postsdata: posts.postsdata,\r\n    })\r\n  );\r\n  // 각 게시판 별 게시물들 불러오기\r\n  useEffect(() => {\r\n    if (postId === undefined) {\r\n      postId = 1;\r\n    }\r\n\r\n    dispatch(readPost(postId));\r\n    dispatch(listPosts(postId));\r\n  }, [dispatch, postId]);\r\n  useEffect(() => {\r\n    if (postId) {\r\n      try {\r\n        localStorage.setItem(\"postId\", JSON.stringify(postId));\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n    }\r\n  }, [history, postId]);\r\n  return (\r\n    <PostList\r\n      postId={postId}\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      data={data}\r\n      post={post}\r\n      user={user}\r\n      postsdata={postsdata}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 5rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { tag, username, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostListContainer from \"../containers/posts/PostListContainer\";\r\nimport PaginationContainer from \"../containers/posts/PaginationContainer\";\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n// 페이지 레이아웃 담당\r\n\r\n// 화면 전체 채움\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  //flex로 내부 중앙 정렬\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n// 흰색 박스\r\nconst WitheBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WitheBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/board/1\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WitheBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(\r\n  REGISTER,\r\n  ({ username, email, password }) => ({\r\n    username,\r\n    email,\r\n    password,\r\n  }),\r\n);\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  cookies: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      auth: null,\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../common/Button';\r\n// 회원가입 또는 로그인 폼\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n// 스타일링 된 input\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n// 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\n// 에러 메세지\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일 입력\"\r\n            type=\"email\"\r\n            onChange={onChange}\r\n            value={form.email}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { changeField, initializeForm, login } from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport { check, tempSetUser } from \"../../modules/user\";\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    error: user.error,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: \"login\",\r\n        key: name,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"login\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log(\"오류 발생\");\r\n      console.log(authError);\r\n      setError(\"로그인 실패\");\r\n      return;\r\n    }\r\n    if (auth) {\r\n      const { username } = form;\r\n      console.log(\"로그인 성공\");\r\n      // dispatch(check(username));\r\n      dispatch(tempSetUser(username));\r\n    }\r\n  }, [auth, authError, dispatch, form]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/\");\r\n      try {\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n        console.log(\"set user ok\");\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n\r\n      console.log(\"user\", user);\r\n    }\r\n  }, [history, auth, form, user, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\n\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeField, initializeForm, register } from \"../../modules/auth\";\nimport AuthForm from \"../../components/auth/AuthForm\";\nimport { check } from \"../../modules/user\";\nimport { withRouter } from \"react-router-dom\";\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: \"register\",\n        key: name,\n        value,\n      })\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password, passwordConfirm, email } = form;\n    // 하나라도 비어있다면\n    if ([username, password, passwordConfirm, email].includes(\"\")) {\n      setError(\"빈 칸을 모두 입력하세요.\");\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError(\"비밀번호가 일치하지 않습니다.\");\n      dispatch(changeField({ form: \"register\", key: \"password\", value: \"\" }));\n      dispatch(\n        changeField({ form: \"register\", key: \"passwordConfirm\", value: \"\" })\n      );\n      return;\n    }\n    dispatch(register({ username, email, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm(\"register\"));\n  }, [dispatch]);\n\n  // 회원가입 성공 / 실패 처리\n  useEffect(() => {\n    if (authError) {\n      console.log(\"authError is : \", authError);\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError(\"이미 존재하는 계정명입니다.\");\n        return;\n      }\n      // 기타 이유\n      setError(\"회원가입 실패\");\n      return;\n    }\n\n    if (auth) {\n      console.log(\"회원가입 성공\");\n      history.push(\"/\");\n      console.log(auth);\n    }\n  }, [auth, authError, dispatch, user, history]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    const { username } = form;\n    if (username) {\n      history.push(\"/\"); // 홈 화면으로 이동\n      try {\n        localStorage.setItem(\"user\", JSON.stringify(username));\n      } catch (e) {\n        console.log(\"localStorage is not working\");\n      }\n    }\n  }, [history, user, form]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, content, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'content', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = content;\r\n  }, [content]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as api from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst INITIALIZE = \"write/INITIALIZE\"; // 모든 내용 초기화\nconst CHANGE_FIELD = \"write/CHANGE_FIELD\"; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes(\"write/WRITE_POST\"); // 포스트 작성\nconst SET_ORIGINAL_POST = \"write/SET_ORIGINAL_POST\";\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes(\"write/UPDATE_POST\"); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, pk, content }) => ({\n  title,\n  pk,\n  content,\n}));\nexport const setOriginalPost = createAction(\n  SET_ORIGINAL_POST,\n  ({ title, pk, content, originalPostId }) => ({\n    title,\n    pk,\n    content,\n    originalPostId,\n  })\n);\nexport const updatePost = createAction(UPDATE_POST, ({ pk, content }) => ({\n  pk,\n  content,\n}));\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, api.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, api.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: \"\",\n  pk: \"1\",\n  content: \"\",\n  originalPostId: \"\",\n  post: null,\n  postError: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post, meta: response }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (\n      state,\n      { payload: { title, pk, content, originalPostId } }\n    ) => ({\n      ...state,\n      title,\n      pk,\n      content,\n      originalPostId,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState\n);\n\nexport default write;\n","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { title, content } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    content: write.content,\r\n  }));\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch],\r\n  );\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <Editor onChangeField={onChangeField} title={title} content={content} />\r\n  );\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({\r\n  onCancel,\r\n  onPublish,\r\n  onUpdatePost,\r\n  originalPostId,\r\n  pk,\r\n}) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      {!originalPostId ? (\r\n        <StyledButton cyan onClick={onPublish}>\r\n          포스트 등록\r\n        </StyledButton>\r\n      ) : (\r\n        <StyledButton cyan onClick={() => onUpdatePost({ pk })}>\r\n          포스트 수정\r\n        </StyledButton>\r\n      )}\r\n\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from \"react\";\nimport WriteActionButtons from \"../../components/write/WriteActionButtons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { writePost, updatePost } from \"../../modules/write\";\nimport { listPosts } from \"../../modules/posts\";\n\nconst WriteActionButtonsContainer = ({ history, match }) => {\n  const { postId } = match.params;\n\n  const dispatch = useDispatch();\n  const {\n    title,\n    content,\n    tags,\n    pk,\n    post,\n    postError,\n    originalPostId,\n  } = useSelector(({ write }) => ({\n    title: write.title,\n    pk: write.pk,\n    content: write.content,\n    tags: write.tags,\n    post: write.post,\n    postError: write.postError,\n    originalPostId: write.originalPostId,\n  }));\n\n  // 포스트 등록\n  const onPublish = () => {\n    dispatch(\n      writePost({\n        title,\n        pk,\n        content,\n      })\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n\n      history.push(`/`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  const onUpdatePost = ({ pk }) => {\n    dispatch(updatePost({ pk, content }));\n  };\n  return (\n    <WriteActionButtons\n      pk={pk}\n      originalPostId={originalPostId}\n      onPublish={onPublish}\n      onCancel={onCancel}\n      onUpdatePost={onUpdatePost}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from \"react\";\r\nimport Responsive from \"../components/common/Responsive\";\r\nimport EditorContainer from \"../containers/write/EditorContainer\";\r\nimport WriteActionButtonsContainer from \"../containers/write/WriteActionButtonsContainer\";\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <EditorContainer />\r\n      <hr />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as postsAPI from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst [\n  READ_COMMENT,\n  READ_COMMENT_SUCCESS,\n  READ_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/READ_COMMENT\");\nconst [\n  DELETE_COMMENT,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/DELETE_COMMENT\");\nconst UNLOAD_COMMENT = \"post/UNLOAD_COMMENT\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nconst [\n  READ_RECOMMENT,\n  READ_RECOMMENT_SUUCCESS,\n  READ_RECOMMENT_FAILURE,\n] = createRequestActionTypes(\"post/READ_RECOMMENT\");\n\nconst [\n  CHANGE_COMMENT,\n  CHANGE_COMMENT_SUUCCESS,\n  CHANGE_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/CHANGE_COMMENT\");\n\nconst [\n  CHANGE_RECOMMENT,\n  CHANGE_RECOMMENT_SUUCCESS,\n  CHANGE_RECOMMENT_FAILURE,\n] = createRequestActionTypes(\"post/CHANGE_RECOMMENT\");\n\nexport const deleteComment = createAction(DELETE_COMMENT, ({ pk }) => ({ pk }));\nexport const readComment = createAction(READ_COMMENT, (id) => id);\nexport const unloadComment = createAction(UNLOAD_COMMENT);\nexport const readRecomment = createAction(READ_RECOMMENT, (id) => id);\nexport const changeComment = createAction(\n  CHANGE_COMMENT,\n  ({ pk, content }) => ({ pk, content })\n);\nexport const changeReComment = createAction(\n  CHANGE_RECOMMENT,\n  ({ pk, content }) => ({ pk, content })\n);\n\nconst readCommentSaga = createRequestSaga(READ_COMMENT, postsAPI.readComment);\nconst deleteCommentSaga = createRequestSaga(\n  DELETE_COMMENT,\n  postsAPI.deleteComment\n);\nconst readRecommentSaga = createRequestSaga(\n  READ_RECOMMENT,\n  postsAPI.readRecoment\n);\nconst changeCommentSaga = createRequestSaga(\n  CHANGE_COMMENT,\n  postsAPI.changeComment\n);\nconst changeReCommentSaga = createRequestSaga(\n  CHANGE_RECOMMENT,\n  postsAPI.changeReComment\n);\n\nexport function* commentSaga() {\n  yield takeLatest(READ_COMMENT, readCommentSaga);\n  yield takeLatest(DELETE_COMMENT, deleteCommentSaga);\n  yield takeLatest(READ_RECOMMENT, readRecommentSaga);\n  yield takeLatest(CHANGE_COMMENT, changeCommentSaga);\n  yield takeLatest(CHANGE_RECOMMENT, changeReCommentSaga);\n}\n\nconst initialState = {\n  comment: null,\n  recomment: null,\n  data: [],\n  recommentdata: [],\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n      data: comment.data,\n      comment,\n    }),\n    [READ_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [DELETE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n      comment,\n    }),\n    [DELETE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [READ_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\n      ...state,\n      recommentdata: recomment.data,\n      recomment,\n    }),\n    [READ_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CHANGE_COMMENT_SUUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n\n      comment,\n    }),\n    [CHANGE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CHANGE_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\n      ...state,\n\n      recomment,\n    }),\n    [CHANGE_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_COMMENT]: () => initialState,\n  },\n  initialState\n);\n\nexport default post;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { deleteRecomment } from \"../../lib/api/posts\";\nimport palette from \"../../lib/styles/palette\";\n\nconst ReCommentBlock = styled.span`\n  display: flex;\n  justify-content: flex-start;\n\n  div {\n    display: flex;\n    justify-content: flex-end;\n\n    margin-top: -1.5rem;\n    width: 100%;\n    margin-bottom: 2rem;\n  }\n`;\n\nconst ActionButton = styled.button`\n  display: flex;\n  justify-content: flex-end;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  display: flex;\n  justify-content: flex-end;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst PostRecommentItem = ({\n  recomment,\n  onRecomment,\n  user,\n  onChangeReComment,\n}) => {\n  const { reply } = recomment.fields;\n  // username 불러오기\n  const { username } = recomment.fields.author.fields;\n  const { pk } = recomment;\n  const [text, setText] = useState(\"\");\n  const [edit, setEdit] = useState(false);\n  const [out, setOut] = useState(false);\n\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const onSumbit = (e) => {\n    e.preventDefault();\n    // 내용이 비어있을 경우 경고 표시\n    if (text === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    const content = text;\n    const recomment_pk = reply;\n    onChangeReComment({ pk, content, recomment_pk });\n    setText(\"\");\n    setEdit(!edit);\n  };\n\n  // 자신이 쓴 대댓글인지 확인\n  const ownRecomment = user === username;\n\n  const { writeAt, content } = recomment.fields;\n  const postDate = writeAt.split(\"T\");\n  // 대댓글 삭제\n  const onRemove = async () => {\n    try {\n      deleteRecomment({ pk });\n      setOut(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <>\n      {out || (\n        <div>\n          {/* 댓글 정보 */}\n          <span>\n            Date: {postDate[0]} username: {username}\n          </span>\n          <hr />\n          {/* 댓글 수정 부 form 으로 구현  */}\n          {edit && (\n            <form onSubmit={onSumbit}>\n              <Input value={text} onChange={onChange}></Input>\n              <ReCommentBlock>\n                <ActionButton type={\"submit\"}>등록</ActionButton>\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\n              </ReCommentBlock>\n            </form>\n          )}\n          {edit || (\n            <div>\n              <ReCommentBlock>{content}</ReCommentBlock>\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\n              {ownRecomment ? (\n                <>\n                  <ReCommentBlock>\n                    <div>\n                      <ActionButton\n                        onClick={() => {\n                          setEdit(!edit);\n                          setText(content);\n                        }}\n                      >\n                        수정\n                      </ActionButton>\n                      <ActionButton onClick={onRemove}>삭제</ActionButton>\n                    </div>\n                  </ReCommentBlock>\n                </>\n              ) : (\n                <div>&nbsp;&nbsp;</div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PostRecommentItem;\n","import React, { useState } from \"react\";\nimport { AiOutlinePlusSquare, AiOutlineMinusSquare } from \"react-icons/ai\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport PostRecommentItem from \"./PostRecommentItem\";\nconst ToggleButton = styled.div`\n  display: block;\n  align-items: center;\n\n  font-weight: bold;\n  font-size: 1.5rem;\n  cursor: pointer;\n  box-sizing: border-box;\n  position: relative;\n  z-index: 2;\n  span {\n    position: absolute;\n    top: 0;\n    left: 1.7rem;\n    font-size: 1rem;\n    text-align: center;\n    margin-bottom: 2px;\n  }\n  p {\n    position: absolute;\n    top: -2rem;\n    left: 0;\n    width: 100%;\n    display: hidden;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n  float: right;\n`;\nconst Button2 = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  width: 100%;\n  color: white;\n  margin-bottom: 2rem;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n`;\nconst RecommentBlock = styled.div`\n  border: 1px solid rgba(0, 0, 0, 0.02);\n  background-color: rgba(0, 0, 0, 0.016);\n  padding: 1.5rem;\n  border-radius: 10px;\n  margin-top: 1.3125rem;\n`;\n\nconst PostCommentToggle = ({\n  comment,\n  onRecomment,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  onChangeReComment,\n  user,\n}) => {\n  const { pk } = comment;\n  const { answer_reply_length } = comment;\n  // const { id } = comment.recomments;\n  const [set, onSet] = useState(false);\n  const [setRe, onSetRe] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  const onSubmitRe = (e) => {\n    e.preventDefault();\n    const content = text;\n    onWriteRecomment({ pk, content });\n    setText(\"\");\n  };\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  const onClick = () => {\n    onSet(!set);\n    let id = pk;\n    onClickRe({ id });\n  };\n  const onClick2 = () => {\n    onSetRe(!setRe);\n  };\n\n  const onRead = () => {\n    let id = pk;\n    onReadComment({ id });\n  };\n\n  return (\n    <>\n      <>\n        <ToggleButton>\n          {set ? (\n            <AiOutlineMinusSquare\n              onClick={onClick}\n              color=\"#22b8cf\"\n            ></AiOutlineMinusSquare>\n          ) : (\n            <AiOutlinePlusSquare\n              onClick={onClick}\n              color=\"#22b8cf\"\n            ></AiOutlinePlusSquare>\n          )}\n\n          {set ? (\n            <span onClick={onClick}>숨기기</span>\n          ) : (\n            <div>\n              {answer_reply_length === 0 ? (\n                <span onClick={onClick}>답글 달기</span>\n              ) : (\n                <span onClick={onClick}>{answer_reply_length}개의 댓글</span>\n              )}\n            </div>\n          )}\n        </ToggleButton>\n      </>\n      <br />\n      {set && answer_reply_length === 0 ? (\n        <form onSubmit={onSubmitRe}>\n          <Input\n            type=\"text\"\n            value={text}\n            placeholder=\"답글을 입력하세요\"\n            onChange={onChange}\n          ></Input>\n          <Button type={\"submit\"} onClick={onRead}>\n            등록\n          </Button>\n        </form>\n      ) : null}\n      {set && answer_reply_length !== 0 && (\n        <>\n          <RecommentBlock>\n            {recommentdata.map((recomment) => (\n              <PostRecommentItem\n                key={recomment.pk}\n                recomment={recomment}\n                user={user}\n                onChangeReComment={onChangeReComment}\n              ></PostRecommentItem>\n            ))}\n          </RecommentBlock>\n          {user && (\n            <Button2 onClick={onClick2}>\n              {setRe ? \"숨기기\" : \"답글달기\"}\n            </Button2>\n          )}\n          {setRe && (\n            <form onSubmit={onSubmitRe}>\n              <Input\n                type=\"text\"\n                value={text}\n                placeholder=\"답글을 입력하세요\"\n                onChange={onChange}\n              ></Input>\n              <Button type={\"submit\"}>등록</Button>\n            </form>\n          )}\n        </>\n      )}\n    </>\n  );\n};\nexport default PostCommentToggle;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport palatte from \"../../lib/styles/palette\";\nimport PostCommentToggle from \"./PostCommentToggle\";\n// import { deleteComment } from \"../../modules/comment\";\nimport { deleteComment } from \"../../lib/api/posts\";\nconst CommentBlock = styled.span`\n  display: flex;\n  justify-content: flex-start;\n\n  div {\n    display: flex;\n    justify-content: flex-end;\n\n    margin-top: -1.5rem;\n    width: 100%;\n    margin-bottom: 2rem;\n  }\n`;\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palatte.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palatte.gray[1]};\n    color: ${palatte.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst PostCommentItem = ({\n  comment,\n  user,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  ownComment,\n  onChangeComment,\n  onChangeReComment,\n}) => {\n  const [text, setText] = useState(\"\");\n  const [edit, setEdit] = useState(false);\n  const [out, setOut] = useState(false);\n  const { writeAt, content } = comment.fields;\n  const { username } = comment.fields.author.fields;\n\n  const { pk } = comment;\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  const onRemoveComment = async () => {\n    try {\n      await deleteComment({ pk });\n      setOut(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const onChangeComments = () => {\n    const content = text;\n    onChangeComment({ pk, content });\n  };\n  const onSumbit = (e) => {\n    e.preventDefault();\n    // 내용이 비어있을 경우 경고 표시\n    if (text === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    onChangeComments();\n    setText(\"\");\n    setEdit(!edit);\n  };\n\n  const ownThing = ownComment(username);\n\n  const postDate = writeAt.split(\"T\");\n  return (\n    <>\n      {out || (\n        <div>\n          {/* 댓글 정보 */}\n          <span>\n            Date: {postDate[0]} username: {username}\n          </span>\n          <hr />\n          {/* 댓글 수정 부 form 으로 구현  */}\n          {edit && (\n            <form onSubmit={onSumbit}>\n              <Input value={text} onChange={onChange}></Input>\n              <CommentBlock>\n                <div>\n                  <ActionButton type={\"submit\"}>등록</ActionButton>\n                  <ActionButton onClick={() => setEdit(!edit)}>\n                    취소\n                  </ActionButton>\n                </div>\n              </CommentBlock>\n            </form>\n          )}\n          {edit || (\n            <div>\n              <CommentBlock>{content}</CommentBlock>\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\n              {ownThing ? (\n                <>\n                  <CommentBlock>\n                    <div>\n                      <ActionButton\n                        onClick={() => {\n                          setEdit(!edit);\n                          setText(content);\n                        }}\n                      >\n                        수정\n                      </ActionButton>\n                      <ActionButton onClick={onRemoveComment}>\n                        삭제\n                      </ActionButton>\n                    </div>\n                  </CommentBlock>\n                </>\n              ) : (\n                <div>&nbsp;&nbsp;</div>\n              )}\n            </div>\n          )}\n\n          <PostCommentToggle\n            comment={comment}\n            onClickRe={onClickRe}\n            recommentdata={recommentdata}\n            onWriteRecomment={onWriteRecomment}\n            onReadComment={onReadComment}\n            user={user}\n            onChangeReComment={onChangeReComment}\n          />\n          <br />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PostCommentItem;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PostCommentItem from \"./PostCommentItem\";\nimport palette from \"../../lib/styles/palette\";\nimport Responsive from \"../common/Responsive\";\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n  float: right;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\n\nconst PostCommentList = ({\n  user,\n  comment,\n  data,\n  onPublish,\n  onRemove,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  ownComment,\n  onChangeComment,\n  onChangeReComment,\n}) => {\n  const [content, setText] = useState(\"\");\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (content === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    onPublish({ content });\n    setText(\"\");\n  };\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  return (\n    <PostViewerBlock>\n      <PostHead>\n        <form onSubmit={onSubmit}>\n          <Input\n            type=\"text\"\n            value={content}\n            placeholder=\"댓글을 입력하세요\"\n            onChange={onChange}\n          />\n          <Button cyan type={\"submit\"}>\n            등록\n          </Button>\n        </form>\n        <br />\n        <br />\n\n        <div>\n          {data.map((comment) => (\n            <PostCommentItem\n              key={comment.pk}\n              comment={comment}\n              onRemove={onRemove}\n              onClickRe={onClickRe}\n              recommentdata={recommentdata}\n              onWriteRecomment={onWriteRecomment}\n              onReadComment={onReadComment}\n              ownComment={ownComment}\n              user={user}\n              onChangeComment={onChangeComment}\n              onChangeReComment={onChangeReComment}\n            ></PostCommentItem>\n          ))}\n        </div>\n      </PostHead>\n    </PostViewerBlock>\n  );\n};\n\nexport default PostCommentList;\n","import { createAction, handleActions } from 'redux-actions';\n\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'commentwrite/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'commentwrite/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_COMMENT,\n  WRITE_COMMENT_SUCCESS,\n  WRITE_COMMENT_FAILURE,\n] = createRequestActionTypes('commentwrite/WRITE_COMMENT'); // 댓글 작성\nconst [\n  WRITE_RECOMMENT,\n  WRITE_RECOMMENT_SUCCESS,\n  WRITE_RECOMMENT_FAILURE,\n] = createRequestActionTypes('commentwrite/WRITE_RECOMMENT'); // 댓글 작성\n// const REMOVE = 'comment/REMOVE';\nconst SET_ORIGINAL_COMMENT = 'commentwrite/SET_ORIGINAL_COMMENT';\n// const TOGGLE = 'comment/TOGGLE';\n// const [\n//   UPDATE_COMMENT,\n//   UPDATE_COMMENT_SUCCESS,\n//   UPDATE_COMMENT_FAILURE,\n// ] = createRequestActionTypes('write/UPDATE_COMMENT'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writeComment = createAction(WRITE_COMMENT, ({ pk, content }) => ({\n  pk,\n  content,\n}));\nexport const writeReComment = createAction(\n  WRITE_RECOMMENT,\n  ({ pk, content }) => ({\n    pk,\n    content,\n  }),\n);\nexport const setOriginalComment = createAction(\n  SET_ORIGINAL_COMMENT,\n  (post) => post,\n);\n// export const updateComment = createAction(UPDATE_COMMENT, ({ id, text }) => ({\n//   id,\n//   text,\n// }));\n\nconst writeCommentSaga = createRequestSaga(\n  WRITE_COMMENT,\n  postsAPI.writeCommnet,\n);\n// const updatePostSaga = createRequestSaga(UPDATE_COMMENT, postsAPI);\nconst wrtieRecommentSaga = createRequestSaga(\n  WRITE_RECOMMENT,\n  postsAPI.writeReCommnet,\n);\nexport function* commentWriteSaga() {\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\n  yield takeLatest(WRITE_RECOMMENT, wrtieRecommentSaga);\n  // yield takeLatest(UPDATE_COMMENT, updatePostSaga);\n}\n\nconst initialState = {\n  pk: 3,\n  content: '123',\n  post: null,\n  selectComment: null,\n  commentError: null,\n};\n\nconst commentwrite = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_COMMENT]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_COMMENT_FAILURE]: (state, { payload: commentError }) => ({\n      ...state,\n      commentError,\n    }),\n    [WRITE_RECOMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_RECOMMENT_FAILURE]: (state, { payload: commentError }) => ({\n      ...state,\n      commentError,\n    }),\n    // [SET_ORIGINAL_COMMENT]: (state, { payload: post }) => ({\n    //   ...state,\n    //   title: post.title,\n    //   body: post.body,\n    //   tags: post.tags,\n    //   originalPostId: post._id,\n    // }),\n    // [UPDATE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n    //   ...state,\n    //   comment,\n    // }),\n    // [UPDATE_COMMENT_FAILURE]: (state, { payload: postError }) => ({\n    //   ...state,\n    //   postError,\n    // }),\n  },\n  initialState,\n);\n\nexport default commentwrite;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  deleteComment,\n  readComment,\n  unloadComment,\n  readRecomment,\n  changeComment,\n  changeReComment,\n} from \"../../modules/comment\";\nimport PostCommentList from \"../../components/post/PostCommentList\";\nimport { withRouter } from \"react-router-dom\";\nimport {\n  initialize,\n  writeComment,\n  writeReComment,\n} from \"../../modules/commentwrite\";\n\nconst PostCommentContainer = ({ match }) => {\n  const [check, onCheck] = useState(false);\n  const { postId } = match.params;\n  const { comment, data, user, content, pk, recommentdata } = useSelector(\n    ({ comment, user, commentwrite }) => ({\n      comment: comment.comment,\n      data: comment.data,\n      user: user.user,\n      content: commentwrite.content,\n      pk: postId,\n      recommentdata: comment.recommentdata,\n    })\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    dispatch(initialize());\n    // 댓글 읽어오기\n    dispatch(readComment(postId));\n    return () => {\n      dispatch(initialize());\n      dispatch(unloadComment());\n    };\n  }, [dispatch, pk, content, postId]);\n  // 댓글 읽어오기\n  const onReadComment = ({ id }) => {\n    dispatch(readComment(id));\n  };\n  // 대댓글 읽어오기\n  const onClickRe = ({ id }) => {\n    dispatch(readRecomment(id));\n  };\n  // 댓글 쓰기\n  const onPublish = ({ content }) => {\n    dispatch(writeComment({ pk, content }));\n    //댓글 읽어오기\n    const id = pk;\n    dispatch(readComment(id));\n    dispatch(readComment(id));\n    dispatch(readComment(id));\n  };\n  // 대댓글 쓰기\n  const onWriteRecomment = ({ pk, content }) => {\n    dispatch(writeReComment({ pk, content }));\n    const id = pk;\n    dispatch(readComment(postId));\n    dispatch(readRecomment(id));\n    dispatch(readRecomment(id));\n    dispatch(readRecomment(id));\n  };\n\n  // // 댓글 삭제하기\n  // let is = 'hihi';\n  const onRemove = ({ pk }) => {\n    dispatch(deleteComment({ pk }));\n  };\n  // 작성자 게시물 확인하기\n  const ownComment = (postId) => {\n    if (postId === user) {\n      onCheck(true);\n      return true;\n    }\n  };\n  // 댓글 수정하기\n  const onChangeComment = ({ pk, content }) => {\n    dispatch(changeComment({ pk, content }));\n    dispatch(readComment(postId));\n    dispatch(readComment(postId));\n  };\n  // 대댓글 수정하기\n  const onChangeReComment = ({ pk, content, recomment_pk }) => {\n    dispatch(changeReComment({ pk, content }));\n    dispatch(readRecomment(recomment_pk));\n    dispatch(readRecomment(recomment_pk));\n  };\n  return (\n    <PostCommentList\n      comment={comment}\n      // onToggle={onToggle}\n      onPublish={onPublish}\n      onRemove={onRemove}\n      postId={postId}\n      data={data}\n      user={user}\n      onReadComment={onReadComment}\n      recommentdata={recommentdata}\n      onWriteRecomment={onWriteRecomment}\n      onClickRe={onClickRe}\n      ownComment={ownComment}\n      onChangeComment={onChangeComment}\n      onChangeReComment={onChangeReComment}\n    ></PostCommentList>\n  );\n};\n\nexport default withRouter(PostCommentContainer);\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: black;\r\n\r\n  /* span 사이에 가운뎃점 문자 보여주기*/\r\n  span + span:before {\r\n    color: ${palette.gray[6]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n  }\r\n  div {\r\n    display: block;\r\n  }\r\n  span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ children, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <div></div>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport SubInfo from \"../common/SubInfo\";\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst SubInfoinPost = styled(SubInfo)`\r\n  border: 1px solid ${palette.gray[2]};\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({\r\n  error,\r\n  loading,\r\n  actionButtons,\r\n  postId,\r\n  postsdata,\r\n  ownPost,\r\n}) => {\r\n  // const [set, onSet] = useState(false);\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    console.log(error);\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  const _postId = parseInt(postId, 10);\r\n  // postsdata 배열에서 주소와 일치하는 post 찾기\r\n  let _data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === _postId;\r\n    });\r\n  // redirecting(새로고침)에서 데이터 사라짐 방지용 localStorage 저장\r\n  if (_data !== null) {\r\n    localStorage.setItem(\"data\", JSON.stringify(_data));\r\n  } else {\r\n    _data = JSON.parse(localStorage.getItem(\"data\"));\r\n  }\r\n  const { title, content, writeAt } = _data.fields;\r\n  ownPost(_data.fields.author.fields.username);\r\n\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <h1>제목 : {title}</h1>\r\n        <SubInfoinPost publishedDate={writeAt} hasMarginTop />\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: content }} />\r\n\r\n      <PostHead />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst FullScreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancleText = '취소',\r\n  onConfirm,\r\n  onCancle,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <FullScreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancle}>{cancleText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </FullScreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancle }) => {\r\n  return <AskModal\r\n    visible={visible}\r\n    title=\"포스트 삭제\"\r\n    description=\"포스트를 정말 삭제하시겠습니까?\"\r\n    confirmText=\"삭제\"\r\n    onConfirm={onConfirm}\r\n    onCancle={onCancle}\r\n  ></AskModal>;\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport AskRemoveModal from \"./AskRemoveModal\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst PostActionButtonBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\nconst PostActionButtons = ({ onEdit, onRemove, check, postsdata, match }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancle = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n  const { postId } = match.params;\r\n\r\n  let new_data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === parseInt(postId, 10);\r\n    });\r\n  if (postsdata !== null) {\r\n    localStorage.setItem(\"postdata\", JSON.stringify(new_data));\r\n  } else {\r\n    new_data = JSON.parse(localStorage.getItem(\"postdata\"));\r\n  }\r\n\r\n  const { title, content } = new_data.fields;\r\n  const { pk } = new_data;\r\n  const { username } = new_data.fields.author.fields;\r\n  const originalPostId = username;\r\n\r\n  const onEditThing = () => {\r\n    onEdit({ title, pk, content, originalPostId });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {check && (\r\n        <>\r\n          <PostActionButtonBlock>\r\n            <ActionButton onClick={onEditThing}>수정</ActionButton>\r\n            <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n          </PostActionButtonBlock>\r\n          <AskRemoveModal\r\n            visible={modal}\r\n            onConfirm={onConfirm}\r\n            onCancle={onCancle}\r\n          ></AskRemoveModal>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostActionButtons);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { unloadPost } from \"../../modules/post\";\r\nimport PostViewer from \"../../components/post/PostViewer\";\r\nimport PostActionButtons from \"../../components/post/PostActionButtons\";\r\nimport { setOriginalPost } from \"../../modules/write\";\r\nimport { deletePost } from \"../../lib/api/posts\";\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const [check, onCheck] = useState(false);\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const {\r\n    post,\r\n    error,\r\n    loading,\r\n    user,\r\n    data,\r\n    _postId,\r\n\r\n    postsdata,\r\n  } = useSelector(({ post, loading, user, posts, write }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading[\"post/READ_POST\"],\r\n    user: user.user,\r\n    data: post.data,\r\n    _postId: post._postId,\r\n    title: write.title,\r\n    pk: write.pk,\r\n    content: write.content,\r\n    originalPostId: write.originalPostId,\r\n    postsdata: posts.postsdata,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, _postId]);\r\n\r\n  const onEdit = ({ title, pk, content, originalPostId }) => {\r\n    dispatch(setOriginalPost({ title, pk, content, originalPostId }));\r\n    history.push(\"/write\");\r\n  };\r\n  // 게시물 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      let pk = postId;\r\n      await deletePost({ pk });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  // 수정 삭제 (id 확인)\r\n  const ownPost = (PostId) => {\r\n    if (PostId === user) {\r\n      onCheck(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostViewer\r\n        post={post}\r\n        postsdata={postsdata}\r\n        loading={loading}\r\n        error={error}\r\n        data={data}\r\n        postId={postId}\r\n        ownPost={ownPost}\r\n        actionButtons={\r\n          <PostActionButtons\r\n            postsdata={postsdata}\r\n            onEdit={onEdit}\r\n            onRemove={onRemove}\r\n            check={check}\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostCommentContainer from \"../containers/post/PostCommentContainer\";\r\n\r\nimport PostViewerContainer from \"../containers/post/PostViewerContainer\";\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n      <PostCommentContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport PostListPage from \"./pages/PostListPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport WritePage from \"./pages/WritePage\";\nimport PostPage from \"./pages/PostPage\";\nimport { Helmet } from \"react-helmet-async\";\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n      <Route\n        component={PostListPage}\n        path={[\"/board/:postId\", \"/board\", \"/\"]}\n        exact\n      />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/board/post/:postId\" />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport loading from './loading';\r\nimport auth, { authSaga } from './auth';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nimport comment, { commentSaga } from './comment';\r\nimport commentwrite, { commentWriteSaga } from './commentwrite';\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n  comment,\r\n  commentwrite,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    authSaga(),\r\n    userSaga(),\r\n    writeSaga(),\r\n    postSaga(),\r\n    postsSaga(),\r\n\r\n    commentSaga(),\r\n    commentWriteSaga(),\r\n  ]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleWare from 'redux-saga';\r\nimport rootReducer, { rootSaga } from './modules';\r\nimport { tempSetUser, check } from './modules/user';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\nconst sagaMiddleware = createSagaMiddleWare();\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\r\n);\r\n\r\n// local Stroage에 저장된 user 불러와 \"\" 제거\r\nfunction loadUser() {\r\n  try {\r\n    const user = localStorage.getItem('user');\r\n    if (!user) return;\r\n    console.log('localuser is : ', user);\r\n    const _id = user.toString().replace(/\"/g, '');\r\n    store.dispatch(tempSetUser(_id));\r\n    store.dispatch(check(_id));\r\n  } catch (e) {\r\n    console.log('Storage is not working');\r\n  }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <HelmetProvider>\r\n          <App />\r\n        </HelmetProvider>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}