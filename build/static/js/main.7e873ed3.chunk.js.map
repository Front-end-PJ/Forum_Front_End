{"version":3,"sources":["lib/styles/palette.js","components/common/Button.js","components/common/Responsive.js","components/common/Headers.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/posts.js","modules/posts.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","components/posts/PostList.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/comment.js","components/post/PostRecommentItem.js","components/post/PostCommentToggle.js","components/post/PostCommentItem.js","components/post/PostCommentList.js","modules/commentwrite.js","containers/post/PostCommentContainer.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","styled","button","StyledLink","Link","Button","to","ResponsiveBlock","div","Responsive","children","rest","HaderBlock","Wrapper","MenuGroup","Headers","user","onLogout","boards","useState","check","onCheck","$toggles","document","querySelectorAll","a","toggles2","getElementById","console","log","classList","toggle","e","boards_data","onClick","localStorage","setItem","JSON","stringify","parse","getItem","className","style","display","replace","forEach","call","id","class","map","board","pk","rep","lace","fields","name","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","response","data","meta","error","client","axios","create","defaults","baseURL","withCredentials","deleteComment","queryString","qs","delete","deleteRecomment","deletePost","readPost","start","end","get","postsSaga","READ_BOAD","READ_BOAD_SUCCESS","READ_BOAD_FAILURE","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","TOGGLE_MENU","toggleMenu","readBoard","listPosts","listPostsSaga","postsAPI","readBoardSaga","posts","takeLatest","postsdata","lastPage","parseInt","headers","logout","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","LOGOUT","tempSetUser","checkSaga","authAPI","removeItem","username","checkError","HeaderContainer","useSelector","dispatch","useDispatch","useEffect","PostListBlock","Buttons","WritePostButtonWrapper","BoardItemBlock","PostItemBlock","PostItem","post","reply_length","author","title","postDate","writeAt","split","withRouter","showWriteButton","postId","match","params","pageId","boardId","undefined","isNaN","toString","diff","PaginationBlock","PageNumber","buildLink","page","query","Pagination","disabled","post_length","find","Math","floor","PostListPage","AuthTemplateBlock","WitheBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","nickname","email","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","cookies","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ErrorMessage","ButtonWithMarginTop","textMap","AuthForm","onChange","onSubmit","text","autoComplete","placeholder","history","setError","_id","push","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","content","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","originalPostId","updatePost","writePostSaga","updatePostSaga","postError","write","useCallback","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","onUpdatePost","local_pk","location","tags","alert","goBack","WritePage","commentSaga","READ_COMMENT","READ_COMMENT_SUCCESS","READ_COMMENT_FAILURE","DELETE_COMMENT","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","UNLOAD_COMMENT","READ_RECOMMENT","READ_RECOMMENT_SUUCCESS","READ_RECOMMENT_FAILURE","CHANGE_COMMENT","CHANGE_COMMENT_SUUCCESS","CHANGE_COMMENT_FAILURE","CHANGE_RECOMMENT","CHANGE_RECOMMENT_SUUCCESS","CHANGE_RECOMMENT_FAILURE","CLEAR_RECOMMENTS","readComment","unloadComment","readRecomment","changeComment","changeReComment","readCommentSaga","deleteCommentSaga","readRecommentSaga","changeCommentSaga","changeReCommentSaga","qeryString","comment","recomment","recommentdata","recommentList","concat","ReCommentBlock","span","Blank","ActionButton","palatte","Input","PostRecommentItem","onRecomment","onChangeReComment","reply","setText","edit","setEdit","out","setOut","ownRecomment","onRemove","recomment_pk","ToggleButton","Button2","RecommentBlock","PostCommentToggle","recommnet_datas","onClickRe","onWriteRecomment","onReadComment","answer_reply_length","recomment_data","set","onSet","setRe","onSetRe","onSubmitRe","color","CommentBlock","PostCommentItem","ownComment","onChangeComment","onRemoveComment","ownThing","React","memo","PostHead","PostViewerBlock","PostCommentList","number","commentWriteSaga","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","WRITE_RECOMMENT","WRITE_RECOMMENT_SUCCESS","WRITE_RECOMMENT_FAILURE","writeComment","writeReComment","writeCommentSaga","wrtieRecommentSaga","selectComment","commentError","commentwrite","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","unloadPost","readPostSaga","_postId","SubInfoinPost","PostContent","actionButtons","ownPost","_data","x","post_id","dangerouslySetInnerHTML","__html","FullScreen","AskModalBlock","AskModal","visible","description","confirmText","cancleText","onConfirm","onCancle","AskRemoveModal","PostActionButtonBlock","onEdit","modal","setModal","new_data","PostId","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleWare","store","createStore","composeWithDevTools","applyMiddleware","run","loadUser","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7e873ed3.chunk.js","sourcesContent":["// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  /* align-items: center;\r\n  align-content: center;\r\n  justify-content: center;\r\n  justify-self: center; */\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n      @media (max-width: 768px) {\r\n        width: 100%;\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n    font-size: 1rem;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport Button from \"./Button\";\r\nimport Responsive from \"./Responsive\";\r\n\r\nconst HaderBlock = styled.div`\r\n  //clearfix\r\n  .clearfix::after {\r\n    content: \"\";\r\n    clear: both;\r\n    display: block;\r\n  }\r\n\r\n  .float--left {\r\n    float: left;\r\n  }\r\n\r\n  .float--right {\r\n    float: right;\r\n  }\r\n\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 3;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n  @media (max-width: 768px) {\r\n    .float--left,\r\n    .float--right {\r\n      float: none;\r\n    }\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: none;\r\n    /* 초기화 */\r\n    height: auto;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\nconst MenuGroup = styled.div`\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n    margin-top: 0.5rem;\r\n    margin-left: 0;\r\n  }\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n\r\n  .logo {\r\n    @media (max-width: 768px) {\r\n      display: flex;\r\n      width: 7rem;\r\n    }\r\n    display: flex;\r\n    align-content: center;\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  #toggle-btn {\r\n    display: none;\r\n    font-size: 1.5rem;\r\n    position: absolute;\r\n    top: 0.55rem;\r\n    right: 1rem;\r\n    cursor: pointer;\r\n    text-indent: -9999px;\r\n    @media (max-width: 768px) {\r\n      display: block;\r\n    }\r\n  }\r\n  .main-menu {\r\n    display: flex;\r\n    font-size: 1rem;\r\n    font-weight: 800;\r\n    align-content: center;\r\n\r\n    @media (max-width: 768px) {\r\n      display: block;\r\n    }\r\n  }\r\n\r\n  .main-menu .myLink {\r\n    @media (max-width: 768px) {\r\n      display: block;\r\n      margin-left: 0;\r\n      box-sizing: border-box;\r\n      margin: 0.5rem;\r\n      :first-child {\r\n        border-top: 1px solid #e5e5e5;\r\n      }\r\n      border-bottom: 1px solid #e5e5e5;\r\n    }\r\n    margin-left: 7rem;\r\n    display: flex;\r\n\r\n    padding: 10px;\r\n    color: #3c4146;\r\n  }\r\n\r\n  .btn {\r\n    order: 2;\r\n    justify-content: center;\r\n    @media (max-width: 768px) {\r\n      text-align: center;\r\n      box-sizing: border-box;\r\n      margin: 0.5rem;\r\n      display: block;\r\n      justify-self: center;\r\n    }\r\n  }\r\n  .username {\r\n    order: 1;\r\n    font-weight: 800;\r\n    margin-right: 1.5rem;\r\n    justify-content: center;\r\n    p {\r\n      display: none;\r\n    }\r\n    @media (max-width: 768px) {\r\n      margin-left: 1.5rem;\r\n      p {\r\n        display: inline;\r\n      }\r\n    }\r\n  }\r\n  @media (max-width: 768px) {\r\n    .toggle {\r\n      display: none;\r\n    }\r\n    .toggle.on {\r\n      display: block;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Headers = ({ user, onLogout, boards }) => {\r\n  const [check, onCheck] = useState(false);\r\n\r\n  const $toggles = document.querySelectorAll(\".toggle\"); //NodeList\r\n\r\n  function toggleElements() {\r\n    [].forEach.call($toggles, function (toggle) {\r\n      toggle.classList.toggle(\"on\");\r\n    });\r\n  }\r\n\r\n  async function get() {\r\n    try {\r\n      onLogout();\r\n      const toggles2 = document.getElementById(\".log\");\r\n      console.log(\"select\", toggles2);\r\n      toggles2.classList.toggle(\"on\");\r\n      onCheck(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  if (check) {\r\n    const toggles2 = document.getElementById(\".log\");\r\n    console.log(\"select\", toggles2);\r\n    toggles2.classList.toggle(\"on\");\r\n    onCheck(false);\r\n  }\r\n  let boards_data = boards && boards;\r\n  if (boards !== null) {\r\n    localStorage.setItem(\"boards\", JSON.stringify(boards));\r\n  } else {\r\n    boards_data = JSON.parse(localStorage.getItem(\"boards\"));\r\n  }\r\n  function onClick() {\r\n    localStorage.setItem(\"start\", 0);\r\n    localStorage.setItem(\"end\", 10);\r\n    console.log(\"askldjflasd;kf\");\r\n  }\r\n  let id = 1;\r\n  return (\r\n    <HaderBlock>\r\n      <Wrapper className=\"clearfix\">\r\n        <MenuGroup className=\"float--left\">\r\n          <Link style={{ display: \"flex\" }} to=\"/\" className=\"logo\" replace>\r\n            C&D\r\n          </Link>\r\n          <GiHamburgerMenu\r\n            onClick={toggleElements}\r\n            id=\"toggle-btn\"\r\n          ></GiHamburgerMenu>\r\n          <div class=\"main-menu toggle\">\r\n            {boards_data && (\r\n              <div className=\"main-menu\">\r\n                {boards_data.map((board) => (\r\n                  <Link\r\n                    onClick={onClick}\r\n                    to={`/board/${board.pk}/page=${id}`}\r\n                    className=\"myLink\"\r\n                    key={board.pk}\r\n                    rep\r\n                    lace\r\n                  >\r\n                    {board.fields.name}\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </MenuGroup>\r\n        <MenuGroup className=\"float--right\">\r\n          {user ? (\r\n            <>\r\n              <div className=\"toggle username\">\r\n                <p>ID : </p>\r\n                {user}\r\n              </div>\r\n              <Button className=\"toggle btn\" cyan onClick={get}>\r\n                로그아웃\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <Button className=\"toggle btn\" id=\"log\" cyan to=\"/login\">\r\n              로그인\r\n            </Button>\r\n          )}\r\n        </MenuGroup>\r\n      </Wrapper>\r\n    </HaderBlock>\r\n  );\r\n};\r\n\r\nexport default Headers;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type));\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n","import axios from \"axios\";\n\n// axios 인스턴스 생성\n\nconst client = axios.create();\n\n// // 글로벌 설정\n\n// // API 주소 다른 곳 사용\nclient.defaults.baseURL = \"https://djangocrudboard.ml\";\nclient.defaults.withCredentials = true;\nclient.withCredentials = true;\n\n// //header\n// client.defaults.headers.common['Authorization'] = '주소';\n\n// //인터셉터\n// axios.intercepter.response.use(\n//     response => {\n//         //요청 성공시 특정 작업\n//         return response;\n//     },\n//     error => {\n//         //요청 실패 시 특정 작업\n//         return Promise.reject(error);\n//     }\n// )\nexport default client;\n","import qs from \"qs\";\nimport client from \"./client\";\n// 게시판 목록 불러오기\nexport const getBoard = (posts) => (posts = client.get(`/board`));\n\n// 글쓰기\nexport const writePost = ({ title, pk, content }) => {\n  const queryString = qs.stringify({\n    title,\n    pk,\n    content,\n  });\n  console.log(\"postitem\", queryString);\n  return client.post(\"/post\", queryString);\n};\n\n// 댓글 쓰기\nexport const writeCommnet = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  console.log((\"query\", queryString));\n  return client.post(\"/reply\", queryString);\n};\n\n// 글 수정하기\nexport const updatePost = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/post\", queryString);\n};\n\n// 댓글 수정하기\nexport const changeComment = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/reply\", queryString);\n};\n// 대댓글 수정하기\nexport const changeReComment = ({ pk, content }) => {\n  const qeryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/answer_reply\", qeryString);\n};\n\n// 댓글 삭제하기\nexport const deleteComment = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  console.log(\"hajsdfhajsdf\", pk);\n  return client.delete(\"/reply\", {\n    data: queryString,\n  });\n  // return client.delete(\"/reply\", queryString);\n};\n\nexport const deleteRecomment = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  return client.delete(\"/answer_reply\", { data: queryString });\n};\n\n// 글 삭제하기\nexport const deletePost = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  return client.delete(\"/post\", { data: queryString });\n};\n\nexport const writeReCommnet = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.post(`/answer_reply?pk=${pk}`, queryString);\n};\n\n// 댓글 읽어오기\nexport const readComment = (id) => client.get(`/reply?pk=${id}`);\n\n// 모든 댓글 읽어오기\nexport const readComments = (id) => client.get(`/replies?pk=${id}`);\n\n// 대댓글 읽어오기\nexport const readRecoment = (id) => client.get(`/answer_reply?pk=${id}`);\n\n// 글 읽어오기\nexport const readPost = ({ id, start, end }) =>\n  client.get(`/post?pk=${id}&start=${start}&end=${end}`);\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as postsAPI from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\n// 다음버튼\nconst NEXT_PAGE = \"posts/NEXT_PAGE\";\nconst PREV_PAGE = \"post/PREV_PAGE\";\n\n// 게시판 목록 불러오기\nconst [\n  READ_BOAD,\n  READ_BOAD_SUCCESS,\n  READ_BOAD_FAILURE,\n] = createRequestActionTypes(\"posts/READ_BOARD\");\n\n// 글 목록 불러오기\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes(\"posts/LIST_POSTS\");\n\nconst TOGGLE_MENU = \"posts/TOGGLE/MENU\";\n\nexport const toggleMenu = createAction(TOGGLE_MENU);\n\n// 액션 만들어주기\n\nexport const nextPage = createAction(NEXT_PAGE);\nexport const prevPage = createAction(PREV_PAGE);\nexport const readBoard = createAction(READ_BOAD);\nexport const listPosts = createAction(LIST_POSTS, ({ id, start, end }) => ({\n  id,\n  start,\n  end,\n}));\n\n//Saga 만들어주기\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.readPost);\nconst readBoardSaga = createRequestSaga(READ_BOAD, postsAPI.getBoard);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n  yield takeLatest(READ_BOAD, readBoardSaga);\n}\n\nconst initialState = {\n  boards: null,\n  posts: null,\n  data: null,\n  postsdata: null,\n  error: null,\n  start: 1,\n  end: 10,\n  lastPage: 1,\n  toggle: false,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\n      ...state,\n      postsdata: posts.data,\n      posts,\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [READ_BOAD_SUCCESS]: (state, { payload: data, meta: response }) => ({\n      ...state,\n      data,\n      boards: data.data,\n      lastPage: parseInt(response.headers[\"last-page\"], 10), // 문자열을 숫자로 변환\n    }),\n    // (data = posts.data)\n    // console.log(data)\n    [READ_BOAD_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [TOGGLE_MENU]: (state, { payload: toggle }) => ({\n      ...state,\n      toggle: !toggle,\n    }),\n  },\n  initialState\n);\n\nexport default posts;\n","import client from \"./client\";\nimport qs from \"qs\";\n\n// 회원가입\n\nexport const register = ({ username, nickname, email, password }) =>\n  client.post(\n    \"/register\",\n    qs.stringify({ username, nickname, email, password })\n  );\n\n// 로그인\nexport const login = ({ username, password }) =>\n   client.post(\"/login\", qs.stringify({ username, password }));\n\n// 로그인 상태 확인\nexport const check = client.get(\"/login\");\n\n// 로그아웃\nexport const logout = () => client.get(\"/logout\");\n","import { createAction, handleActions } from \"redux-actions\";\nimport { takeLatest, call } from \"redux-saga/effects\";\nimport * as authAPI from \"../lib/api/auth\";\nimport createRequestSaga, {\n   createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\n\nconst TEMP_SET_USER = \"user/TEMP_SET_USER\"; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS] = createRequestActionTypes(\"user/CHECK\");\nconst LOGOUT = \"user/LOGOUT\";\n\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\n// function checkFailureSaga() {\n//   try {\n//     console.log();\n//     localStorage.removeItem(\"user\"); // localStorage 에서 user 제거하고\n//   } catch (e) {\n//     console.log(\"localStorage is not working\");\n//   }\n// }\n\nfunction* logoutSaga() {\n   try {\n      yield call(authAPI.logout); // logout API 호출\n      console.log(\"hjisadfjaiskdlf\");\n      localStorage.removeItem(\"user\"); // localStorage 에서 user 제거\n   } catch (e) {\n      console.log(e);\n   }\n}\n\nexport function* userSaga() {\n   yield takeLatest(CHECK, checkSaga);\n   yield takeLatest(LOGOUT, logoutSaga);\n   // yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n}\n\nconst initialState = {\n   data: null,\n   user: null,\n   checkError: null,\n};\n\nexport default handleActions(\n   {\n      [TEMP_SET_USER]: (state, { payload: user }) => ({\n         ...state,\n         user,\n      }),\n      [CHECK_SUCCESS]: (state, { payload: data }) => ({\n         ...state,\n         data,\n         user: state.data.username,\n         checkError: null,\n      }),\n      // [CHECK_FAILURE]: (state, { payload: error }) => ({\n      //   ...state,\n      //   user: null,\n      //   checkError: error,\n      // }),\n      [LOGOUT]: (state) => ({\n         ...state,\n         user: null,\n      }),\n   },\n   initialState\n);\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Headers from \"../../components/common/Headers\";\nimport { readBoard, toggleMenu } from \"../../modules/posts\";\nimport { logout } from \"../../modules/user\";\n\nconst HeaderContainer = () => {\n  const { user, toggle, boards, data } = useSelector(({ user, posts }) => ({\n    user: user.user,\n    toggle: posts.toggle,\n    boards: posts.boards,\n    data: posts.data,\n  }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  //게시판 목록 불러오기\n  useEffect(() => {\n    dispatch(readBoard());\n  }, [dispatch]);\n  const onClick = () => {\n    dispatch(toggleMenu(toggle));\n  };\n  return (\n    <>\n      <Headers\n        user={user}\n        onLogout={onLogout}\n        onClick={onClick}\n        boards={boards}\n        data={data}\n      />\n    </>\n  );\n};\n\nexport default HeaderContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Responsive from \"../common/Responsive\";\nimport Button from \"../common/Button\";\nimport palette from \"../../lib/styles/palette\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n  @media (max-width: 768px) {\n    margin-top: 0.5rem;\n  }\n`;\nconst Buttons = styled(Button)`\n  width: auto;\n`;\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst BoardItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-right: 2rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-right: 2rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { reply_length } = post;\n  const { username } = post.fields.author.fields;\n\n  const { title, writeAt } = post.fields;\n\n  const postDate = writeAt.split(\"T\");\n\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/board/post/${post.pk}`}>{title}</Link>\n      </h2>\n\n      <p>\n        <Link to={`/board/post/${post.pk}`}>\n          작성자 : {username}, 작성일 : {postDate[0]}\n        </Link>\n      </p>\n\n      <br />\n      <span>댓글 수 : {reply_length}</span>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({\n  posts,\n  loading,\n  error,\n  showWriteButton,\n  postsdata,\n  postId,\n\n  user,\n}) => {\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n  return (\n    <BoardItemBlock>\n      <PostListBlock>\n        <WritePostButtonWrapper>\n          {showWriteButton && user ? (\n            <Buttons cyan to={`/write/${postId}`}>\n              새 글 작성하기\n            </Buttons>\n          ) : null}\n        </WritePostButtonWrapper>\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n\n        {!loading && posts && postsdata && (\n          <div>\n            {postsdata.map((post) => (\n              <PostItem post={post} key={post.pk} />\n            ))}\n          </div>\n        )}\n      </PostListBlock>\n    </BoardItemBlock>\n  );\n};\n\nexport default withRouter(PostList);\n","import React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostList from \"../../components/posts/PostList\";\nimport { listPosts } from \"../../modules/posts\";\n\nconst PostListContainer = ({ match }) => {\n  let { pageId, boardId } = match.params;\n\n  const dispatch = useDispatch();\n  const { posts, error, loading, user, data, post, postsdata } = useSelector(\n    ({ posts, loading, user, post }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading[\"posts/READ_BOARD\"],\n      user: user.user,\n      data: posts.data,\n      boards: posts.boards,\n      post: post.post,\n\n      postsdata: posts.postsdata,\n    })\n  );\n  // 각 게시판 별 게시물들 불러오기\n\n  if (pageId === undefined) {\n    pageId = 1;\n  }\n  let start, end;\n  start = localStorage.getItem(\"start\");\n  end = localStorage.getItem(\"end\");\n  if (start === isNaN || end === isNaN) {\n    localStorage.setItem(\"start\", 0);\n    localStorage.setItem(\"end\", 10);\n    start = 1;\n    end = 10;\n  } else if (!start) {\n    localStorage.setItem(\"start\", 0);\n    start = 1;\n  } else if (!end) {\n    localStorage.setItem(\"end\", 10);\n    end = 10;\n  } else {\n    start = start.toString().replace(/\"/g, \"\");\n    end = end.toString().replace(/\"/g, \"\");\n  }\n  useEffect(() => {\n    let id = boardId;\n    if (id === undefined) {\n      id = 1;\n    }\n    localStorage.setItem(\"id\", id);\n    let diff = localStorage.getItem(\"id\");\n    diff = diff.toString().replace(/\"/g, \"\");\n    if (diff !== id) {\n      localStorage.setItem(\"start\", 0);\n      localStorage.setItem(\"end\", 10);\n    }\n\n    dispatch(listPosts({ id, start, end }));\n  }, [dispatch, boardId, end, start]);\n\n  return (\n    <PostList\n      postId={pageId}\n      loading={loading}\n      error={error}\n      posts={posts}\n      data={data}\n      post={post}\n      user={user}\n      postsdata={postsdata}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport qs from \"qs\";\nimport Button from \"../common/Button\";\nimport { useDispatch } from \"react-redux\";\nimport { listPosts } from \"../../modules/posts\";\nconst PaginationBlock = styled.div`\n   width: 320px;\n   margin: 0 auto;\n   display: flex;\n   justify-content: space-between;\n   margin-bottom: 5rem;\n   padding-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ page }) => {\n   const query = qs.stringify({ page });\n   let id = localStorage.getItem(\"id\");\n   id = id.toString().replace(/\"/g, \"\");\n   return `/board/${id}/${query}`;\n};\n\nconst Pagination = ({ page, lastPage }) => {\n   const dispatch = useDispatch();\n   let start = localStorage.getItem(\"start\");\n   let end = localStorage.getItem(\"end\");\n   start = start.toString().replace(/\"/g, \"\");\n   start = parseInt(start, 10);\n   end = end.toString().replace(/\"/g, \"\");\n   end = parseInt(end, 10);\n   let id = localStorage.getItem(\"id\");\n   id = id.toString().replace(/\"/g, \"\");\n   const onClickNext = () => {\n      start = start + 10;\n      end = end + 10;\n      localStorage.setItem(\"start\", start);\n      localStorage.setItem(\"end\", end);\n      dispatch(listPosts({ id, start, end }));\n   };\n   const onClickPrev = () => {\n      start = start - 10;\n      end = end - 10;\n      localStorage.setItem(\"start\", start);\n      localStorage.setItem(\"end\", end);\n      dispatch(listPosts({ id, start, end }));\n   };\n   return (\n      <PaginationBlock>\n         <Button\n            onClick={onClickPrev}\n            disabled={page === 1}\n            to={page === 1 ? undefined : buildLink({ page: page - 1 })}\n         >\n            이전\n         </Button>\n         <PageNumber>{page}</PageNumber>\n         <Button\n            onClick={onClickNext}\n            disabled={page === lastPage}\n            to={page === lastPage ? undefined : buildLink({ page: page + 1 })}\n         >\n            다음\n         </Button>\n      </PaginationBlock>\n   );\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport Pagination from \"../../components/posts/Pagination\";\nimport { useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nconst PaginationContainer = ({ match }) => {\n  const { posts, loading, boards } = useSelector(({ posts, loading }) => ({\n    boards: posts.boards,\n    posts: posts.posts,\n    loading: loading[\"posts/LIST_POSTS\"],\n  }));\n\n  let { pageId, boardId } = match.params;\n  // 기본 페이지일 경우 pageId 를 1로 설정\n\n  if (!pageId) {\n    pageId = 1;\n  }\n  if (!boardId) {\n    boardId = 1;\n  }\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n  if (!posts || loading) return null;\n\n  pageId = parseInt(pageId, 10);\n  boardId = parseInt(boardId, 10);\n  const new_board = boards.find((board) => board.pk === boardId);\n\n  const { post_length } = new_board;\n\n  let lastPage = post_length / 10 + 1;\n  lastPage = Math.floor(lastPage);\n\n  return (\n    <Pagination page={pageId} post_length={post_length} lastPage={lastPage} />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from \"react\";\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\nimport PostListContainer from \"../containers/posts/PostListContainer\";\nimport PaginationContainer from \"../containers/posts/PaginationContainer\";\n\nconst PostListPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostListContainer />\n      <PaginationContainer />\n    </>\n  );\n};\n\nexport default PostListPage;\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n// 페이지 레이아웃 담당\r\n\r\n// 화면 전체 채움\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  //flex로 내부 중앙 정렬\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n// 흰색 박스\r\nconst WitheBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WitheBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/board/1\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WitheBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport produce from \"immer\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as authAPI from \"../lib/api/auth\";\r\n\r\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\";\r\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  \"auth/REGISTER\"\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  \"auth/LOGIN\"\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  })\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(\r\n  REGISTER,\r\n  ({ username, nickname, email, password }) => ({\r\n    username,\r\n    nickname,\r\n    email,\r\n    password,\r\n  })\r\n);\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: \"\",\r\n    nickname: \"\",\r\n    password: \"\",\r\n    email: \"\",\r\n    passwordConfirm: \"\",\r\n  },\r\n  login: {\r\n    username: \"\",\r\n    password: \"\",\r\n  },\r\n  auth: null,\r\n  cookies: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      auth: null,\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default auth;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../common/Button\";\r\n// 회원가입 또는 로그인 폼\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n// 스타일링 된 input\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n// 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\n// 에러 메세지\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: \"로그인\",\r\n  register: \"회원가입\",\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        {type === \"register\" && (\r\n          <StyledInput\r\n            autoComplete=\"nickname\"\r\n            name=\"nickname\"\r\n            placeholder=\"닉네임\"\r\n            onChange={onChange}\r\n            value={form.nickname}\r\n          />\r\n        )}\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === \"register\" && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {type === \"register\" && (\r\n          <StyledInput\r\n            autoComplete=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일 입력\"\r\n            type=\"email\"\r\n            onChange={onChange}\r\n            value={form.email}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === \"login\" ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { changeField, initializeForm, login } from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport { check, tempSetUser } from \"../../modules/user\";\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    error: user.error,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: \"login\",\r\n        key: name,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"login\"));\r\n    return () => {\r\n      dispatch(initializeForm(\"login\"));\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log(\"오류 발생\");\r\n      console.log(authError);\r\n      setError(\"로그인 실패\");\r\n      return;\r\n    }\r\n    if (auth) {\r\n      const { username } = form;\r\n\r\n      console.log(\"로그인 성공\");\r\n      // dispatch(check(username));\r\n      dispatch(tempSetUser(username));\r\n    }\r\n  }, [auth, authError, dispatch, form]);\r\n\r\n  useEffect(() => {\r\n    dispatch(check());\r\n    if (user) {\r\n      try {\r\n        const _id = user.toString().replace(/\"/g, \"\");\r\n        localStorage.setItem(\"user\", JSON.stringify(_id));\r\n        console.log(\"set user ok\");\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n      history.push(\"/\");\r\n      console.log(\"user\", user);\r\n    }\r\n  }, [history, auth, form, user, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\n\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeField,\n  initializeForm,\n  login,\n  register,\n} from \"../../modules/auth\";\nimport AuthForm from \"../../components/auth/AuthForm\";\nimport { check } from \"../../modules/user\";\nimport { withRouter } from \"react-router-dom\";\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: \"register\",\n        key: name,\n        value,\n      })\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, nickname, password, passwordConfirm, email } = form;\n    // 하나라도 비어있다면\n    if ([username, nickname, password, passwordConfirm, email].includes(\"\")) {\n      setError(\"빈 칸을 모두 입력하세요.\");\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError(\"비밀번호가 일치하지 않습니다.\");\n      dispatch(changeField({ form: \"register\", key: \"password\", value: \"\" }));\n      dispatch(\n        changeField({ form: \"register\", key: \"passwordConfirm\", value: \"\" })\n      );\n      return;\n    }\n    dispatch(register({ username, nickname, email, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm(\"register\"));\n  }, [dispatch]);\n\n  // 회원가입 성공 / 실패 처리\n  useEffect(() => {\n    if (authError) {\n      console.log(\"authError is : \", authError);\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError(\"이미 존재하는 계정명입니다.\");\n        return;\n      }\n      // 기타 이유\n      setError(\"회원가입 실패\");\n      return;\n    }\n\n    if (auth) {\n      const { username, password } = form;\n      dispatch(login({ username, password }));\n      console.log(\"회원가입 성공\");\n      history.push(\"/\");\n      console.log(auth);\n    }\n  }, [auth, authError, dispatch, user, form, history]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    dispatch(check());\n    console.log(\"checking\");\n    if (user) {\n      try {\n        const _id = user.toString().replace(/\"/g, \"\");\n        console.log(\"myidis\", _id);\n        localStorage.setItem(\"user\", JSON.stringify(_id));\n      } catch (e) {\n        console.log(\"localStorage is not working\");\n      }\n      history.push(\"/\"); // 홈 화면으로 이동\n    }\n  }, [history, user, dispatch]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport Quill from \"quill\";\r\nimport \"quill/dist/quill.bubble.css\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  @media (max-width: 768px) {\r\n    font-size: 1.125rem;\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    margin-bottom: -5.5rem;\r\n    @media (max-width: 768px) {\r\n      font-size: 1rem;\r\n      padding-left: 0.5rem;\r\n      padding-top: 1rem;\r\n      z-index: 1;\r\n    }\r\n    line-height: 1.5;\r\n    border-bottom: 1px solid ${palette.gray[4]};\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, content, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: \"bubble\",\r\n      placeholder: \" 내용을 작성하세요...\",\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: \"1\" }, { header: \"2\" }],\r\n          [\"bold\", \"italic\", \"underline\", \"strike\"],\r\n          [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n          [\"blockquote\", \"code-block\", \"link\", \"image\"],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on(\"text-change\", (delta, oldDelta, source) => {\r\n      if (source === \"user\") {\r\n        onChangeField({ key: \"content\", value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = content;\r\n  }, [content]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: \"title\", value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"&nbsp;제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as api from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst INITIALIZE = \"write/INITIALIZE\"; // 모든 내용 초기화\nconst CHANGE_FIELD = \"write/CHANGE_FIELD\"; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes(\"write/WRITE_POST\"); // 포스트 작성\nconst SET_ORIGINAL_POST = \"write/SET_ORIGINAL_POST\";\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes(\"write/UPDATE_POST\"); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, pk, content }) => ({\n  title,\n  pk,\n  content,\n}));\nexport const setOriginalPost = createAction(\n  SET_ORIGINAL_POST,\n  ({ title, pk, content, originalPostId }) => ({\n    title,\n    pk,\n    content,\n    originalPostId,\n  })\n);\nexport const updatePost = createAction(UPDATE_POST, ({ pk, content }) => ({\n  pk,\n  content,\n}));\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, api.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, api.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: \"\",\n  pk: \"\",\n  content: \"\",\n  originalPostId: \"\",\n  post: null,\n  postError: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post, meta: response }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (\n      state,\n      { payload: { title, pk, content, originalPostId } }\n    ) => ({\n      ...state,\n      title,\n      pk,\n      content,\n      originalPostId,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState\n);\n\nexport default write;\n","import React, { useEffect, useCallback } from \"react\";\nimport Editor from \"../../components/write/Editor\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { changeField, initialize } from \"../../modules/write\";\n\nconst EditorContainer = ({ match }) => {\n  const dispatch = useDispatch();\n  const { title, content } = useSelector(({ write }) => ({\n    title: write.title,\n    content: write.content,\n  }));\n  const onChangeField = useCallback(\n    (payload) => dispatch(changeField(payload)),\n    [dispatch]\n  );\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    let post_pk = localStorage.getItem(\"postId\");\n\n    post_pk = match.params;\n    if (post_pk === undefined) post_pk = 1;\n\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch, match.params]);\n  return (\n    <Editor onChangeField={onChangeField} title={title} content={content} />\n  );\n};\n\nexport default withRouter(EditorContainer);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../common/Button\";\n\nconst WriteActionButtonsBlock = styled.div`\n   display: flex;\n   flex-direction: row-reverse;\n   margin-top: 1rem;\n   margin-bottom: 3rem;\n   white-space: nowrap;\n   button + button {\n      margin-right: 0.5rem;\n   }\n   :last-child {\n      padding-right: 1rem;\n   }\n`;\n\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\nconst StyledButton = styled(Button)`\n   height: 2.125rem;\n   & + & {\n      margin-left: 0.5rem;\n   }\n`;\n\nconst WriteActionButtons = ({\n   onCancel,\n   onPublish,\n   onUpdatePost,\n   originalPostId,\n   pk,\n}) => {\n   const onPublishPost = () => {\n      let post_pk = localStorage.getItem(\"id\");\n      let local_pk = post_pk.toString().replace(/\"/g, \"\");\n      onPublish(local_pk);\n   };\n   return (\n      <WriteActionButtonsBlock>\n         <StyledButton onClick={onCancel}>취소</StyledButton>\n         {!originalPostId ? (\n            <StyledButton cyan onClick={onPublishPost}>\n               포스트 등록\n            </StyledButton>\n         ) : (\n            <StyledButton cyan onClick={() => onUpdatePost({ pk })}>\n               포스트 수정\n            </StyledButton>\n         )}\n      </WriteActionButtonsBlock>\n   );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from \"react\";\nimport WriteActionButtons from \"../../components/write/WriteActionButtons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { writePost, updatePost } from \"../../modules/write\";\n\nconst WriteActionButtonsContainer = ({ history, match, location }) => {\n  const dispatch = useDispatch();\n  const { title, content, pk, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      pk: write.pk,\n      content: write.content,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    })\n  );\n\n  // 포스트 등록\n  const onPublish = (pk) => {\n    if (title === \"\") {\n      alert(\"빈 제목은 입력할 수 없습니다!\");\n      return;\n    }\n    if (content === \"\") {\n      alert(\"내용이 비어 있습니다!\");\n      return;\n    }\n    localStorage.setItem(\"write_pk\", pk);\n    dispatch(\n      writePost({\n        title,\n        pk,\n        content,\n      })\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      let page_pk = localStorage.getItem(\"write_pk\");\n      const _id = page_pk.toString().replace(/\"/g, \"\");\n      history.push(`/board/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  const onUpdatePost = ({ pk }) => {\n    dispatch(updatePost({ pk, content }));\n  };\n  return (\n    <WriteActionButtons\n      pk={pk}\n      originalPostId={originalPostId}\n      onPublish={onPublish}\n      onCancel={onCancel}\n      onUpdatePost={onUpdatePost}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from \"react\";\r\nimport Responsive from \"../components/common/Responsive\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport EditorContainer from \"../containers/write/EditorContainer\";\r\nimport WriteActionButtonsContainer from \"../containers/write/WriteActionButtonsContainer\";\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <Responsive>\r\n        <EditorContainer />\r\n        <WriteActionButtonsContainer />\r\n      </Responsive>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as postsAPI from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst [\n  READ_COMMENT,\n  READ_COMMENT_SUCCESS,\n  READ_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/READ_COMMENT\");\nconst [\n  DELETE_COMMENT,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/DELETE_COMMENT\");\nconst UNLOAD_COMMENT = \"post/UNLOAD_COMMENT\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nconst [\n  READ_RECOMMENT,\n  READ_RECOMMENT_SUUCCESS,\n  READ_RECOMMENT_FAILURE,\n] = createRequestActionTypes(\"post/READ_RECOMMENT\");\n\nconst [\n  CHANGE_COMMENT,\n  CHANGE_COMMENT_SUUCCESS,\n  CHANGE_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/CHANGE_COMMENT\");\n\nconst [\n  CHANGE_RECOMMENT,\n  CHANGE_RECOMMENT_SUUCCESS,\n  CHANGE_RECOMMENT_FAILURE,\n] = createRequestActionTypes(\"post/CHANGE_RECOMMENT\");\n\nconst CLEAR_RECOMMENTS = \"post/CLEAR_RECOMMENTS\";\n\nexport const deleteComment = createAction(DELETE_COMMENT, ({ pk }) => ({ pk }));\nexport const readComment = createAction(READ_COMMENT, (id) => id);\nexport const unloadComment = createAction(UNLOAD_COMMENT);\nexport const readRecomment = createAction(READ_RECOMMENT, (id) => id);\nexport const changeComment = createAction(\n  CHANGE_COMMENT,\n  ({ pk, content }) => ({ pk, content })\n);\nexport const changeReComment = createAction(\n  CHANGE_RECOMMENT,\n  ({ pk, content }) => ({ pk, content })\n);\nexport const clearRecomments = createAction(CLEAR_RECOMMENTS);\n\nconst readCommentSaga = createRequestSaga(READ_COMMENT, postsAPI.readComments);\nconst deleteCommentSaga = createRequestSaga(\n  DELETE_COMMENT,\n  postsAPI.deleteComment\n);\nconst readRecommentSaga = createRequestSaga(\n  READ_RECOMMENT,\n  postsAPI.readRecoment\n);\nconst changeCommentSaga = createRequestSaga(\n  CHANGE_COMMENT,\n  postsAPI.changeComment\n);\nconst changeReCommentSaga = createRequestSaga(\n  CHANGE_RECOMMENT,\n  postsAPI.changeReComment\n);\n\nexport function* commentSaga() {\n  yield takeLatest(READ_COMMENT, readCommentSaga);\n  yield takeLatest(DELETE_COMMENT, deleteCommentSaga);\n  yield takeLatest(READ_RECOMMENT, readRecommentSaga);\n  yield takeLatest(CHANGE_COMMENT, changeCommentSaga);\n  yield takeLatest(CHANGE_RECOMMENT, changeReCommentSaga);\n}\n\nconst initialState = {\n  comment: null,\n  recomment: null,\n  data: [],\n  recommentdata: [],\n  recommentList: [],\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n      data: comment.data,\n      comment,\n    }),\n    [READ_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [DELETE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n      comment,\n    }),\n    [DELETE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CLEAR_RECOMMENTS]: (state, { payload: error }) => ({\n      ...state,\n      recommentList: [],\n    }),\n    [READ_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\n      ...state,\n      recommentdata: recomment.data,\n      recommentList: state.recommentList.concat(recomment.data),\n      recomment,\n    }),\n    [READ_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CHANGE_COMMENT_SUUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n\n      comment,\n    }),\n    [CHANGE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CHANGE_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\n      ...state,\n\n      recomment,\n    }),\n    [CHANGE_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_COMMENT]: () => initialState,\n  },\n  initialState\n);\n\nexport default post;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { deleteRecomment } from \"../../lib/api/posts\";\nimport palatte from \"../../lib/styles/palette\";\n\nconst ReCommentBlock = styled.span`\n  display: inline-flex;\n  width: 80%;\n\n  white-space: normal;\n  hr {\n    width: 90%;\n  }\n  @media (max-width: 768px) {\n    width: 56%;\n  }\n  word-break: break-all;\n`;\nconst Blank = styled.div`\n  display: inline-flex;\n  width: 7%;\n  @media (max-width: 768px) {\n    width: 3%;\n  }\n`;\nconst ActionButton = styled.button`\n  display: inline-flex;\n  @media (max-width: 768px) {\n    width: 20%;\n    font-size: 0.765rem;\n    padding: 0.2rem 0;\n  }\n  width: 6%;\n  /* padding: 0.25rem 0.5rem; */\n  border-radius: 4px;\n  justify-content: center;\n  padding: 0.25rem 0.5rem;\n  box-sizing: border-box;\n  color: ${palatte.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palatte.gray[1]};\n    color: ${palatte.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n    @media (max-width: 768px) {\n      margin-left: 0.05rem;\n    }\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  /* margin-bottom: 1.5rem; */\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  padding-bottom: -1rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst PostRecommentItem = ({\n  recomment,\n  onRecomment,\n  user,\n  onChangeReComment,\n}) => {\n  const { reply } = recomment.fields;\n  // username 불러오기\n  const { username } = recomment.fields.author.fields;\n  const { pk } = recomment;\n  const [text, setText] = useState(\"\");\n  const [edit, setEdit] = useState(false);\n  const [out, setOut] = useState(false);\n\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const onSumbit = (e) => {\n    e.preventDefault();\n    // 내용이 비어있을 경우 경고 표시\n    if (text === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    const content = text;\n    const recomment_pk = reply;\n    onChangeReComment({ pk, content, recomment_pk });\n    setText(\"\");\n    setEdit(!edit);\n  };\n\n  // 자신이 쓴 대댓글인지 확인\n  const ownRecomment = user === username;\n\n  const { writeAt, content } = recomment.fields;\n  const postDate = writeAt.split(\"T\");\n  // 대댓글 삭제\n  const onRemove = async () => {\n    try {\n      deleteRecomment({ pk });\n      setOut(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <>\n      {out || (\n        <>\n          {/* 댓글 정보 */}\n          <div>\n            Date: {postDate[0]} username: {username}\n          </div>\n          <hr />\n          {/* 댓글 수정 부 form 으로 구현  */}\n          {edit && (\n            <form onSubmit={onSumbit}>\n              <Input value={text} onChange={onChange}></Input>\n              <>\n                <ActionButton type={\"submit\"}>등록</ActionButton>\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\n              </>\n            </form>\n          )}\n          {edit || (\n            <>\n              <ReCommentBlock className=\"content\">{content}</ReCommentBlock>\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\n              {ownRecomment ? (\n                <>\n                  <Blank>&nbsp;</Blank>\n                  <ActionButton\n                    onClick={() => {\n                      setEdit(!edit);\n                      setText(content);\n                    }}\n                  >\n                    수정\n                  </ActionButton>\n                  <ActionButton onClick={onRemove}>삭제</ActionButton>\n                </>\n              ) : (\n                <div>&nbsp;&nbsp;</div>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PostRecommentItem;\n","import React, { useState } from \"react\";\nimport { AiOutlinePlusSquare, AiOutlineMinusSquare } from \"react-icons/ai\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport PostRecommentItem from \"./PostRecommentItem\";\nconst ToggleButton = styled.div`\n  display: block;\n  align-items: center;\n\n  font-weight: bold;\n  font-size: 1.5rem;\n  cursor: pointer;\n  box-sizing: border-box;\n  position: relative;\n  z-index: 2;\n  span {\n    position: absolute;\n    top: 0;\n    left: 1.7rem;\n    font-size: 1rem;\n    text-align: center;\n    margin-bottom: 2px;\n  }\n  p {\n    position: absolute;\n    top: -2rem;\n    left: 0;\n    width: 100%;\n    display: hidden;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1rem;\n  @media (max-width: 768px) {\n    margin-bottom: 0.5rem;\n  }\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  margin-bottom: 1rem;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n  float: right;\n`;\nconst Button2 = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  width: 100%;\n  color: white;\n  margin-bottom: 2rem;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n`;\nconst RecommentBlock = styled.div`\n  border: 1px solid rgba(0, 0, 0, 0.02);\n  background-color: rgba(0, 0, 0, 0.016);\n  padding: 1.5rem;\n  border-radius: 10px;\n`;\n\nconst PostCommentToggle = ({\n  comment,\n  onRecomment,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  onChangeReComment,\n  user,\n}) => {\n  const { pk } = comment;\n  const { answer_reply_length } = comment;\n  let recommnet_datas;\n  if (answer_reply_length !== 0) {\n    recommnet_datas = comment.recomment_data;\n  }\n\n  // const { id } = comment.recomments;\n  const [set, onSet] = useState(false);\n  const [setRe, onSetRe] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  const onSubmitRe = (e) => {\n    e.preventDefault();\n    const content = text;\n    onWriteRecomment({ pk, content });\n    setText(\"\");\n  };\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  const onClick = () => {\n    onSet(!set);\n    let id = pk;\n    onClickRe(id);\n  };\n  const onClick2 = () => {\n    onSetRe(!setRe);\n  };\n\n  const onRead = () => {\n    let id = pk;\n    onReadComment({ id });\n  };\n\n  return (\n    <>\n      <>\n        <ToggleButton>\n          {set ? (\n            <AiOutlineMinusSquare\n              onClick={onClick}\n              color=\"#22b8cf\"\n            ></AiOutlineMinusSquare>\n          ) : (\n            <AiOutlinePlusSquare\n              onClick={onClick}\n              color=\"#22b8cf\"\n            ></AiOutlinePlusSquare>\n          )}\n\n          {set ? (\n            <span onClick={onClick}>숨기기</span>\n          ) : (\n            <div>\n              {answer_reply_length === 0 ? (\n                <span onClick={onClick}>답글 달기</span>\n              ) : (\n                <span onClick={onClick}>{answer_reply_length}개의 댓글</span>\n              )}\n            </div>\n          )}\n        </ToggleButton>\n      </>\n      <br />\n      {set && answer_reply_length === 0 ? (\n        <form onSubmit={onSubmitRe}>\n          <Input\n            type=\"text\"\n            value={text}\n            placeholder=\"답글을 입력하세요\"\n            onChange={onChange}\n          ></Input>\n          <Button type={\"submit\"} onClick={onRead}>\n            등록\n          </Button>\n          <br />\n          <br />\n        </form>\n      ) : null}\n      {set && answer_reply_length !== 0 && (\n        <>\n          <RecommentBlock>\n            {recommnet_datas.map((recomment) => (\n              <PostRecommentItem\n                key={recomment.pk}\n                recomment={recomment}\n                user={user}\n                onChangeReComment={onChangeReComment}\n              ></PostRecommentItem>\n            ))}\n          </RecommentBlock>\n          {user && (\n            <Button2 onClick={onClick2}>\n              {setRe ? \"숨기기\" : \"답글달기\"}\n            </Button2>\n          )}\n          {setRe && (\n            <form onSubmit={onSubmitRe}>\n              <Input\n                type=\"text\"\n                value={text}\n                placeholder=\"답글을 입력하세요\"\n                onChange={onChange}\n              ></Input>\n              <Button type={\"submit\"}>등록</Button>\n              <br />\n            </form>\n          )}\n        </>\n      )}\n    </>\n  );\n};\nexport default PostCommentToggle;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport palatte from \"../../lib/styles/palette\";\nimport PostCommentToggle from \"./PostCommentToggle\";\n// import { deleteComment } from \"../../modules/comment\";\nimport { deleteComment } from \"../../lib/api/posts\";\nconst CommentBlock = styled.span`\n  display: inline-flex;\n  width: 80%;\n  margin-bottom: 1rem;\n  @media (max-width: 768px) {\n    width: 70%;\n  }\n  word-break: break-all;\n`;\nconst Blank = styled.div`\n  display: inline-flex;\n  width: 9%;\n  @media (max-width: 768px) {\n    width: 3%;\n  }\n`;\nconst ActionButton = styled.button`\n  display: inline-flex;\n  @media (max-width: 768px) {\n    width: 13%;\n    font-size: 0.875rem;\n  }\n  width: 5%;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  box-sizing: border-box;\n  color: ${palatte.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palatte.gray[1]};\n    color: ${palatte.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n    @media (max-width: 768px) {\n      margin-left: 0.1rem;\n    }\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  word-break: break-all;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst PostCommentItem = ({\n  comment,\n  user,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n\n  ownComment,\n  onChangeComment,\n  onChangeReComment,\n  recommentList,\n}) => {\n  const [text, setText] = useState(\"\");\n  const [edit, setEdit] = useState(false);\n  const [out, setOut] = useState(false);\n  const { writeAt, content } = comment.fields;\n  const { username } = comment.fields.author.fields;\n  const { pk } = comment;\n\n\n  //  const { content } = recommentList.fields;\n\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  const onRemoveComment = async () => {\n    try {\n      await deleteComment({ pk });\n      setOut(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const onChangeComments = () => {\n    const content = text;\n    onChangeComment({ pk, content });\n  };\n  const onSumbit = (e) => {\n    e.preventDefault();\n    // 내용이 비어있을 경우 경고 표시\n    if (text === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    onChangeComments();\n    setText(\"\");\n    setEdit(!edit);\n  };\n\n  const ownThing = ownComment(username);\n  const postDate = writeAt.split(\"T\");\n  return (\n    <>\n      {out || (\n        <>\n          {/* 댓글 정보 */}\n          <div>\n            Date: {postDate[0]} username: {username}\n          </div>\n          <hr />\n          {/* 댓글 수정 부 form 으로 구현  */}\n          {edit && (\n            <form onSubmit={onSumbit}>\n              <Input value={text} onChange={onChange}></Input>\n              <>\n                <ActionButton type={\"submit\"}>등록</ActionButton>\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\n              </>\n            </form>\n          )}\n          {edit || (\n            <>\n              <CommentBlock className=\"box\">{content}</CommentBlock>\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\n              {ownThing ? (\n                <>\n                  <Blank>&nbsp;</Blank>\n                  <ActionButton\n                    onClick={() => {\n                      setEdit(!edit);\n                      setText(content);\n                    }}\n                  >\n                    수정\n                  </ActionButton>\n                  <ActionButton onClick={onRemoveComment}>삭제</ActionButton>\n                </>\n              ) : (\n                <div>&nbsp;&nbsp;</div>\n              )}\n            </>\n          )}\n\n          <PostCommentToggle\n            comment={comment}\n            onClickRe={onClickRe}\n            recommentdata={recommentdata}\n            onWriteRecomment={onWriteRecomment}\n            onReadComment={onReadComment}\n            user={user}\n            recommentList={recommentList}\n            onChangeReComment={onChangeReComment}\n          />\n          <br />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(PostCommentItem);\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PostCommentItem from \"./PostCommentItem\";\nimport palette from \"../../lib/styles/palette\";\nimport Responsive from \"../common/Responsive\";\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n  float: right;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\n\nconst PostCommentList = ({\n  user,\n  comment,\n  number,\n  data,\n  onPublish,\n  onRemove,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  ownComment,\n  onChangeComment,\n  onChangeReComment,\n}) => {\n  const [content, setText] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (content === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    onPublish({ content });\n    setText(\"\");\n  };\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n\n\n  return (\n    <PostViewerBlock>\n      <PostHead>\n        <form onSubmit={onSubmit}>\n          <Input\n            type=\"text\"\n            value={content}\n            placeholder=\"댓글을 입력하세요\"\n            onChange={onChange}\n          />\n          <Button cyan type={\"submit\"}>\n            등록\n          </Button>\n        </form>\n        <br />\n        <br />\n\n        <>\n          {data.map((comment) => (\n            <PostCommentItem\n              key={comment.pk}\n              comment={comment}\n              onRemove={onRemove}\n              onClickRe={onClickRe}\n              recommentdata={recommentdata}\n              onWriteRecomment={onWriteRecomment}\n              onReadComment={onReadComment}\n              ownComment={ownComment}\n              user={user}\n              onChangeComment={onChangeComment}\n              onChangeReComment={onChangeReComment}\n            ></PostCommentItem>\n          ))}\n        </>\n      </PostHead>\n    </PostViewerBlock>\n  );\n};\n\nexport default React.memo(PostCommentList);\n","import { createAction, handleActions } from 'redux-actions';\n\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'commentwrite/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'commentwrite/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_COMMENT,\n  WRITE_COMMENT_SUCCESS,\n  WRITE_COMMENT_FAILURE,\n] = createRequestActionTypes('commentwrite/WRITE_COMMENT'); // 댓글 작성\nconst [\n  WRITE_RECOMMENT,\n  WRITE_RECOMMENT_SUCCESS,\n  WRITE_RECOMMENT_FAILURE,\n] = createRequestActionTypes('commentwrite/WRITE_RECOMMENT'); // 댓글 작성\n// const REMOVE = 'comment/REMOVE';\nconst SET_ORIGINAL_COMMENT = 'commentwrite/SET_ORIGINAL_COMMENT';\n// const TOGGLE = 'comment/TOGGLE';\n// const [\n//   UPDATE_COMMENT,\n//   UPDATE_COMMENT_SUCCESS,\n//   UPDATE_COMMENT_FAILURE,\n// ] = createRequestActionTypes('write/UPDATE_COMMENT'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writeComment = createAction(WRITE_COMMENT, ({ pk, content }) => ({\n  pk,\n  content,\n}));\nexport const writeReComment = createAction(\n  WRITE_RECOMMENT,\n  ({ pk, content }) => ({\n    pk,\n    content,\n  }),\n);\nexport const setOriginalComment = createAction(\n  SET_ORIGINAL_COMMENT,\n  (post) => post,\n);\n// export const updateComment = createAction(UPDATE_COMMENT, ({ id, text }) => ({\n//   id,\n//   text,\n// }));\n\nconst writeCommentSaga = createRequestSaga(\n  WRITE_COMMENT,\n  postsAPI.writeCommnet,\n);\n// const updatePostSaga = createRequestSaga(UPDATE_COMMENT, postsAPI);\nconst wrtieRecommentSaga = createRequestSaga(\n  WRITE_RECOMMENT,\n  postsAPI.writeReCommnet,\n);\nexport function* commentWriteSaga() {\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\n  yield takeLatest(WRITE_RECOMMENT, wrtieRecommentSaga);\n  // yield takeLatest(UPDATE_COMMENT, updatePostSaga);\n}\n\nconst initialState = {\n  pk: 3,\n  content: '123',\n  post: null,\n  selectComment: null,\n  commentError: null,\n};\n\nconst commentwrite = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_COMMENT]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_COMMENT_FAILURE]: (state, { payload: commentError }) => ({\n      ...state,\n      commentError,\n    }),\n    [WRITE_RECOMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_RECOMMENT_FAILURE]: (state, { payload: commentError }) => ({\n      ...state,\n      commentError,\n    }),\n    // [SET_ORIGINAL_COMMENT]: (state, { payload: post }) => ({\n    //   ...state,\n    //   title: post.title,\n    //   body: post.body,\n    //   tags: post.tags,\n    //   originalPostId: post._id,\n    // }),\n    // [UPDATE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n    //   ...state,\n    //   comment,\n    // }),\n    // [UPDATE_COMMENT_FAILURE]: (state, { payload: postError }) => ({\n    //   ...state,\n    //   postError,\n    // }),\n  },\n  initialState,\n);\n\nexport default commentwrite;\n","import React, { useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  deleteComment,\n  readComment,\n  unloadComment,\n  readRecomment,\n  changeComment,\n  changeReComment,\n} from \"../../modules/comment\";\nimport PostCommentList from \"../../components/post/PostCommentList\";\nimport { withRouter } from \"react-router-dom\";\nimport {\n  initialize,\n  writeComment,\n  writeReComment,\n} from \"../../modules/commentwrite\";\n\nconst PostCommentContainer = ({ match }) => {\n  const { postId } = match.params;\n  const {\n    comment,\n    data,\n    user,\n    content,\n    pk,\n    recommentdata,\n    recommentList,\n  } = useSelector(({ comment, user, commentwrite }) => ({\n    comment: comment.comment,\n    data: comment.data,\n    user: user.user,\n    content: commentwrite.content,\n    pk: postId,\n    recommentdata: comment.recommentdata,\n    recommentList: comment.recommentList,\n  }));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    dispatch(initialize());\n    // 댓글 읽어오기\n    dispatch(readComment(postId));\n    return () => {\n      // dispatch(clearRecomments());\n      dispatch(initialize());\n      dispatch(unloadComment());\n    };\n  }, [dispatch, pk, content, postId]);\n  // 댓글 읽어오기\n  const onReadComment = useCallback(\n    ({ id }) => {\n      dispatch(readComment(id));\n      // dispatch(readRecomment(id));\n      // //여기서 해주면\n      // dispatch(readRecomment(id));\n    },\n    [dispatch]\n  );\n  // 대댓글 읽어오기\n  const onClickRe = useCallback(\n    (id) => {\n      dispatch(readRecomment(id));\n      // dispatch(readRecomment(id));\n    },\n    [dispatch]\n  );\n  // 댓글 쓰기\n  const onPublish = useCallback(\n    ({ content }) => {\n      dispatch(writeComment({ pk, content }));\n      //댓글 읽어오기\n      const id = pk;\n      dispatch(readComment(id));\n      dispatch(readComment(id));\n      dispatch(readComment(id));\n    },\n    [dispatch, pk]\n  );\n  // 대댓글 쓰기\n  const onWriteRecomment = useCallback(\n    ({ pk, content }) => {\n      dispatch(writeReComment({ pk, content }));\n      const id = pk;\n      dispatch(readComment(postId));\n      dispatch(readRecomment(id));\n      dispatch(readRecomment(id));\n      dispatch(readRecomment(id));\n    },\n    [dispatch, postId]\n  );\n  // // 댓글 삭제하기\n  // let is = 'hihi';\n  const onRemove = useCallback(\n    ({ pk }) => {\n      dispatch(deleteComment({ pk }));\n    },\n    [dispatch]\n  );\n  // 작성자 게시물 확인하기\n  const ownComment = useCallback(\n    (postId) => {\n      if (postId === user) {\n        return true;\n      }\n    },\n    [user]\n  );\n  // 댓글 수정하기\n  const onChangeComment = useCallback(\n    ({ pk, content }) => {\n      dispatch(changeComment({ pk, content }));\n      dispatch(readComment(postId));\n      dispatch(readComment(postId));\n    },\n    [dispatch, postId]\n  );\n  // 대댓글 수정하기\n  const onChangeReComment = useCallback(\n    ({ pk, content, recomment_pk }) => {\n      dispatch(changeReComment({ pk, content }));\n      dispatch(readRecomment(recomment_pk));\n      dispatch(readRecomment(recomment_pk));\n    },\n    [dispatch]\n  );\n  let number = 0;\n  return (\n    <PostCommentList\n      comment={comment}\n      onPublish={onPublish}\n      onRemove={onRemove}\n      postId={postId}\n      number={number}\n      data={data}\n      user={user}\n      onReadComment={onReadComment}\n      recommentdata={recommentdata}\n      onWriteRecomment={onWriteRecomment}\n      onClickRe={onClickRe}\n      ownComment={ownComment}\n      onChangeComment={onChangeComment}\n      onChangeReComment={onChangeReComment}\n      recommentList={recommentList}\n    >\n      {(number += 1)}\n    </PostCommentList>\n  );\n};\n\nexport default withRouter(PostCommentContainer);\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_POST\");\r\nconst UNLOAD_POST = \"post/UNLOAD_POST\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  data: null,\r\n  error: null,\r\n  _postId: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      data: post.data,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default post;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport Responsive from \"../common/Responsive\";\nimport { withRouter } from \"react-router-dom\";\n\nconst PostViewerBlock = styled(Responsive)`\n   margin-top: 4rem;\n`;\nconst PostHead = styled.div`\n   border-bottom: 1px solid ${palette.gray[2]};\n   padding-bottom: 3rem;\n   margin-bottom: 3rem;\n   @media (max-width: 768px) {\n      margin-bottom: 2rem;\n      padding-bottom: 2rem;\n   }\n   h1 {\n      @media (max-width: 768px) {\n         margin-left: 1rem;\n         font-size: 2rem;\n         padding-top: 0;\n      }\n\n      padding-top: 2rem;\n      font-size: 3rem;\n      line-height: 1.5;\n      margin: 0;\n   }\n   span {\n      font-size: 0.8rem;\n   }\n`;\n\nconst SubInfoinPost = styled.div`\n   margin-top: 2rem;\n   display: flex;\n   margin-left: 1rem;\n   font-size: 1rem;\n   box-sizing: border-box;\n   span + span {\n      margin-left: 0.25rem;\n      margin-right: 0.25rem;\n   }\n   span.name {\n      margin-left: -0.8rem;\n      @media (max-width: 768px) {\n         margin-left: 0;\n      }\n      font-weight: bold;\n   }\n   span.content {\n      margin-left: 0;\n      font-weight: normal;\n   }\n`;\n\nconst PostContent = styled.div`\n   font-size: 1.3125rem;\n   @media (max-width: 768px) {\n      margin-top: -1rem;\n      width: 100%;\n      margin-left: 1rem;\n      font-size: 1rem;\n   }\n   color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({\n   error,\n   loading,\n   actionButtons,\n   postId,\n   postsdata,\n   ownPost,\n}) => {\n   // const [set, onSet] = useState(false);\n   // 에러 발생 시\n   if (error) {\n      if (error.response && error.response.status === 404) {\n         return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\n      }\n      console.log(error);\n      return <PostViewerBlock>오류 발생!</PostViewerBlock>;\n   }\n\n   // 로딩중이거나, 아직 포스트 데이터가 없을 시\n   if (loading) {\n      return null;\n   }\n\n   const _postId = parseInt(postId, 10);\n   // postsdata 배열에서 주소와 일치하는 post 찾기\n   let _data =\n      postsdata &&\n      postsdata.find((x) => {\n         return x.pk === _postId;\n      });\n   // redirecting(새로고침)에서 데이터 사라짐 방지용 localStorage 저장\n   if (_data !== null) {\n      localStorage.setItem(\"data\", JSON.stringify(_data));\n   } else {\n      _data = JSON.parse(localStorage.getItem(\"data\"));\n   }\n   const { title, content, writeAt } = _data.fields;\n   let postDate = writeAt.split(\"T\");\n   ownPost(_data.fields.author.fields.username);\n   let post_id = _data.fields.author.fields.username;\n\n   return (\n      <PostViewerBlock>\n         <PostHead>\n            <h1>{title}</h1>\n            <SubInfoinPost>\n               <span className=\"name\">{post_id}</span>\n               <span>·</span>\n               <span className=\"content\">{postDate[0]}</span>\n            </SubInfoinPost>\n         </PostHead>\n\n         {actionButtons}\n         <PostContent dangerouslySetInnerHTML={{ __html: content }} />\n\n         <PostHead />\n      </PostViewerBlock>\n   );\n};\n\nexport default withRouter(PostViewer);\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst FullScreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancleText = '취소',\r\n  onConfirm,\r\n  onCancle,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <FullScreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancle}>{cancleText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </FullScreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancle }) => {\r\n  return <AskModal\r\n    visible={visible}\r\n    title=\"포스트 삭제\"\r\n    description=\"포스트를 정말 삭제하시겠습니까?\"\r\n    confirmText=\"삭제\"\r\n    onConfirm={onConfirm}\r\n    onCancle={onCancle}\r\n  ></AskModal>;\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport AskRemoveModal from \"./AskRemoveModal\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst PostActionButtonBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\nconst PostActionButtons = ({ onEdit, onRemove, check, postsdata, match }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancle = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n  const { postId } = match.params;\r\n\r\n  let new_data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === parseInt(postId, 10);\r\n    });\r\n  if (postsdata !== null) {\r\n    localStorage.setItem(\"postdata\", JSON.stringify(new_data));\r\n  } else {\r\n    new_data = JSON.parse(localStorage.getItem(\"postdata\"));\r\n  }\r\n\r\n  const { title, content } = new_data.fields;\r\n  const { pk } = new_data;\r\n  const { username } = new_data.fields.author.fields;\r\n  const originalPostId = username;\r\n\r\n  const onEditThing = () => {\r\n    onEdit({ title, pk, content, originalPostId });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {check && (\r\n        <>\r\n          <PostActionButtonBlock>\r\n            <ActionButton onClick={onEditThing}>수정</ActionButton>\r\n            <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n          </PostActionButtonBlock>\r\n          <AskRemoveModal\r\n            visible={modal}\r\n            onConfirm={onConfirm}\r\n            onCancle={onCancle}\r\n          ></AskRemoveModal>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostActionButtons);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { unloadPost } from \"../../modules/post\";\r\nimport PostViewer from \"../../components/post/PostViewer\";\r\nimport PostActionButtons from \"../../components/post/PostActionButtons\";\r\nimport { setOriginalPost } from \"../../modules/write\";\r\nimport { deletePost } from \"../../lib/api/posts\";\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const [check, onCheck] = useState(false);\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const {\r\n    post,\r\n    error,\r\n    loading,\r\n    user,\r\n    data,\r\n    _postId,\r\n\r\n    postsdata,\r\n  } = useSelector(({ post, loading, user, posts, write }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading[\"post/READ_POST\"],\r\n    user: user.user,\r\n    data: post.data,\r\n    _postId: post._postId,\r\n    title: write.title,\r\n    pk: write.pk,\r\n    content: write.content,\r\n    originalPostId: write.originalPostId,\r\n    postsdata: posts.postsdata,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, _postId]);\r\n\r\n  const onEdit = ({ title, pk, content, originalPostId }) => {\r\n    dispatch(setOriginalPost({ title, pk, content, originalPostId }));\r\n    history.push(\"/write\");\r\n  };\r\n  // 게시물 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      let pk = postId;\r\n      await deletePost({ pk });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  // 수정 삭제 (id 확인)\r\n  const ownPost = (PostId) => {\r\n    if (PostId === user) {\r\n      onCheck(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostViewer\r\n        post={post}\r\n        postsdata={postsdata}\r\n        loading={loading}\r\n        error={error}\r\n        data={data}\r\n        postId={postId}\r\n        ownPost={ownPost}\r\n        actionButtons={\r\n          <PostActionButtons\r\n            postsdata={postsdata}\r\n            onEdit={onEdit}\r\n            onRemove={onRemove}\r\n            check={check}\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostCommentContainer from \"../containers/post/PostCommentContainer\";\r\n\r\nimport PostViewerContainer from \"../containers/post/PostViewerContainer\";\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n      <PostCommentContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport PostListPage from \"./pages/PostListPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport WritePage from \"./pages/WritePage\";\nimport PostPage from \"./pages/PostPage\";\nimport { Helmet } from \"react-helmet-async\";\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n      <Route\n        component={PostListPage}\n        path={[\"/board/:postId\", \"/board\", \"/\", \"/board/:boardId/page=:pageId\"]}\n        exact\n      />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/board/post/:postId\" />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport loading from './loading';\r\nimport auth, { authSaga } from './auth';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nimport comment, { commentSaga } from './comment';\r\nimport commentwrite, { commentWriteSaga } from './commentwrite';\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n  comment,\r\n  commentwrite,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    authSaga(),\r\n    userSaga(),\r\n    writeSaga(),\r\n    postSaga(),\r\n    postsSaga(),\r\n\r\n    commentSaga(),\r\n    commentWriteSaga(),\r\n  ]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleWare from \"redux-saga\";\nimport rootReducer, { rootSaga } from \"./modules\";\nimport { tempSetUser } from \"./modules/user\";\nimport { HelmetProvider } from \"react-helmet-async\";\nconst sagaMiddleware = createSagaMiddleWare();\nconst store = createStore(\n   rootReducer,\n   composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\n// local Stroage에 저장된 user 불러와 \"\" 제거\nfunction loadUser() {\n   try {\n      const user = localStorage.getItem(\"user\");\n      if (!user) return;\n      console.log(\"localuser is : \", user);\n      const _id = user.toString().replace(/\"/g, \"\");\n      store.dispatch(tempSetUser(_id));\n   } catch (e) {\n      console.log(\"Storage is not working\");\n   }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store}>\n         <HashRouter>\n            <HelmetProvider>\n               <App />\n            </HelmetProvider>\n         </HashRouter>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}