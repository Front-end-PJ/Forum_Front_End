{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","components/common/SideArea.js","components/common/Side.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/posts.js","modules/posts.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","components/posts/PostList.js","modules/post.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/comment.js","components/post/PostRecommentItem.js","components/post/PostCommentToggle.js","components/post/PostCommentItem.js","components/post/PostCommentList.js","modules/commentwrite.js","containers/post/PostCommentContainer.js","components/common/SubInfo.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","MenuList","BoardList","Header","user","onLogout","boards","boards_data","localStorage","setItem","JSON","stringify","parse","getItem","console","log","className","class","map","board","pk","fields","name","onClick","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","defaults","baseURL","withCredentials","deleteComment","queryString","qs","delete","deleteRecomment","deletePost","readPost","id","get","postsSaga","READ_BOAD","READ_BOAD_SUCCESS","READ_BOAD_FAILURE","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","TOGGLE_MENU","toggleMenu","readBoard","listPosts","listPostsSaga","postsAPI","readBoardSaga","posts","takeLatest","postsdata","lastPage","parseInt","headers","toggle","logout","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","checkFailureSaga","removeItem","e","authAPI","checkError","HeaderContainer","useSelector","dispatch","useDispatch","useEffect","PostListBlock","WritePostButtonWrapper","BoardItemBlock","PostItemBlock","PostItem","post","reply_length","username","author","title","postDate","writeAt","split","withRouter","showWriteButton","postId","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","unloadPost","readPostSaga","initialState","_postId","match","history","params","undefined","PaginationBlock","PageNumber","buildLink","tag","page","query","Pagination","disabled","location","search","ignoreQueryPrefix","PostListPage","AuthTemplateBlock","WitheBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","email","password","login","registerSaga","loginSaga","passwordConfirm","auth","cookies","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ErrorMessage","ButtonWithMarginTop","textMap","AuthForm","onChange","onSubmit","text","autoComplete","placeholder","useState","setError","push","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","content","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","originalPostId","updatePost","writePostSaga","updatePostSaga","postError","write","EditorContainer","useCallback","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","onUpdatePost","tags","_id","goBack","WritePage","commentSaga","READ_COMMENT","READ_COMMENT_SUCCESS","READ_COMMENT_FAILURE","DELETE_COMMENT","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","UNLOAD_COMMENT","READ_RECOMMENT","READ_RECOMMENT_SUUCCESS","READ_RECOMMENT_FAILURE","CHANGE_COMMENT","CHANGE_COMMENT_SUUCCESS","CHANGE_COMMENT_FAILURE","CHANGE_RECOMMENT","CHANGE_RECOMMENT_SUUCCESS","CHANGE_RECOMMENT_FAILURE","readComment","unloadComment","readRecomment","changeComment","changeReComment","readCommentSaga","deleteCommentSaga","readRecommentSaga","changeCommentSaga","changeReCommentSaga","qeryString","comment","recomment","recommentdata","ReCommentBlock","span","ActionButton","Input","PostRecommentItem","onRecomment","onChangeReComment","reply","setText","edit","setEdit","out","setOut","ownRecomment","onRemove","a","recomment_pk","alert","ToggleButton","Button2","RecommentBlock","PostCommentToggle","onClickRe","onWriteRecomment","onReadComment","answer_reply_length","set","onSet","setRe","onSetRe","onSubmitRe","color","CommentBlock","palatte","PostCommentItem","ownComment","onChangeComment","onRemoveComment","ownThing","PostHead","PostViewerBlock","PostCommentList","commentWriteSaga","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","WRITE_RECOMMENT","WRITE_RECOMMENT_SUCCESS","WRITE_RECOMMENT_FAILURE","writeComment","writeReComment","writeCommentSaga","wrtieRecommentSaga","selectComment","commentError","commentwrite","onCheck","SubInfoBlock","hasMarginTop","SubInfo","SubInfoinPost","PostContent","actionButtons","ownPost","_data","find","x","publishedDate","dangerouslySetInnerHTML","__html","FullScreen","AskModalBlock","AskModal","visible","description","confirmText","cancleText","onConfirm","onCancle","AskRemoveModal","PostActionButtonBlock","onEdit","modal","setModal","new_data","PostId","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleWare","store","createStore","composeWithDevTools","applyMiddleware","run","toString","replace","loadUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2f3a63b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ResponsiveBlock = styled.div`\r\n   padding-left: 1rem;\r\n   padding-right: 1rem;\r\n   width: 1024px;\r\n   margin: 0 auto; /* 중앙 정렬 */\r\n\r\n   /* 브라우저 크기에 따라 가로 사이즈 변경 */\r\n   @media (max-width: 1024px) {\r\n      width: 768px;\r\n   }\r\n   @media (max-width: 768px) {\r\n      width: 100%;\r\n   }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n   // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n   // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n   return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Responsive from \"./Responsive\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n  z-index: 3;\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst MenuList = styled(Link)`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst BoardList = styled.div`\r\n  .dropbtn {\r\n    background-color: #ea2129;\r\n    color: white;\r\n    padding: 16px;\r\n    font-size: 16px;\r\n    border: none;\r\n  }\r\n\r\n  .dropdown {\r\n    position: relative;\r\n    display: inline-block;\r\n  }\r\n\r\n  .dropdown-content {\r\n    display: none;\r\n    position: absolute;\r\n    background-color: #f1f1f1;\r\n    min-width: 160px;\r\n    margin-left: -1rem;\r\n    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n    z-index: 1;\r\n  }\r\n\r\n  .dropdown-content .myLink {\r\n    color: black;\r\n    padding: 12px 16px;\r\n    text-decoration: none;\r\n    display: block;\r\n  }\r\n\r\n  .dropdown-content .myLink:hover {\r\n    background-color: #ddd;\r\n  }\r\n\r\n  .dropdown:hover .dropdown-content {\r\n    display: block;\r\n  }\r\n\r\n  .dropdown:hover .dropbtn {\r\n    background-color: #3e8e41;\r\n  }\r\n`;\r\n\r\nconst Header = ({ user, onLogout, boards }) => {\r\n  let boards_data = boards && boards;\r\n  if (boards !== null) {\r\n    localStorage.setItem(\"boards\", JSON.stringify(boards));\r\n  } else {\r\n    boards_data = JSON.parse(localStorage.getItem(\"boards\"));\r\n  }\r\n\r\n  console.log(boards_data);\r\n  return (\r\n    <>\r\n      {console.log(boards)}\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            REACTERS\r\n          </Link>\r\n          <BoardList>\r\n            <MenuList className=\"dropdown\">\r\n              <p>BoardList</p>\r\n              <div class=\"dropdown-content\">\r\n                {boards_data && (\r\n                  <div>\r\n                    {boards_data.map((board) => (\r\n                      <Link\r\n                        to={`/board/${board.pk}`}\r\n                        className=\"myLink\"\r\n                        key={board.pk}\r\n                      >\r\n                        {board.fields.name}\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </MenuList>\r\n          </BoardList>\r\n          <MenuList to=\"/board/2\">Q&A</MenuList>\r\n\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfo>{user}</UserInfo>\r\n              <Button cyan onClick={onLogout}>\r\n                로그아웃\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button cyan to=\"/login\">\r\n                로그인\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nfunction SideArea({ children }) {\r\n  return (\r\n    <Wrapper>\r\n      <Block>{children}</Block>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Block = styled.div`\r\n  position: absolute;\r\n\r\n  width: 1.5rem;\r\n  left: -3.5rem;\r\n`;\r\n\r\nexport default SideArea;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SideArea from \"./SideArea\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport { RiMenuUnfoldLine } from \"react-icons/ri\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Responsive from \"./Responsive\";\r\nconst SideBarBlock = styled.div`\r\n   position: fixed;\r\n   background: green;\r\n   height: 100%;\r\n   top: 0;\r\n   left: 0;\r\n   z-index: 5;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n   position: fixed;\r\n`;\r\n\r\nconst MenuButton = styled.div`\r\n   display: flex;\r\n   margin-left: 1rem;\r\n   width: 2rem;\r\n   height: 4rem;\r\n   justify-content: center;\r\n   flex-direction: column;\r\n   :hover {\r\n      .BoardList {\r\n         position: relative;\r\n         background: yellow;\r\n         width: 4rem;\r\n         margin-left: 0;\r\n      }\r\n   }\r\n   .BoardList {\r\n      display: none;\r\n      margin-left: -40px;\r\n   }\r\n`;\r\n\r\nconst Side = ({}) => {\r\n   const [set, onSet] = useState(false);\r\n   return (\r\n      <SideBarBlock>\r\n         <MenuButton>\r\n            <RiMenuUnfoldLine size=\"3rem\" />\r\n\r\n            <Link className=\"BoardList\">1</Link>\r\n            <Link className=\"BoardList\">1</Link>\r\n            <Link className=\"BoardList\">1</Link>\r\n         </MenuButton>\r\n      </SideBarBlock>\r\n   );\r\n};\r\n\r\nexport default Side;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type));\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\n// axios 인스턴스 생성\r\n\r\nconst client = axios.create();\r\n\r\n// // 글로벌 설정\r\n\r\n// // API 주소 다른 곳 사용\r\nclient.defaults.baseURL = \"https://djangocrudboard.ml\";\r\nclient.defaults.withCredentials = true;\r\n\r\n// //header\r\n// client.defaults.headers.common['Authorization'] = '주소';\r\n\r\n// //인터셉터\r\n// axios.intercepter.response.use(\r\n//     response => {\r\n//         //요청 성공시 특정 작업\r\n//         return response;\r\n//     },\r\n//     error => {\r\n//         //요청 실패 시 특정 작업\r\n//         return Promise.reject(error);\r\n//     }\r\n// )\r\nexport default client;\r\n","import qs from \"qs\";\r\nimport client from \"./client\";\r\n// 게시판 목록 불러오기\r\nexport const getBoard = (posts) => (posts = client.get(`/board`));\r\n\r\n// 글쓰기\r\nexport const writePost = ({ title, pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    title,\r\n    pk,\r\n    content,\r\n  });\r\n  console.log(\"postitem\", queryString);\r\n  return client.post(\"/post\", queryString);\r\n};\r\n\r\n// 댓글 쓰기\r\nexport const writeCommnet = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  console.log((\"query\", queryString));\r\n  return client.post(\"/reply\", queryString);\r\n};\r\n\r\n// 글 수정하기\r\nexport const updatePost = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.put(\"/post\", queryString);\r\n};\r\n\r\n// 댓글 수정하기\r\nexport const changeComment = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.put(\"/reply\", queryString);\r\n};\r\n// 대댓글 수정하기\r\nexport const changeReComment = ({ pk, content }) => {\r\n  const qeryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.put(\"/answer_reply\", qeryString);\r\n};\r\n\r\n// 댓글 삭제하기\r\nexport const deleteComment = ({ pk }) => {\r\n  const queryString = qs.stringify({ pk });\r\n  console.log(\"hajsdfhajsdf\", pk);\r\n  return client.delete(\"/reply\", {\r\n    data: queryString,\r\n  });\r\n  // return client.delete(\"/reply\", queryString);\r\n};\r\n\r\nexport const deleteRecomment = ({ pk }) => {\r\n  const queryString = qs.stringify({ pk });\r\n  return client.delete(\"/answer_reply\", { data: queryString });\r\n};\r\n\r\n// 글 삭제하기\r\nexport const deletePost = ({ pk }) => {\r\n  const queryString = qs.stringify({ pk });\r\n  return client.delete(\"/post\", { data: queryString });\r\n};\r\n\r\nexport const writeReCommnet = ({ pk, content }) => {\r\n  const queryString = qs.stringify({\r\n    pk,\r\n    content,\r\n  });\r\n  return client.post(`/answer_reply?pk=${pk}`, queryString);\r\n};\r\n\r\n// 댓글 읽어오기\r\nexport const readComment = (id) => client.get(`/reply?pk=${id}`);\r\n\r\n// 대댓글 읽어오기\r\nexport const readRecoment = (id) => client.get(`/answer_reply?pk=${id}`);\r\n\r\n// 글 읽어오기\r\nexport const readPost = (id) => client.get(`/post?pk=${id}`);\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\n// 게시판 목록 불러오기\r\nconst [\r\n  READ_BOAD,\r\n  READ_BOAD_SUCCESS,\r\n  READ_BOAD_FAILURE,\r\n] = createRequestActionTypes(\"posts/READ_BOARD\");\r\n\r\n// 글 목록 불러오기\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes(\"posts/LIST_POSTS\");\r\n\r\nconst TOGGLE_MENU = \"posts/TOGGLE/MENU\";\r\n\r\nexport const toggleMenu = createAction(TOGGLE_MENU);\r\n\r\n// 액션 만들어주기\r\n\r\nexport const readBoard = createAction(READ_BOAD);\r\nexport const listPosts = createAction(LIST_POSTS, (id) => id);\r\n\r\n//Saga 만들어주기\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.readPost);\r\nconst readBoardSaga = createRequestSaga(READ_BOAD, postsAPI.getBoard);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n  yield takeLatest(READ_BOAD, readBoardSaga);\r\n}\r\n\r\nconst initialState = {\r\n  boards: null,\r\n  posts: null,\r\n  data: null,\r\n  postsdata: null,\r\n  error: null,\r\n  lastPage: 1,\r\n  toggle: false,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      postsdata: posts.data,\r\n      posts,\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [READ_BOAD_SUCCESS]: (state, { payload: data, meta: response }) => ({\r\n      ...state,\r\n      data,\r\n      boards: data.data,\r\n      lastPage: parseInt(response.headers[\"last-page\"], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    // (data = posts.data)\r\n    // console.log(data)\r\n    [READ_BOAD_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [TOGGLE_MENU]: (state, { payload: toggle }) => ({\r\n      ...state,\r\n      toggle: !toggle,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default posts;\r\n","import client from \"./client\";\r\nimport qs from \"qs\";\r\n\r\n// 회원가입\r\n\r\nexport const register = ({ username, email, password }) =>\r\n  client.post(\"/register\", qs.stringify({ username, email, password }));\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post(\"/login\", qs.stringify({ username, password }));\r\n\r\n// 로그인 상태 확인\r\nexport const check = (user) => client.get(`/login?=${user}`);\r\n\r\n// 로그아웃\r\nexport const logout = () => client.get(\"/logout\");\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport { takeLatest, call } from \"redux-saga/effects\";\r\nimport * as authAPI from \"../lib/api/auth\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\n\r\nconst TEMP_SET_USER = \"user/TEMP_SET_USER\"; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  \"user/CHECK\"\r\n);\r\nconst LOGOUT = \"user/LOGOUT\";\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK, (user) => user);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    console.log(\"hihih\");\r\n    localStorage.removeItem(\"user\"); // localStorage 에서 user 제거하고\r\n  } catch (e) {\r\n    console.log(\"localStorage is not working\");\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API 호출\r\n    localStorage.removeItem(\"user\"); // localStorage 에서 user 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  data: null,\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      data,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Header from \"../../components/common/Header\";\r\nimport Side from \"../../components/common/Side\";\r\nimport { readBoard, toggleMenu } from \"../../modules/posts\";\r\nimport { logout } from \"../../modules/user\";\r\n\r\nconst HeaderContainer = () => {\r\n  const { user, toggle, boards, data } = useSelector(({ user, posts }) => ({\r\n    user: user.user,\r\n    toggle: posts.toggle,\r\n    boards: posts.boards,\r\n    data: posts.data,\r\n  }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  //게시판 목록 불러오기\r\n  useEffect(() => {\r\n    dispatch(readBoard());\r\n  }, [dispatch]);\r\n  const onClick = () => {\r\n    dispatch(toggleMenu(toggle));\r\n  };\r\n  return (\r\n    <>\r\n      <Header\r\n        user={user}\r\n        onLogout={onLogout}\r\n        onClick={onClick}\r\n        boards={boards}\r\n        data={data}\r\n      />\r\n      {/* <Side></Side> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport Button from \"../common/Button\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst BoardItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-right: 2rem;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-right: 2rem;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { reply_length } = post;\r\n  const { username } = post.fields.author.fields;\r\n\r\n  const { title, writeAt } = post.fields;\r\n\r\n  const postDate = writeAt.split(\"T\");\r\n\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/board/post/${post.pk}`}>{title}</Link>\r\n      </h2>\r\n\r\n      <p>\r\n        작성자 : {username} 작성일 {postDate[0]}\r\n      </p>\r\n\r\n      <br />\r\n      <span>댓글 수 : {reply_length}</span>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({\r\n  posts,\r\n  loading,\r\n  error,\r\n  showWriteButton,\r\n  postsdata,\r\n  postId,\r\n\r\n  user,\r\n}) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n  }\r\n  return (\r\n    <BoardItemBlock>\r\n      <PostListBlock>\r\n        <WritePostButtonWrapper>\r\n          {showWriteButton && user ? (\r\n            <Button cyan to={`/write/${postId}`}>\r\n              새 글 작성하기\r\n            </Button>\r\n          ) : null}\r\n        </WritePostButtonWrapper>\r\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\r\n\r\n        {!loading && posts && postsdata && (\r\n          <div>\r\n            {postsdata.map((post) => (\r\n              <PostItem post={post} key={post.pk} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </PostListBlock>\r\n    </BoardItemBlock>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostList);\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_POST\");\r\nconst UNLOAD_POST = \"post/UNLOAD_POST\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  data: null,\r\n  error: null,\r\n  _postId: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      data: post.data,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default post;\r\n","import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostList from \"../../components/posts/PostList\";\r\nimport { listPosts } from \"../../modules/posts\";\r\nimport { readPost } from \"../../modules/post\";\r\n\r\nconst PostListContainer = ({ match, history }) => {\r\n  let { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user, data, post, postsdata } = useSelector(\r\n    ({ posts, loading, user, post }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading[\"posts/READ_BOARD\"],\r\n      user: user.user,\r\n      data: posts.data,\r\n      boards: posts.boards,\r\n      post: post.post,\r\n      _postId: post._postId,\r\n      postsdata: posts.postsdata,\r\n    })\r\n  );\r\n  // 각 게시판 별 게시물들 불러오기\r\n  useEffect(() => {\r\n    if (postId === undefined) {\r\n      postId = 1;\r\n    }\r\n\r\n    dispatch(readPost(postId));\r\n    dispatch(listPosts(postId));\r\n  }, [dispatch, postId]);\r\n  useEffect(() => {\r\n    if (postId) {\r\n      try {\r\n        localStorage.setItem(\"postId\", JSON.stringify(postId));\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n    }\r\n  }, [history, postId]);\r\n  return (\r\n    <PostList\r\n      postId={postId}\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      data={data}\r\n      post={post}\r\n      user={user}\r\n      postsdata={postsdata}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 5rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { tag, username, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostListContainer from \"../containers/posts/PostListContainer\";\r\nimport PaginationContainer from \"../containers/posts/PaginationContainer\";\r\nimport SideContainer from \"../containers/common/SideContainer\";\r\n\r\nconst PostListPage = () => {\r\n   return (\r\n      <>\r\n         <HeaderContainer />\r\n\r\n         <PostListContainer />\r\n         <PaginationContainer />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n// 페이지 레이아웃 담당\r\n\r\n// 화면 전체 채움\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  //flex로 내부 중앙 정렬\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n// 흰색 박스\r\nconst WitheBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WitheBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/board/1\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WitheBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(\r\n  REGISTER,\r\n  ({ username, email, password }) => ({\r\n    username,\r\n    email,\r\n    password,\r\n  }),\r\n);\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  cookies: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      auth: null,\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../common/Button';\r\n// 회원가입 또는 로그인 폼\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n// 스타일링 된 input\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n// 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\n// 에러 메세지\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일 입력\"\r\n            type=\"email\"\r\n            onChange={onChange}\r\n            value={form.email}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { changeField, initializeForm, login } from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport { check, tempSetUser } from \"../../modules/user\";\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    error: user.error,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: \"login\",\r\n        key: name,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"login\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log(\"오류 발생\");\r\n      console.log(authError);\r\n      setError(\"로그인 실패\");\r\n      return;\r\n    }\r\n    if (auth) {\r\n      const { username } = form;\r\n      console.log(\"로그인 성공\");\r\n      // dispatch(check(username));\r\n      dispatch(tempSetUser(username));\r\n    }\r\n  }, [auth, authError, dispatch, form]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/\");\r\n      try {\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n        console.log(\"set user ok\");\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n\r\n      console.log(\"user\", user);\r\n    }\r\n  }, [history, auth, form, user, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\n\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeField, initializeForm, register } from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport { check } from \"../../modules/user\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: \"register\",\r\n        key: name,\r\n        value,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm, email } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, password, passwordConfirm, email].includes(\"\")) {\r\n      setError(\"빈 칸을 모두 입력하세요.\");\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError(\"비밀번호가 일치하지 않습니다.\");\r\n      dispatch(changeField({ form: \"register\", key: \"password\", value: \"\" }));\r\n      dispatch(\r\n        changeField({ form: \"register\", key: \"passwordConfirm\", value: \"\" })\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, email, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"register\"));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공 / 실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log(\"authError is : \", authError);\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError(\"이미 존재하는 계정명입니다.\");\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError(\"회원가입 실패\");\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      console.log(\"회원가입 성공\");\r\n      history.push(\"/\");\r\n      console.log(auth);\r\n    }\r\n  }, [auth, authError, dispatch, user, history]);\r\n\r\n  // user 값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    const { username } = form;\r\n    if (username) {\r\n      history.push(\"/\"); // 홈 화면으로 이동\r\n      try {\r\n        localStorage.setItem(\"user\", JSON.stringify(username));\r\n      } catch (e) {\r\n        console.log(\"localStorage is not working\");\r\n      }\r\n    }\r\n  }, [history, user, form]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, content, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'content', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = content;\r\n  }, [content]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as api from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst INITIALIZE = \"write/INITIALIZE\"; // 모든 내용 초기화\r\nconst CHANGE_FIELD = \"write/CHANGE_FIELD\"; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes(\"write/WRITE_POST\"); // 포스트 작성\r\nconst SET_ORIGINAL_POST = \"write/SET_ORIGINAL_POST\";\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes(\"write/UPDATE_POST\"); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, pk, content }) => ({\r\n  title,\r\n  pk,\r\n  content,\r\n}));\r\nexport const setOriginalPost = createAction(\r\n  SET_ORIGINAL_POST,\r\n  ({ title, pk, content, originalPostId }) => ({\r\n    title,\r\n    pk,\r\n    content,\r\n    originalPostId,\r\n  })\r\n);\r\nexport const updatePost = createAction(UPDATE_POST, ({ pk, content }) => ({\r\n  pk,\r\n  content,\r\n}));\r\n\r\n// saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, api.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, api.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: \"\",\r\n  pk: \"1\",\r\n  content: \"\",\r\n  originalPostId: \"\",\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post, meta: response }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (\r\n      state,\r\n      { payload: { title, pk, content, originalPostId } }\r\n    ) => ({\r\n      ...state,\r\n      title,\r\n      pk,\r\n      content,\r\n      originalPostId,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default write;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { title, content } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    content: write.content,\r\n  }));\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch],\r\n  );\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <Editor onChangeField={onChangeField} title={title} content={content} />\r\n  );\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({\r\n  onCancel,\r\n  onPublish,\r\n  onUpdatePost,\r\n  originalPostId,\r\n  pk,\r\n}) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      {!originalPostId ? (\r\n        <StyledButton cyan onClick={onPublish}>\r\n          포스트 등록\r\n        </StyledButton>\r\n      ) : (\r\n        <StyledButton cyan onClick={() => onUpdatePost({ pk })}>\r\n          포스트 수정\r\n        </StyledButton>\r\n      )}\r\n\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from \"react\";\r\nimport WriteActionButtons from \"../../components/write/WriteActionButtons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { writePost, updatePost } from \"../../modules/write\";\r\nimport { listPosts } from \"../../modules/posts\";\r\n\r\nconst WriteActionButtonsContainer = ({ history, match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const dispatch = useDispatch();\r\n  const {\r\n    title,\r\n    content,\r\n    tags,\r\n    pk,\r\n    post,\r\n    postError,\r\n    originalPostId,\r\n  } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    pk: write.pk,\r\n    content: write.content,\r\n    tags: write.tags,\r\n    post: write.post,\r\n    postError: write.postError,\r\n    originalPostId: write.originalPostId,\r\n  }));\r\n\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        pk,\r\n        content,\r\n      })\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n\r\n      history.push(`/`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  const onUpdatePost = ({ pk }) => {\r\n    dispatch(updatePost({ pk, content }));\r\n  };\r\n  return (\r\n    <WriteActionButtons\r\n      pk={pk}\r\n      originalPostId={originalPostId}\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      onUpdatePost={onUpdatePost}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n","import React from \"react\";\r\nimport Responsive from \"../components/common/Responsive\";\r\nimport EditorContainer from \"../containers/write/EditorContainer\";\r\nimport WriteActionButtonsContainer from \"../containers/write/WriteActionButtonsContainer\";\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <EditorContainer />\r\n      <hr />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst [\r\n  READ_COMMENT,\r\n  READ_COMMENT_SUCCESS,\r\n  READ_COMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_COMMENT\");\r\nconst [\r\n  DELETE_COMMENT,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/DELETE_COMMENT\");\r\nconst UNLOAD_COMMENT = \"post/UNLOAD_COMMENT\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nconst [\r\n  READ_RECOMMENT,\r\n  READ_RECOMMENT_SUUCCESS,\r\n  READ_RECOMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/READ_RECOMMENT\");\r\n\r\nconst [\r\n  CHANGE_COMMENT,\r\n  CHANGE_COMMENT_SUUCCESS,\r\n  CHANGE_COMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/CHANGE_COMMENT\");\r\n\r\nconst [\r\n  CHANGE_RECOMMENT,\r\n  CHANGE_RECOMMENT_SUUCCESS,\r\n  CHANGE_RECOMMENT_FAILURE,\r\n] = createRequestActionTypes(\"post/CHANGE_RECOMMENT\");\r\n\r\nexport const deleteComment = createAction(DELETE_COMMENT, ({ pk }) => ({ pk }));\r\nexport const readComment = createAction(READ_COMMENT, (id) => id);\r\nexport const unloadComment = createAction(UNLOAD_COMMENT);\r\nexport const readRecomment = createAction(READ_RECOMMENT, (id) => id);\r\nexport const changeComment = createAction(\r\n  CHANGE_COMMENT,\r\n  ({ pk, content }) => ({ pk, content })\r\n);\r\nexport const changeReComment = createAction(\r\n  CHANGE_RECOMMENT,\r\n  ({ pk, content }) => ({ pk, content })\r\n);\r\n\r\nconst readCommentSaga = createRequestSaga(READ_COMMENT, postsAPI.readComment);\r\nconst deleteCommentSaga = createRequestSaga(\r\n  DELETE_COMMENT,\r\n  postsAPI.deleteComment\r\n);\r\nconst readRecommentSaga = createRequestSaga(\r\n  READ_RECOMMENT,\r\n  postsAPI.readRecoment\r\n);\r\nconst changeCommentSaga = createRequestSaga(\r\n  CHANGE_COMMENT,\r\n  postsAPI.changeComment\r\n);\r\nconst changeReCommentSaga = createRequestSaga(\r\n  CHANGE_RECOMMENT,\r\n  postsAPI.changeReComment\r\n);\r\n\r\nexport function* commentSaga() {\r\n  yield takeLatest(READ_COMMENT, readCommentSaga);\r\n  yield takeLatest(DELETE_COMMENT, deleteCommentSaga);\r\n  yield takeLatest(READ_RECOMMENT, readRecommentSaga);\r\n  yield takeLatest(CHANGE_COMMENT, changeCommentSaga);\r\n  yield takeLatest(CHANGE_RECOMMENT, changeReCommentSaga);\r\n}\r\n\r\nconst initialState = {\r\n  comment: null,\r\n  recomment: null,\r\n  data: [],\r\n  recommentdata: [],\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n      data: comment.data,\r\n      comment,\r\n    }),\r\n    [READ_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [DELETE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n      comment,\r\n    }),\r\n    [DELETE_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [READ_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\r\n      ...state,\r\n      recommentdata: recomment.data,\r\n      recomment,\r\n    }),\r\n    [READ_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [CHANGE_COMMENT_SUUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n\r\n      comment,\r\n    }),\r\n    [CHANGE_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [CHANGE_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\r\n      ...state,\r\n\r\n      recomment,\r\n    }),\r\n    [CHANGE_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_COMMENT]: () => initialState,\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default post;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { deleteRecomment } from \"../../lib/api/posts\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst ReCommentBlock = styled.span`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n\r\n  div {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    margin-top: -1.5rem;\r\n    width: 100%;\r\n    margin-bottom: 2rem;\r\n  }\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst PostRecommentItem = ({\r\n  recomment,\r\n  onRecomment,\r\n  user,\r\n  onChangeReComment,\r\n}) => {\r\n  const { reply } = recomment.fields;\r\n  // username 불러오기\r\n  const { username } = recomment.fields.author.fields;\r\n  const { pk } = recomment;\r\n  const [text, setText] = useState(\"\");\r\n  const [edit, setEdit] = useState(false);\r\n  const [out, setOut] = useState(false);\r\n\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const onSumbit = (e) => {\r\n    e.preventDefault();\r\n    // 내용이 비어있을 경우 경고 표시\r\n    if (text === \"\") {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    const content = text;\r\n    const recomment_pk = reply;\r\n    onChangeReComment({ pk, content, recomment_pk });\r\n    setText(\"\");\r\n    setEdit(!edit);\r\n  };\r\n\r\n  // 자신이 쓴 대댓글인지 확인\r\n  const ownRecomment = user === username;\r\n\r\n  const { writeAt, content } = recomment.fields;\r\n  const postDate = writeAt.split(\"T\");\r\n  // 대댓글 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      deleteRecomment({ pk });\r\n      setOut(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {out || (\r\n        <div>\r\n          {/* 댓글 정보 */}\r\n          <span>\r\n            Date: {postDate[0]} username: {username}\r\n          </span>\r\n          <hr />\r\n          {/* 댓글 수정 부 form 으로 구현  */}\r\n          {edit && (\r\n            <form onSubmit={onSumbit}>\r\n              <Input value={text} onChange={onChange}></Input>\r\n              <ReCommentBlock>\r\n                <ActionButton type={\"submit\"}>등록</ActionButton>\r\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\r\n              </ReCommentBlock>\r\n            </form>\r\n          )}\r\n          {edit || (\r\n            <div>\r\n              <ReCommentBlock>{content}</ReCommentBlock>\r\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\r\n              {ownRecomment ? (\r\n                <>\r\n                  <ReCommentBlock>\r\n                    <div>\r\n                      <ActionButton\r\n                        onClick={() => {\r\n                          setEdit(!edit);\r\n                          setText(content);\r\n                        }}\r\n                      >\r\n                        수정\r\n                      </ActionButton>\r\n                      <ActionButton onClick={onRemove}>삭제</ActionButton>\r\n                    </div>\r\n                  </ReCommentBlock>\r\n                </>\r\n              ) : (\r\n                <div>&nbsp;&nbsp;</div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostRecommentItem;\r\n","import React, { useState } from \"react\";\r\nimport { AiOutlinePlusSquare, AiOutlineMinusSquare } from \"react-icons/ai\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport PostRecommentItem from \"./PostRecommentItem\";\r\nconst ToggleButton = styled.div`\r\n  display: block;\r\n  align-items: center;\r\n\r\n  font-weight: bold;\r\n  font-size: 1.5rem;\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  z-index: 2;\r\n  span {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 1.7rem;\r\n    font-size: 1rem;\r\n    text-align: center;\r\n    margin-bottom: 2px;\r\n  }\r\n  p {\r\n    position: absolute;\r\n    top: -2rem;\r\n    left: 0;\r\n    width: 100%;\r\n    display: hidden;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n\r\n  cursor: pointer;\r\n  background: ${palette.cyan[5]};\r\n  &:hover {\r\n    background: ${palette.cyan[4]};\r\n  }\r\n  float: right;\r\n`;\r\nconst Button2 = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  width: 100%;\r\n  color: white;\r\n  margin-bottom: 2rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.cyan[5]};\r\n  &:hover {\r\n    background: ${palette.cyan[4]};\r\n  }\r\n`;\r\nconst RecommentBlock = styled.div`\r\n  border: 1px solid rgba(0, 0, 0, 0.02);\r\n  background-color: rgba(0, 0, 0, 0.016);\r\n  padding: 1.5rem;\r\n  border-radius: 10px;\r\n  margin-top: 1.3125rem;\r\n`;\r\n\r\nconst PostCommentToggle = ({\r\n  comment,\r\n  onRecomment,\r\n  onClickRe,\r\n  recommentdata,\r\n  onWriteRecomment,\r\n  onReadComment,\r\n  onChangeReComment,\r\n  user,\r\n}) => {\r\n  const { pk } = comment;\r\n  const { answer_reply_length } = comment;\r\n  // const { id } = comment.recomments;\r\n  const [set, onSet] = useState(false);\r\n  const [setRe, onSetRe] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const onSubmitRe = (e) => {\r\n    e.preventDefault();\r\n    const content = text;\r\n    onWriteRecomment({ pk, content });\r\n    setText(\"\");\r\n  };\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const onClick = () => {\r\n    onSet(!set);\r\n    let id = pk;\r\n    onClickRe({ id });\r\n  };\r\n  const onClick2 = () => {\r\n    onSetRe(!setRe);\r\n  };\r\n\r\n  const onRead = () => {\r\n    let id = pk;\r\n    onReadComment({ id });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        <ToggleButton>\r\n          {set ? (\r\n            <AiOutlineMinusSquare\r\n              onClick={onClick}\r\n              color=\"#22b8cf\"\r\n            ></AiOutlineMinusSquare>\r\n          ) : (\r\n            <AiOutlinePlusSquare\r\n              onClick={onClick}\r\n              color=\"#22b8cf\"\r\n            ></AiOutlinePlusSquare>\r\n          )}\r\n\r\n          {set ? (\r\n            <span onClick={onClick}>숨기기</span>\r\n          ) : (\r\n            <div>\r\n              {answer_reply_length === 0 ? (\r\n                <span onClick={onClick}>답글 달기</span>\r\n              ) : (\r\n                <span onClick={onClick}>{answer_reply_length}개의 댓글</span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </ToggleButton>\r\n      </>\r\n      <br />\r\n      {set && answer_reply_length === 0 ? (\r\n        <form onSubmit={onSubmitRe}>\r\n          <Input\r\n            type=\"text\"\r\n            value={text}\r\n            placeholder=\"답글을 입력하세요\"\r\n            onChange={onChange}\r\n          ></Input>\r\n          <Button type={\"submit\"} onClick={onRead}>\r\n            등록\r\n          </Button>\r\n        </form>\r\n      ) : null}\r\n      {set && answer_reply_length !== 0 && (\r\n        <>\r\n          <RecommentBlock>\r\n            {recommentdata.map((recomment) => (\r\n              <PostRecommentItem\r\n                key={recomment.pk}\r\n                recomment={recomment}\r\n                user={user}\r\n                onChangeReComment={onChangeReComment}\r\n              ></PostRecommentItem>\r\n            ))}\r\n          </RecommentBlock>\r\n          {user && (\r\n            <Button2 onClick={onClick2}>\r\n              {setRe ? \"숨기기\" : \"답글달기\"}\r\n            </Button2>\r\n          )}\r\n          {setRe && (\r\n            <form onSubmit={onSubmitRe}>\r\n              <Input\r\n                type=\"text\"\r\n                value={text}\r\n                placeholder=\"답글을 입력하세요\"\r\n                onChange={onChange}\r\n              ></Input>\r\n              <Button type={\"submit\"}>등록</Button>\r\n            </form>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default PostCommentToggle;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport PostCommentToggle from \"./PostCommentToggle\";\r\n// import { deleteComment } from \"../../modules/comment\";\r\nimport { deleteComment } from \"../../lib/api/posts\";\r\nconst CommentBlock = styled.span`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n\r\n  div {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    margin-top: -1.5rem;\r\n    width: 100%;\r\n    margin-bottom: 2rem;\r\n  }\r\n`;\r\nconst ActionButton = styled.button`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst PostCommentItem = ({\r\n  comment,\r\n  user,\r\n  onClickRe,\r\n  recommentdata,\r\n  onWriteRecomment,\r\n  onReadComment,\r\n  ownComment,\r\n  onChangeComment,\r\n  onChangeReComment,\r\n}) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [edit, setEdit] = useState(false);\r\n  const [out, setOut] = useState(false);\r\n  const { writeAt, content } = comment.fields;\r\n  const { username } = comment.fields.author.fields;\r\n\r\n  const { pk } = comment;\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const onRemoveComment = async () => {\r\n    try {\r\n      await deleteComment({ pk });\r\n      setOut(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const onChangeComments = () => {\r\n    const content = text;\r\n    onChangeComment({ pk, content });\r\n  };\r\n  const onSumbit = (e) => {\r\n    e.preventDefault();\r\n    // 내용이 비어있을 경우 경고 표시\r\n    if (text === \"\") {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    onChangeComments();\r\n    setText(\"\");\r\n    setEdit(!edit);\r\n  };\r\n\r\n  const ownThing = ownComment(username);\r\n\r\n  const postDate = writeAt.split(\"T\");\r\n  return (\r\n    <>\r\n      {out || (\r\n        <div>\r\n          {/* 댓글 정보 */}\r\n          <span>\r\n            Date: {postDate[0]} username: {username}\r\n          </span>\r\n          <hr />\r\n          {/* 댓글 수정 부 form 으로 구현  */}\r\n          {edit && (\r\n            <form onSubmit={onSumbit}>\r\n              <Input value={text} onChange={onChange}></Input>\r\n              <CommentBlock>\r\n                <div>\r\n                  <ActionButton type={\"submit\"}>등록</ActionButton>\r\n                  <ActionButton onClick={() => setEdit(!edit)}>\r\n                    취소\r\n                  </ActionButton>\r\n                </div>\r\n              </CommentBlock>\r\n            </form>\r\n          )}\r\n          {edit || (\r\n            <div>\r\n              <CommentBlock>{content}</CommentBlock>\r\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\r\n              {ownThing ? (\r\n                <>\r\n                  <CommentBlock>\r\n                    <div>\r\n                      <ActionButton\r\n                        onClick={() => {\r\n                          setEdit(!edit);\r\n                          setText(content);\r\n                        }}\r\n                      >\r\n                        수정\r\n                      </ActionButton>\r\n                      <ActionButton onClick={onRemoveComment}>\r\n                        삭제\r\n                      </ActionButton>\r\n                    </div>\r\n                  </CommentBlock>\r\n                </>\r\n              ) : (\r\n                <div>&nbsp;&nbsp;</div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          <PostCommentToggle\r\n            comment={comment}\r\n            onClickRe={onClickRe}\r\n            recommentdata={recommentdata}\r\n            onWriteRecomment={onWriteRecomment}\r\n            onReadComment={onReadComment}\r\n            user={user}\r\n            onChangeReComment={onChangeReComment}\r\n          />\r\n          <br />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostCommentItem;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PostCommentItem from \"./PostCommentItem\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\nconst Input = styled.input`\r\n  resize: none;\r\n  padding: 1rem 1rem 1.5rem;\r\n  outline: none;\r\n  border: 1px solid rgb(233, 236, 239);\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  min-height: 6.125rem;\r\n  font-size: 1rem;\r\n  color: rgb(33, 37, 41);\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.cyan[5]};\r\n  &:hover {\r\n    background: ${palette.cyan[4]};\r\n  }\r\n  float: right;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nconst PostCommentList = ({\r\n  user,\r\n  comment,\r\n  data,\r\n  onPublish,\r\n  onRemove,\r\n  onClickRe,\r\n  recommentdata,\r\n  onWriteRecomment,\r\n  onReadComment,\r\n  ownComment,\r\n  onChangeComment,\r\n  onChangeReComment,\r\n}) => {\r\n  const [content, setText] = useState(\"\");\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (content === \"\") {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    onPublish({ content });\r\n    setText(\"\");\r\n  };\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <form onSubmit={onSubmit}>\r\n          <Input\r\n            type=\"text\"\r\n            value={content}\r\n            placeholder=\"댓글을 입력하세요\"\r\n            onChange={onChange}\r\n          />\r\n          <Button cyan type={\"submit\"}>\r\n            등록\r\n          </Button>\r\n        </form>\r\n        <br />\r\n        <br />\r\n\r\n        <div>\r\n          {data.map((comment) => (\r\n            <PostCommentItem\r\n              key={comment.pk}\r\n              comment={comment}\r\n              onRemove={onRemove}\r\n              onClickRe={onClickRe}\r\n              recommentdata={recommentdata}\r\n              onWriteRecomment={onWriteRecomment}\r\n              onReadComment={onReadComment}\r\n              ownComment={ownComment}\r\n              user={user}\r\n              onChangeComment={onChangeComment}\r\n              onChangeReComment={onChangeReComment}\r\n            ></PostCommentItem>\r\n          ))}\r\n        </div>\r\n      </PostHead>\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostCommentList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'commentwrite/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'commentwrite/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_COMMENT,\r\n  WRITE_COMMENT_SUCCESS,\r\n  WRITE_COMMENT_FAILURE,\r\n] = createRequestActionTypes('commentwrite/WRITE_COMMENT'); // 댓글 작성\r\nconst [\r\n  WRITE_RECOMMENT,\r\n  WRITE_RECOMMENT_SUCCESS,\r\n  WRITE_RECOMMENT_FAILURE,\r\n] = createRequestActionTypes('commentwrite/WRITE_RECOMMENT'); // 댓글 작성\r\n// const REMOVE = 'comment/REMOVE';\r\nconst SET_ORIGINAL_COMMENT = 'commentwrite/SET_ORIGINAL_COMMENT';\r\n// const TOGGLE = 'comment/TOGGLE';\r\n// const [\r\n//   UPDATE_COMMENT,\r\n//   UPDATE_COMMENT_SUCCESS,\r\n//   UPDATE_COMMENT_FAILURE,\r\n// ] = createRequestActionTypes('write/UPDATE_COMMENT'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writeComment = createAction(WRITE_COMMENT, ({ pk, content }) => ({\r\n  pk,\r\n  content,\r\n}));\r\nexport const writeReComment = createAction(\r\n  WRITE_RECOMMENT,\r\n  ({ pk, content }) => ({\r\n    pk,\r\n    content,\r\n  }),\r\n);\r\nexport const setOriginalComment = createAction(\r\n  SET_ORIGINAL_COMMENT,\r\n  (post) => post,\r\n);\r\n// export const updateComment = createAction(UPDATE_COMMENT, ({ id, text }) => ({\r\n//   id,\r\n//   text,\r\n// }));\r\n\r\nconst writeCommentSaga = createRequestSaga(\r\n  WRITE_COMMENT,\r\n  postsAPI.writeCommnet,\r\n);\r\n// const updatePostSaga = createRequestSaga(UPDATE_COMMENT, postsAPI);\r\nconst wrtieRecommentSaga = createRequestSaga(\r\n  WRITE_RECOMMENT,\r\n  postsAPI.writeReCommnet,\r\n);\r\nexport function* commentWriteSaga() {\r\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\r\n  yield takeLatest(WRITE_RECOMMENT, wrtieRecommentSaga);\r\n  // yield takeLatest(UPDATE_COMMENT, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  pk: 3,\r\n  content: '123',\r\n  post: null,\r\n  selectComment: null,\r\n  commentError: null,\r\n};\r\n\r\nconst commentwrite = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_COMMENT]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_COMMENT_FAILURE]: (state, { payload: commentError }) => ({\r\n      ...state,\r\n      commentError,\r\n    }),\r\n    [WRITE_RECOMMENT_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_RECOMMENT_FAILURE]: (state, { payload: commentError }) => ({\r\n      ...state,\r\n      commentError,\r\n    }),\r\n    // [SET_ORIGINAL_COMMENT]: (state, { payload: post }) => ({\r\n    //   ...state,\r\n    //   title: post.title,\r\n    //   body: post.body,\r\n    //   tags: post.tags,\r\n    //   originalPostId: post._id,\r\n    // }),\r\n    // [UPDATE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n    //   ...state,\r\n    //   comment,\r\n    // }),\r\n    // [UPDATE_COMMENT_FAILURE]: (state, { payload: postError }) => ({\r\n    //   ...state,\r\n    //   postError,\r\n    // }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default commentwrite;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteComment,\r\n  readComment,\r\n  unloadComment,\r\n  readRecomment,\r\n  changeComment,\r\n  changeReComment,\r\n} from \"../../modules/comment\";\r\nimport PostCommentList from \"../../components/post/PostCommentList\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  initialize,\r\n  writeComment,\r\n  writeReComment,\r\n} from \"../../modules/commentwrite\";\r\n\r\nconst PostCommentContainer = ({ match }) => {\r\n  const [check, onCheck] = useState(false);\r\n  const { postId } = match.params;\r\n  const { comment, data, user, content, pk, recommentdata } = useSelector(\r\n    ({ comment, user, commentwrite }) => ({\r\n      comment: comment.comment,\r\n      data: comment.data,\r\n      user: user.user,\r\n      content: commentwrite.content,\r\n      pk: postId,\r\n      recommentdata: comment.recommentdata,\r\n    })\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // dispatch(readPost(postId));\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    dispatch(initialize());\r\n    // 댓글 읽어오기\r\n    dispatch(readComment(postId));\r\n    return () => {\r\n      dispatch(initialize());\r\n      dispatch(unloadComment());\r\n    };\r\n  }, [dispatch, pk, content, postId]);\r\n  // 댓글 읽어오기\r\n  const onReadComment = ({ id }) => {\r\n    dispatch(readComment(id));\r\n  };\r\n  // 대댓글 읽어오기\r\n  const onClickRe = ({ id }) => {\r\n    dispatch(readRecomment(id));\r\n  };\r\n  // 댓글 쓰기\r\n  const onPublish = ({ content }) => {\r\n    dispatch(writeComment({ pk, content }));\r\n    //댓글 읽어오기\r\n    const id = pk;\r\n    dispatch(readComment(id));\r\n    dispatch(readComment(id));\r\n    dispatch(readComment(id));\r\n  };\r\n  // 대댓글 쓰기\r\n  const onWriteRecomment = ({ pk, content }) => {\r\n    dispatch(writeReComment({ pk, content }));\r\n    const id = pk;\r\n    dispatch(readComment(postId));\r\n    dispatch(readRecomment(id));\r\n    dispatch(readRecomment(id));\r\n    dispatch(readRecomment(id));\r\n  };\r\n\r\n  // // 댓글 삭제하기\r\n  // let is = 'hihi';\r\n  const onRemove = ({ pk }) => {\r\n    dispatch(deleteComment({ pk }));\r\n  };\r\n  // 작성자 게시물 확인하기\r\n  const ownComment = (postId) => {\r\n    if (postId === user) {\r\n      onCheck(true);\r\n      return true;\r\n    }\r\n  };\r\n  // 댓글 수정하기\r\n  const onChangeComment = ({ pk, content }) => {\r\n    dispatch(changeComment({ pk, content }));\r\n    dispatch(readComment(postId));\r\n    dispatch(readComment(postId));\r\n  };\r\n  // 대댓글 수정하기\r\n  const onChangeReComment = ({ pk, content, recomment_pk }) => {\r\n    dispatch(changeReComment({ pk, content }));\r\n    dispatch(readRecomment(recomment_pk));\r\n    dispatch(readRecomment(recomment_pk));\r\n  };\r\n  return (\r\n    <PostCommentList\r\n      comment={comment}\r\n      onPublish={onPublish}\r\n      onRemove={onRemove}\r\n      postId={postId}\r\n      data={data}\r\n      user={user}\r\n      onReadComment={onReadComment}\r\n      recommentdata={recommentdata}\r\n      onWriteRecomment={onWriteRecomment}\r\n      onClickRe={onClickRe}\r\n      ownComment={ownComment}\r\n      onChangeComment={onChangeComment}\r\n      onChangeReComment={onChangeReComment}\r\n    ></PostCommentList>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostCommentContainer);\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: black;\r\n\r\n  /* span 사이에 가운뎃점 문자 보여주기*/\r\n  span + span:before {\r\n    color: ${palette.gray[6]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n  }\r\n  div {\r\n    display: block;\r\n  }\r\n  span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ children, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <div></div>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport SubInfo from \"../common/SubInfo\";\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst SubInfoinPost = styled(SubInfo)`\r\n  border: 1px solid ${palette.gray[2]};\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({\r\n  error,\r\n  loading,\r\n  actionButtons,\r\n  postId,\r\n  postsdata,\r\n  ownPost,\r\n}) => {\r\n  // const [set, onSet] = useState(false);\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    console.log(error);\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  const _postId = parseInt(postId, 10);\r\n  // postsdata 배열에서 주소와 일치하는 post 찾기\r\n  let _data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === _postId;\r\n    });\r\n  // redirecting(새로고침)에서 데이터 사라짐 방지용 localStorage 저장\r\n  if (_data !== null) {\r\n    localStorage.setItem(\"data\", JSON.stringify(_data));\r\n  } else {\r\n    _data = JSON.parse(localStorage.getItem(\"data\"));\r\n  }\r\n  const { title, content, writeAt } = _data.fields;\r\n  ownPost(_data.fields.author.fields.username);\r\n\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <h1>제목 : {title}</h1>\r\n        <SubInfoinPost publishedDate={writeAt} hasMarginTop />\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: content }} />\r\n\r\n      <PostHead />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst FullScreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancleText = '취소',\r\n  onConfirm,\r\n  onCancle,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <FullScreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancle}>{cancleText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </FullScreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancle }) => {\r\n  return <AskModal\r\n    visible={visible}\r\n    title=\"포스트 삭제\"\r\n    description=\"포스트를 정말 삭제하시겠습니까?\"\r\n    confirmText=\"삭제\"\r\n    onConfirm={onConfirm}\r\n    onCancle={onCancle}\r\n  ></AskModal>;\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport AskRemoveModal from \"./AskRemoveModal\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst PostActionButtonBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\nconst PostActionButtons = ({ onEdit, onRemove, check, postsdata, match }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancle = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n  const { postId } = match.params;\r\n\r\n  let new_data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === parseInt(postId, 10);\r\n    });\r\n  if (postsdata !== null) {\r\n    localStorage.setItem(\"postdata\", JSON.stringify(new_data));\r\n  } else {\r\n    new_data = JSON.parse(localStorage.getItem(\"postdata\"));\r\n  }\r\n\r\n  const { title, content } = new_data.fields;\r\n  const { pk } = new_data;\r\n  const { username } = new_data.fields.author.fields;\r\n  const originalPostId = username;\r\n\r\n  const onEditThing = () => {\r\n    onEdit({ title, pk, content, originalPostId });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {check && (\r\n        <>\r\n          <PostActionButtonBlock>\r\n            <ActionButton onClick={onEditThing}>수정</ActionButton>\r\n            <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n          </PostActionButtonBlock>\r\n          <AskRemoveModal\r\n            visible={modal}\r\n            onConfirm={onConfirm}\r\n            onCancle={onCancle}\r\n          ></AskRemoveModal>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostActionButtons);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { unloadPost } from \"../../modules/post\";\r\nimport PostViewer from \"../../components/post/PostViewer\";\r\nimport PostActionButtons from \"../../components/post/PostActionButtons\";\r\nimport { setOriginalPost } from \"../../modules/write\";\r\nimport { deletePost } from \"../../lib/api/posts\";\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const [check, onCheck] = useState(false);\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const {\r\n    post,\r\n    error,\r\n    loading,\r\n    user,\r\n    data,\r\n    _postId,\r\n\r\n    postsdata,\r\n  } = useSelector(({ post, loading, user, posts, write }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading[\"post/READ_POST\"],\r\n    user: user.user,\r\n    data: post.data,\r\n    _postId: post._postId,\r\n    title: write.title,\r\n    pk: write.pk,\r\n    content: write.content,\r\n    originalPostId: write.originalPostId,\r\n    postsdata: posts.postsdata,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, _postId]);\r\n\r\n  const onEdit = ({ title, pk, content, originalPostId }) => {\r\n    dispatch(setOriginalPost({ title, pk, content, originalPostId }));\r\n    history.push(\"/write\");\r\n  };\r\n  // 게시물 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      let pk = postId;\r\n      await deletePost({ pk });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  // 수정 삭제 (id 확인)\r\n  const ownPost = (PostId) => {\r\n    if (PostId === user) {\r\n      onCheck(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostViewer\r\n        post={post}\r\n        postsdata={postsdata}\r\n        loading={loading}\r\n        error={error}\r\n        data={data}\r\n        postId={postId}\r\n        ownPost={ownPost}\r\n        actionButtons={\r\n          <PostActionButtons\r\n            postsdata={postsdata}\r\n            onEdit={onEdit}\r\n            onRemove={onRemove}\r\n            check={check}\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostCommentContainer from \"../containers/post/PostCommentContainer\";\r\n\r\nimport PostViewerContainer from \"../containers/post/PostViewerContainer\";\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n      <PostCommentContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import \"./App.css\";\r\nimport { Route } from \"react-router-dom\";\r\nimport PostListPage from \"./pages/PostListPage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport WritePage from \"./pages/WritePage\";\r\nimport PostPage from \"./pages/PostPage\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>REACTERS</title>\r\n      </Helmet>\r\n      <Route\r\n        component={PostListPage}\r\n        path={[\"/board/:postId\", \"/board\", \"/\"]}\r\n        exact\r\n      />\r\n      <Route component={LoginPage} path=\"/login\" />\r\n      <Route component={RegisterPage} path=\"/register\" />\r\n      <Route component={WritePage} path=\"/write\" />\r\n      <Route component={PostPage} path=\"/board/post/:postId\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport loading from './loading';\r\nimport auth, { authSaga } from './auth';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nimport comment, { commentSaga } from './comment';\r\nimport commentwrite, { commentWriteSaga } from './commentwrite';\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n  comment,\r\n  commentwrite,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    authSaga(),\r\n    userSaga(),\r\n    writeSaga(),\r\n    postSaga(),\r\n    postsSaga(),\r\n\r\n    commentSaga(),\r\n    commentWriteSaga(),\r\n  ]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleWare from \"redux-saga\";\r\nimport rootReducer, { rootSaga } from \"./modules\";\r\nimport { tempSetUser, check } from \"./modules/user\";\r\nimport { HelmetProvider } from \"react-helmet-async\";\r\nconst sagaMiddleware = createSagaMiddleWare();\r\nconst store = createStore(\r\n   rootReducer,\r\n   composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\n// local Stroage에 저장된 user 불러와 \"\" 제거\r\nfunction loadUser() {\r\n   try {\r\n      const user = localStorage.getItem(\"user\");\r\n      if (!user) return;\r\n      console.log(\"localuser is : \", user);\r\n      const _id = user.toString().replace(/\"/g, \"\");\r\n      store.dispatch(tempSetUser(_id));\r\n      store.dispatch(check(_id));\r\n   } catch (e) {\r\n      console.log(\"Storage is not working\");\r\n   }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Provider store={store}>\r\n         <HashRouter>\r\n            <HelmetProvider>\r\n               <App />\r\n            </HelmetProvider>\r\n         </HashRouter>\r\n      </Provider>\r\n   </React.StrictMode>,\r\n   document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}