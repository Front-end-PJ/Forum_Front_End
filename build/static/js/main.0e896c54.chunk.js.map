{"version":3,"sources":["logo.svg","lib/styles/palette.js","components/common/Responsive.js","components/common/Button.js","components/common/Header.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/posts.js","modules/posts.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","modules/post.js","components/posts/PostList.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","components/post/UserTagVerticalList.js","modules/comment.js","components/post/PostRecommentItem.js","components/post/PostCommentToggle.js","components/post/PostCommentItem.js","components/post/PostCommentList.js","modules/commentwrite.js","containers/post/PostCommentContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","cyan","ResponsiveBlock","styled","div","Responsive","children","rest","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","MenuList","Header","user","onLogout","onClick","boards","data","className","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","meta","error","client","axios","create","deleteComment","pk","queryString","qs","stringify","console","log","delete","deleteRecomment","deletePost","readPost","id","get","postsSaga","READ_BOAD","READ_BOAD_SUCCESS","READ_BOAD_FAILURE","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","TOGGLE_MENU","toggleMenu","readBoard","listPosts","listPostsSaga","postsAPI","readBoardSaga","posts","takeLatest","postsdata","lastPage","parseInt","headers","toggle","logout","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","checkFailureSaga","localStorage","removeItem","e","authAPI","fields","username","checkError","HeaderContainer","useSelector","dispatch","useDispatch","useEffect","SubInfoBlock","hasMarginTop","SubInfo","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","unloadPost","readPostSaga","initialState","post","_postId","PostListBlock","WritePostButtonWrapper","BoardItemBlock","PostItemBlock","PostItem","reply_length","author","email","title","writeAt","content","postDate","board","split","withRouter","showWriteButton","match","postId","getItem","map","history","location","params","commendId","undefined","setItem","JSON","PaginationBlock","PageNumber","buildLink","tag","page","query","Pagination","disabled","parse","search","ignoreQueryPrefix","commentSaga","READ_COMMENT","READ_COMMENT_SUCCESS","READ_COMMENT_FAILURE","DELETE_COMMENT","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","UNLOAD_COMMENT","READ_RECOMMENT","READ_RECOMMENT_SUUCCESS","READ_RECOMMENT_FAILURE","CHANGE_COMMENT","CHANGE_COMMENT_SUUCCESS","CHANGE_COMMENT_FAILURE","CHANGE_RECOMMENT","CHANGE_RECOMMENT_SUUCCESS","CHANGE_RECOMMENT_FAILURE","readComment","unloadComment","readRecomment","changeComment","changeReComment","readCommentSaga","deleteCommentSaga","readRecommentSaga","changeCommentSaga","changeReCommentSaga","qeryString","comment","recomment","recommentdata","ReCommentBlock","span","ActionButton","Input","input","PostRecommentItem","onRecomment","onChangeReComment","reply","useState","text","setText","edit","setEdit","out","setOut","ownRecomment","onRemove","a","onSubmit","preventDefault","recomment_pk","alert","value","onChange","target","ToggleButton","Button2","RecommentBlock","PostCommentToggle","onClickRe","onWriteRecomment","onReadComment","answer_reply_length","set","onSet","setRe","onSetRe","onSubmitRe","color","placeholder","CommentBlock","palatte","PostCommentItem","ownComment","onChangeComment","onRemoveComment","ownThing","PostHead","PostViewerBlock","PostCommentList","onPublish","commentWriteSaga","INITIALIZE","CHANGE_FIELD","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","WRITE_RECOMMENT","WRITE_RECOMMENT_SUCCESS","WRITE_RECOMMENT_FAILURE","initialize","writeComment","key","writeReComment","writeCommentSaga","wrtieRecommentSaga","selectComment","commentError","commentwrite","postError","onCheck","PostListPage","AuthTemplateBlock","WitheBox","AuthTemplate","authSaga","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","initializeForm","register","password","login","registerSaga","loginSaga","passwordConfirm","auth","cookies","authError","produce","draft","AuthFormBlock","StyledInput","Footer","ErrorMessage","ButtonWithMarginTop","textMap","AuthForm","autoComplete","name","setError","push","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","writePost","setOriginalPost","originalPostId","updatePost","writePostSaga","updatePostSaga","write","EditorContainer","useCallback","WriteActionButtonsBlock","WriteActionButtons","onCancel","onUpdatePost","tags","_id","goBack","WritePage","SubInfoinPost","PostContent","actionButtons","ownPost","_data","find","x","publishedDate","dangerouslySetInnerHTML","__html","FullScreen","AskModalBlock","AskModal","visible","description","confirmText","cancleText","onConfirm","onCancle","AskRemoveModal","PostActionButtonBlock","onEdit","modal","setModal","new_data","PostId","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleWare","store","createStore","composeWithDevTools","applyMiddleware","run","toString","replace","loadUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAAe,I,2CC6BAA,EA3BC,CACdC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,yaCtBJ,IAAMC,EAAkBC,IAAOC,IAAV,KAqBNC,EANI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAaC,EAAW,4BAG5C,OAAO,cAACL,EAAD,2BAAqBK,GAArB,aAA4BD,M,u3BChBrC,IAAME,EAAcC,YAAH,IASDV,EAAQC,KAAK,GAEXD,EAAQC,KAAK,IAE3B,SAACU,GAAD,OACAA,EAAMC,WACNF,YADA,QAOA,SAACC,GAAD,OACAA,EAAMT,MACNQ,YADA,IAEgBV,EAAQE,KAAK,GAEXF,EAAQE,KAAK,MAIjBF,EAAQC,KAAK,GAClBD,EAAQC,KAAK,IAKpBY,EAAeT,IAAOU,OAAV,IACdL,GAGEM,EAAaX,YAAOY,IAAPZ,CAAH,IACZK,GAWWQ,EARA,SAACN,GACd,OAAOA,EAAMO,GACX,cAACH,EAAD,2BAAgBJ,GAAhB,IAAuBT,KAAMS,EAAMT,KAAO,EAAI,KAE9C,cAACW,EAAD,eAAkBF,K,+6BC5CtB,I,EAAMQ,EAAcf,IAAOC,IAAV,KAWXe,EAAUhB,YAAOE,EAAPF,CAAH,KAmBPiB,EAASjB,IAAOC,IAAV,KAINiB,EAAWlB,IAAOC,IAAV,KAKRkB,EAAWnB,YAAOY,IAAPZ,CAAH,KAkECoB,EAlDA,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,SAAsC,EAA5BC,QAA4B,EAAnBC,OAAmB,EAAXC,KACjD,OACE,qCACE,cAACV,EAAD,UAkBE,eAACC,EAAD,WACE,cAAC,IAAD,CAAMF,GAAG,IAAIY,UAAU,OAAvB,sBAGA,cAACP,EAAD,CAAUL,GAAG,IAAb,mBACA,cAACK,EAAD,CAAUL,GAAG,SAAb,mBACA,cAACK,EAAD,CAAUL,GAAG,WAAb,iBAECO,EACC,sBAAKK,UAAU,QAAf,UACE,cAACR,EAAD,UAAWG,IACX,cAAC,EAAD,CAAQvB,MAAI,EAACyB,QAASD,EAAtB,yCAKF,qBAAKI,UAAU,QAAf,SACE,cAAC,EAAD,CAAQ5B,MAAI,EAACgB,GAAG,SAAhB,uCAOR,cAACG,EAAD,Q,yDC3GAU,EAAgB,wBAChBC,EAAiB,yBAEVC,EAAeC,YAC1BH,GACA,SAACI,GAAD,OAAiBA,KAENC,EAAgBF,YAC3BF,GACA,SAACG,GAAD,OAAiBA,KAmBJE,EAdCC,aAAa,mBAExBP,GAAgB,SAACQ,EAAOC,GAAR,mBAAC,eACbD,GADY,kBAEdC,EAAOC,SAAU,OAJK,cAMxBT,GAAiB,SAACO,EAAOC,GAAR,mBAAC,eACdD,GADa,kBAEfC,EAAOC,SAAU,OARK,GAFR,ICXRC,EAA2B,SAACC,GAGvC,MAAO,CAACA,EAFK,UAAMA,EAAN,YACA,UAAMA,EAAN,cAIA,SAASC,EAAkBD,EAAME,GAC9C,IAAMC,EAAO,UAAMH,EAAN,YACPI,EAAO,UAAMJ,EAAN,YAEb,iBAAO,WAAWH,GAAX,uEACL,OADK,SACCQ,YAAIf,EAAaU,IADlB,OAGc,OAHd,kBAGoBM,YAAKJ,EAASL,EAAOC,SAHzC,OAIH,OADMS,EAHH,gBAIGF,YAAI,CACRL,KAAMG,EACNL,QAASS,EAASrB,KAClBsB,KAAMD,IAPL,+BAUH,OAVG,oCAUGF,YAAI,CACRL,KAAMI,EACNN,QAAQ,EAAD,GACPW,OAAO,IAbN,QAgBL,OAhBK,UAgBCJ,YAAIZ,EAAcO,IAhBnB,yD,oCCaMU,G,QAtBAC,EAAMC,SCiDRC,GAAgB,SAAC,GAAY,IAAVC,EAAS,EAATA,GACxBC,EAAcC,KAAGC,UAAU,CAAEH,OAEnC,OADAI,QAAQC,IAAI,eAAgBL,GACrBJ,GAAOU,OAAO,SAAU,CAC7BlC,KAAM6B,KAKGM,GAAkB,SAAC,GAAY,IAAVP,EAAS,EAATA,GAC1BC,EAAcC,KAAGC,UAAU,CAAEH,OACnC,OAAOJ,GAAOU,OAAO,gBAAiB,CAAElC,KAAM6B,KAInCO,GAAa,SAAC,GAAY,IAAVR,EAAS,EAATA,GACrBC,EAAcC,KAAGC,UAAU,CAAEH,OACnC,OAAOJ,GAAOU,OAAO,QAAS,CAAElC,KAAM6B,KAkB3BQ,GAAW,SAACC,GAAD,OAAQd,GAAOe,IAAP,mBAAuBD,K,YCtDtCE,I,GAtBb3B,EAAyB,oB,qBAH3B4B,G,MACAC,G,MACAC,G,SAQE9B,EAAyB,oB,qBAH3B+B,G,MACAC,G,MACAC,G,MAGIC,GAAc,oBAEPC,GAAa3C,YAAa0C,IAI1BE,GAAY5C,YAAaoC,IACzBS,GAAY7C,YAAauC,IAAY,SAACN,GAAD,OAAQA,KAIpDa,GAAgBpC,EAAkB6B,GAAYQ,IAC9CC,GAAgBtC,EAAkB0B,ID9BhB,SAACa,GAAD,OAAoB9B,GAAOe,IAAP,aC+BrC,SAAUC,KAAV,iEACL,OADK,SACCe,YAAWX,GAAYO,IADxB,OAEL,OAFK,SAECI,YAAWd,GAAWY,IAFvB,wCAKP,I,GAyCeC,GA/BD7C,aAAa,kBAAC,GAEvBoC,IAAqB,SAACnC,EAAD,OAAmB4C,EAAnB,EAAU1C,QAAV,mBAAC,eAClBF,GADiB,IAEpB8C,UAAWF,EAAMtD,KACjBsD,aALqB,YAAC,GAOvBR,IAAqB,SAACpC,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eAClBF,GADiB,IAEpBa,aATqB,YAAC,GAWvBmB,IAAoB,SAAChC,EAAD,OAAmBX,EAAnB,EAAUa,QAAuBS,EAAjC,EAA2BC,KAA3B,mBAAC,eACjBZ,GADgB,IAEnBX,SACAC,KAAMD,EAAOC,KACbyD,SAAUC,SAASrC,EAASsC,QAAQ,aAAc,SAf7B,YAAC,GAmBvBhB,IAAoB,SAACjC,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACjBF,GADgB,IAEnBa,aArBqB,YAAC,GAuBvBwB,IAAc,SAACrC,EAAD,OAAmBkD,EAAnB,EAAUhD,QAAV,mBAAC,eACXF,GADU,IAEbkD,QAASA,OAzBY,IAVN,CACnB7D,OAAQ,KACRuD,MAAO,KACPtD,KAAM,KACNwD,UAAW,KACXjC,MAAO,KACPkC,SAAU,EACVG,QAAQ,IC9BGC,GAAS,kBAAMrC,GAAOe,IAAI,Y,YCa7BuB,I,YASOC,IA/BXC,GAAgB,qB,GAEwBnD,EAC5C,c,qBADKoD,G,MAAOC,G,MAAeC,G,MAGvBC,GAAS,cAEFC,GAAchE,YAAa2D,IAAe,SAACpE,GAAD,OAAUA,KACpD0E,GAAQjE,YAAa4D,IAAO,SAACrE,GAAD,OAAUA,KACtCiE,GAASxD,YAAa+D,IAE7BG,GAAYxD,EAAkBkD,IDLf,SAACrE,GAAD,OAAU4B,GAAOe,IAAP,yBAA6B3C,OCO5D,SAAS4E,KACP,IACExC,QAAQC,IAAI,SACZwC,aAAaC,WAAW,QACxB,MAAOC,GACP3C,QAAQC,IAAI,gCAIhB,SAAU6B,KAAV,iEAEI,OAFJ,kBAEU1C,YAAKwD,IAFf,OAGIH,aAAaC,WAAW,QAH5B,+CAKI1C,QAAQC,IAAR,MALJ,qDASO,SAAU8B,KAAV,iEACL,OADK,SACCR,YAAWU,GAAOM,IADnB,OAEL,OAFK,SAEChB,YAAWY,GAAeK,IAF3B,OAGL,OAHK,SAGCjB,YAAWa,GAAQN,IAHpB,wCAMP,IAMerD,gBAAa,kBAAC,GAExBuD,IAAgB,SAACtD,EAAD,OAAmBd,EAAnB,EAAUgB,QAAV,mBAAC,eACbF,GADY,IAEfd,YAJsB,YAAC,GAMxBsE,IAAgB,SAACxD,EAAD,OAAmBV,EAAnB,EAAUY,QAAV,mBAAC,eACbF,GADY,IAEfd,KAAMI,EAAKA,KAAK6E,OAAOC,SACvBC,WAAY,UATU,YAAC,GAWxBZ,IAAgB,SAACzD,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACbF,GADY,IAEfd,KAAM,KACNmF,WAAYxD,OAdU,YAAC,GAgBxB6C,IAAS,SAAC1D,GAAD,mBAAC,eACNA,GADK,IAERd,KAAM,UAlBgB,IANP,CACnBI,KAAM,KACNJ,KAAM,KACNmF,WAAY,OCZCC,GA7BS,WAAO,IAAD,EACWC,aAAY,gBAAGrF,EAAH,EAAGA,KAAM0D,EAAT,EAASA,MAAT,MAAsB,CACvE1D,KAAMA,EAAKA,KACXgE,OAAQN,EAAMM,OACd7D,OAAQuD,EAAMvD,OACdC,KAAMsD,EAAMtD,SAJNJ,EADoB,EACpBA,KAAMgE,EADc,EACdA,OAAQ7D,EADM,EACNA,OAAQC,EADF,EACEA,KAMxBkF,EAAWC,cAKjBC,qBAAU,WACRF,EAASjC,QACR,CAACiC,IAIJ,OACE,cAAC,EAAD,CACEtF,KAAMA,EACNC,SAba,WACfqF,EAASrB,OAaP/D,QAPY,WACdoF,EAASlC,GAAWY,KAOlB7D,OAAQA,EACRC,KAAMA,K,qdCzBZ,IAAMqF,GAAe9G,IAAOC,IAAV,MACd,SAACM,GAAD,OACAA,EAAMwG,cACNzG,YADA,QAQSV,EAAQC,KAAK,IAoBXmH,GARC,SAAC,GAA+B,EAA7B7G,SAA8B,IAApB4G,EAAmB,EAAnBA,aAC3B,OACE,cAACD,GAAD,CAAcC,aAAcA,EAA5B,SACE,2B,4PCzBY/G,IAAOC,IAAV,KAIFL,EAAQE,KAAK,GAIXF,EAAQE,KAAK,IAR5B,I,eCciBmH,I,GAPb3E,EAAyB,kB,qBAH3B4E,G,MACAC,G,MACAC,G,MAEIC,GAAc,mBAEPvD,GAAWhC,YAAaoF,IAAW,SAACnD,GAAD,OAAQA,KAC3CuD,GAAaxF,YAAauF,IAEjCE,GAAe/E,EAAkB0E,GAAWrC,IAC3C,SAAUoC,KAAV,iEACL,OADK,SACCjC,YAAWkC,GAAWK,IADvB,wCAIP,IAAMC,GAAe,CACnBC,KAAM,KACNhG,KAAM,KACNuB,MAAO,KACP0E,QAAS,MAmBID,GAhBFvF,aAAa,kBAAC,GAEtBiF,IAAoB,SAAChF,EAAD,OAAmBsF,EAAnB,EAAUpF,QAAV,mBAAC,eACjBF,GADgB,IAEnBV,KAAMgG,EAAKhG,KACXgG,YALoB,YAAC,GAOtBL,IAAoB,SAACjF,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACjBF,GADgB,IAEnBa,aAToB,YAAC,GAWtBqE,IAAc,kBAAMG,MAXC,IAaxBA,I,i4CCjCF,IAAMG,GAAgB3H,YAAOE,EAAPF,CAAH,MAIb4H,GAAyB5H,IAAOC,IAAV,MAMtB4H,GAAiB7H,IAAOC,IAAV,KAQQL,EAAQC,KAAK,GAQ1BD,EAAQC,KAAK,IAStBiI,GAAgB9H,IAAOC,IAAV,KAQSL,EAAQC,KAAK,GAQ1BD,EAAQC,KAAK,IAqCtBkI,IA5BY/H,IAAOC,IAAV,MA4BE,SAAC,GAAc,IAAZwH,EAAW,EAAXA,KACVO,EAAiBP,EAAjBO,aADqB,EAEDP,EAAKnB,OAAO2B,OAAO3B,OAAhCC,GAFc,EAErB2B,MAFqB,EAEd3B,UAFc,EAIckB,EAAKnB,OAAxC6B,EAJqB,EAIrBA,MAAgBC,GAJK,EAIdC,QAJc,EAILD,SAElBE,GANuB,EAIIC,MAEhBH,EAAQI,MAAM,MAE/B,OACE,eAACV,GAAD,WACE,6BACE,cAAC,IAAD,CAAMhH,GAAE,sBAAiB2G,EAAKpE,IAA9B,SAAqC8E,MAGvC,sDACS5B,EADT,uBACwB+B,EAAS,MAGjC,uBACA,0DAAcN,UA6DLS,gBAxDE,SAAC,GAYX,IAXL1D,EAWI,EAXJA,MAEA9C,GASI,EAVJT,OAUI,EATJS,SACAe,EAQI,EARJA,MACA0F,EAOI,EAPJA,gBAGAzD,GAII,EANJxD,KAMI,EALJkH,MAKI,EAJJ1D,WACA2D,EAGI,EAHJA,OAEAvH,GACI,EAFJoG,KAEI,EADJpG,MAGA,GAAI2B,EACF,OAAO,cAAC2E,GAAD,uEAKOxC,SAASe,aAAa2C,QAAQ,WAC9C,OACE,cAAChB,GAAD,UAYE,eAACF,GAAD,WACE,cAACC,GAAD,UACGc,GAAmBrH,EAClB,cAAC,EAAD,CAAQvB,MAAI,EAACgB,GAAE,iBAAY8H,GAA3B,oDAGE,QAIJ3G,GAAW8C,GACX,8BACGE,EAAU6D,KAAI,SAACrB,GAAD,OACb,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKpE,iBCpG/BoF,gBA9DW,SAAC,GAAkC,IAAhCE,EAA+B,EAA/BA,MAAOI,EAAwB,EAAxBA,QAAwB,KAAfC,SACfL,EAAMM,QAA5BL,EADoD,EACpDA,OACAjC,GAFoD,EAC5CuC,UACGtC,eAFyC,EAatDF,aAAY,gBAAG3B,EAAH,EAAGA,MAAO9C,EAAV,EAAUA,QAASZ,EAAnB,EAAmBA,KAAMoG,EAAzB,EAAyBA,KAAzB,MAAqC,CACnD1C,MAAOA,EAAMA,MACb/B,MAAO+B,EAAM/B,MACbf,QAASA,EAAQ,oBACjBZ,KAAMA,EAAKA,KACXI,KAAMsD,EAAMtD,KACZD,OAAQuD,EAAMvD,OACdiG,KAAMA,EAAKA,KACXC,QAASD,EAAKC,QACdzC,UAAWF,EAAME,cAlBjBF,EAJwD,EAIxDA,MACA/B,EALwD,EAKxDA,MACAf,EANwD,EAMxDA,QACAZ,EAPwD,EAOxDA,KACAI,EARwD,EAQxDA,KACAD,EATwD,EASxDA,OACAiG,EAVwD,EAUxDA,KAEAxC,GAZwD,EAWxDyC,QAXwD,EAYxDzC,WAkCF,OArBA4B,qBAAU,WACRF,EAASjC,QACR,CAACiC,IAEJE,qBAAU,gBACOsC,IAAXP,IACFA,EAAS,GAGXjC,EAAS7C,GAAS8E,IAClBjC,EAAShC,GAAUiE,MAClB,CAACjC,EAAUiC,IACd/B,qBAAU,WACR,GAAI+B,EACF,IACE1C,aAAakD,QAAQ,SAAUC,KAAK7F,UAAUoF,IAC9C,MAAOxC,GACP3C,QAAQC,IAAI,kCAGf,CAACqF,IAEF,cAAC,GAAD,CACEH,OAAQA,EACR3G,QAASA,EACTe,MAAOA,EACPxB,OAAQA,EACRuD,MAAOA,EACPtD,KAAMA,EACNgG,KAAMA,EACNpG,KAAMA,EACN4D,UAAWA,EACXyD,gBAAiBrH,O,0RC3DvB,IAAMiI,GAAkBtJ,IAAOC,IAAV,MAQfsJ,GAAavJ,IAAOC,IAAV,MAEVuJ,GAAY,SAAC,GAA6B,IAA3BjD,EAA0B,EAA1BA,SAAUkD,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,KAC5BC,EAAQpG,KAAGC,UAAU,CAAEiG,MAAKC,SAClC,OAAOnD,EAAQ,YAAQA,EAAR,YAAoBoD,GAApB,YAAmCA,IA6BrCC,GA1BI,SAAC,GAAuC,IAArCF,EAAoC,EAApCA,KAAMxE,EAA8B,EAA9BA,SAAUqB,EAAoB,EAApBA,SAAUkD,EAAU,EAAVA,IAC9C,OACE,eAACH,GAAD,WACE,cAAC,EAAD,CACEO,SAAmB,IAATH,EACV5I,GACW,IAAT4I,OAAaP,EAAYK,GAAU,CAAEjD,WAAUkD,MAAKC,KAAMA,EAAO,IAHrE,0BAQA,cAACH,GAAD,UAAaG,IACb,cAAC,EAAD,CACEG,SAAUH,IAASxE,EACnBpE,GACE4I,IAASxE,OACLiE,EACAK,GAAU,CAAEjD,WAAUkD,MAAKC,KAAMA,EAAO,IALhD,8BCDSjB,gBAzBa,SAAC,GAAkB,IAAhBO,EAAe,EAAfA,SAAe,EACPtC,aAAY,gBAAG3B,EAAH,EAAGA,MAAO9C,EAAV,EAAUA,QAAV,MAAyB,CACxEiD,SAAUH,EAAMG,SAChBH,MAAOA,EAAMA,MACb9C,QAASA,EAAQ,wBAHXiD,EADoC,EACpCA,SAAUH,EAD0B,EAC1BA,MAAO9C,EADmB,EACnBA,QAOzB,IAAK8C,GAAS9C,EAAS,OAAO,KARc,MAWRsB,KAAGuG,MAAMd,EAASe,OAAQ,CAC5DC,mBAAmB,IADbP,EAXoC,EAWpCA,IAAKlD,EAX+B,EAW/BA,SAX+B,IAWrBmD,YAXqB,MAWd,EAXc,EAe5C,OACE,cAAC,GAAD,CACED,IAAKA,EACLlD,SAAUA,EACVmD,KAAMvE,SAASuE,EAAM,IACrBxE,SAAUA,O,wHCvBClF,IAAOC,IAAV,MAAd,I,eCiEiBgK,I,GAzDb3H,EAAyB,qB,qBAH3B4H,G,MACAC,G,MACAC,G,SAME9H,EAAyB,uB,qBAH3B+H,G,MACAC,G,MACAC,G,MAEIC,GAAiB,sB,GAMnBlI,EAAyB,uB,qBAH3BmI,G,MACAC,G,MACAC,G,SAOErI,EAAyB,uB,qBAH3BsI,G,MACAC,G,MACAC,G,SAOExI,EAAyB,yB,qBAH3ByI,G,MACAC,G,MACAC,G,MAGW7H,GAAgBtB,YAAauI,IAAgB,kBAAa,CAAEhH,GAAf,EAAGA,OAChD6H,GAAcpJ,YAAaoI,IAAc,SAACnG,GAAD,OAAQA,KACjDoH,GAAgBrJ,YAAa0I,IAC7BY,GAAgBtJ,YAAa2I,IAAgB,SAAC1G,GAAD,OAAQA,KACrDsH,GAAgBvJ,YAC3B8I,IACA,kBAAsB,CAAEvH,GAAxB,EAAGA,GAAyBgF,QAA5B,EAAOA,YAEIiD,GAAkBxJ,YAC7BiJ,IACA,kBAAsB,CAAE1H,GAAxB,EAAGA,GAAyBgF,QAA5B,EAAOA,YAGHkD,GAAkB/I,EAAkB0H,IbgCf,SAACnG,GAAD,OAAQd,GAAOe,IAAP,oBAAwBD,Oa/BrDyH,GAAoBhJ,EACxB6H,GACAxF,IAEI4G,GAAoBjJ,EACxBiI,Ib6B0B,SAAC1G,GAAD,OAAQd,GAAOe,IAAP,2BAA+BD,Oa1B7D2H,GAAoBlJ,EACxBoI,IbxB2B,SAAC,GAAqB,IAAnBvH,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC5B/E,EAAcC,KAAGC,UAAU,CAC/BH,KACAgF,YAEF,OAAOpF,GAAOL,IAAI,SAAUU,MasBxBqI,GAAsBnJ,EAC1BuI,IbpB6B,SAAC,GAAqB,IAAnB1H,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC9BuD,EAAarI,KAAGC,UAAU,CAC9BH,KACAgF,YAEF,OAAOpF,GAAOL,IAAI,gBAAiBgJ,MamB9B,SAAU3B,KAAV,iEACL,OADK,SACCjF,YAAWkF,GAAcqB,IAD1B,OAEL,OAFK,SAECvG,YAAWqF,GAAgBmB,IAF5B,OAGL,OAHK,SAGCxG,YAAWyF,GAAgBgB,IAH5B,OAIL,OAJK,SAICzG,YAAW4F,GAAgBc,IAJ5B,OAKL,OALK,UAKC1G,YAAW+F,GAAkBY,IAL9B,yCAQP,IAAMnE,GAAe,CACnBqE,QAAS,KACTC,UAAW,KACXrK,KAAM,GACNsK,cAAe,GACf/I,MAAO,MAsDMyE,GAnDFvF,aAAa,kBAAC,GAEtBiI,IAAuB,SAAChI,EAAD,OAAmB0J,EAAnB,EAAUxJ,QAAV,mBAAC,eACpBF,GADmB,IAEtBV,KAAMoK,EAAQpK,KACdoK,eALoB,YAAC,GAOtBzB,IAAuB,SAACjI,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACpBF,GADmB,IAEtBa,aAToB,YAAC,GAWtBsH,IAAyB,SAACnI,EAAD,OAAmB0J,EAAnB,EAAUxJ,QAAV,mBAAC,eACtBF,GADqB,IAExB0J,eAboB,YAAC,GAetBtB,IAAyB,SAACpI,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACtBF,GADqB,IAExBa,aAjBoB,YAAC,GAmBtB0H,IAA0B,SAACvI,EAAD,OAAmB2J,EAAnB,EAAUzJ,QAAV,mBAAC,eACvBF,GADsB,IAEzB4J,cAAeD,EAAUrK,KACzBqK,iBAtBoB,YAAC,GAwBtBnB,IAAyB,SAACxI,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACtBF,GADqB,IAExBa,aA1BoB,YAAC,GA4BtB6H,IAA0B,SAAC1I,EAAD,OAAmB0J,EAAnB,EAAUxJ,QAAV,mBAAC,eACvBF,GADsB,IAGzB0J,eA/BoB,YAAC,GAiCtBf,IAAyB,SAAC3I,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACtBF,GADqB,IAExBa,aAnCoB,YAAC,GAqCtBgI,IAA4B,SAAC7I,EAAD,OAAmB2J,EAAnB,EAAUzJ,QAAV,mBAAC,eACzBF,GADwB,IAG3B2J,iBAxCoB,YAAC,GA0CtBb,IAA2B,SAAC9I,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACxBF,GADuB,IAE1Ba,aA5CoB,YAAC,GA8CtBwH,IAAiB,kBAAMhD,MA9CF,IAgDxBA,I,+hCC/HF,IAAMwE,GAAiBhM,IAAOiM,KAAV,MAcdC,GAAelM,IAAOU,OAAV,KAKPd,EAAQC,KAAK,GASND,EAAQC,KAAK,GAClBD,EAAQE,KAAK,IAOpBqM,GAAQnM,IAAOoM,MAAV,MA8GIC,GAhGW,SAAC,GAKpB,IAJLP,EAII,EAJJA,UAEAzK,GAEI,EAHJiL,YAGI,EAFJjL,MACAkL,EACI,EADJA,kBAEQC,EAAUV,EAAUxF,OAApBkG,MAEAjG,EAAauF,EAAUxF,OAAO2B,OAAO3B,OAArCC,SACAlD,EAAOyI,EAAPzI,GAJJ,EAKoBoJ,mBAAS,IAL7B,mBAKGC,EALH,KAKSC,EALT,OAMoBF,oBAAS,GAN7B,mBAMGG,EANH,KAMSC,EANT,OAOkBJ,oBAAS,GAP3B,mBAOGK,EAPH,KAOQC,EAPR,KA4BEC,EAAe3L,IAASkF,EA5B1B,EA8ByBuF,EAAUxF,OAA/B8B,EA9BJ,EA8BIA,QAASC,EA9Bb,EA8BaA,QACXC,EAAWF,EAAQI,MAAM,KAEzByE,EAAQ,wCAAG,sBAAAC,EAAA,sDACf,IACEtJ,GAAgB,CAAEP,OAClB0J,GAAO,GACP,MAAO3G,GACP3C,QAAQC,IAAI0C,GALC,2CAAH,qDAQd,OACE,mCACG0G,GACC,gCAEE,0CACSxE,EAAS,GADlB,cACiC/B,KAEjC,uBAECqG,GACC,uBAAMO,SAvCC,SAAC/G,IAChBA,EAAEgH,iBAEW,KAATV,IAMJH,EAAkB,CAAElJ,KAAIgF,QAFRqE,EAEiBW,aADZb,IAErBG,EAAQ,IACRE,GAASD,IAPPU,MAAM,6DAmCA,UACE,cAACnB,GAAD,CAAOoB,MAAOb,EAAMc,SA5Cf,SAACpH,GAChBuG,EAAQvG,EAAEqH,OAAOF,UA4CP,eAACvB,GAAD,WACE,cAACE,GAAD,CAAc3J,KAAM,SAApB,0BACA,cAAC2J,GAAD,CAAc3K,QAAS,kBAAMsL,GAASD,IAAtC,gCAILA,GACC,gCACE,cAACZ,GAAD,UAAiB3D,IAEhB2E,EACC,mCACE,cAAChB,GAAD,UACE,gCACE,cAACE,GAAD,CACE3K,QAAS,WACPsL,GAASD,GACTD,EAAQtE,IAHZ,0BAQA,cAAC6D,GAAD,CAAc3K,QAAS0L,EAAvB,iCAKN,oD,orDCxIhB,IAAMS,GAAe1N,IAAOC,IAAV,MA2BZkM,GAAQnM,IAAOoM,MAAV,MAcLvL,GAASb,IAAOU,OAAV,KAUId,EAAQE,KAAK,GAEXF,EAAQE,KAAK,IAIzB6N,GAAU3N,IAAOU,OAAV,KAWGd,EAAQE,KAAK,GAEXF,EAAQE,KAAK,IAGzB8N,GAAiB5N,IAAOC,IAAV,MAoIL4N,GA5HW,SAAC,GASpB,IARLhC,EAQI,EARJA,QAEAiC,GAMI,EAPJxB,YAOI,EANJwB,WACA/B,EAKI,EALJA,cACAgC,EAII,EAJJA,iBACAC,EAGI,EAHJA,cACAzB,EAEI,EAFJA,kBACAlL,EACI,EADJA,KAEQgC,EAAOwI,EAAPxI,GACA4K,EAAwBpC,EAAxBoC,oBAFJ,EAIiBxB,oBAAS,GAJ1B,mBAIGyB,EAJH,KAIQC,EAJR,OAKqB1B,oBAAS,GAL9B,mBAKG2B,EALH,KAKUC,EALV,OAMoB5B,mBAAS,IAN7B,mBAMGC,EANH,KAMSC,EANT,KAaE2B,EAAa,SAAClI,GAClBA,EAAEgH,iBAEFW,EAAiB,CAAE1K,KAAIgF,QADPqE,IAEhBC,EAAQ,KAEJa,EAAW,SAACpH,GAChBuG,EAAQvG,EAAEqH,OAAOF,QAEbhM,EAAU,WACd4M,GAAOD,GAEPJ,EAAU,CAAE/J,GADHV,KAeX,OACE,qCACE,mCACE,eAACqK,GAAD,WACGQ,EACC,cAAC,KAAD,CACE3M,QAASA,EACTgN,MAAM,YAGR,cAAC,KAAD,CACEhN,QAASA,EACTgN,MAAM,YAITL,EACC,sBAAM3M,QAASA,EAAf,gCAEA,8BAC2B,IAAxB0M,EACC,sBAAM1M,QAASA,EAAf,uCAEA,uBAAMA,QAASA,EAAf,UAAyB0M,EAAzB,sCAMV,uBACCC,GAA+B,IAAxBD,EACN,uBAAMd,SAAUmB,EAAhB,UACE,cAAC,GAAD,CACE/L,KAAK,OACLgL,MAAOb,EACP8B,YAAY,oDACZhB,SAAUA,IAEZ,cAAC,GAAD,CAAQjL,KAAM,SAAUhB,QA3CjB,WAEbyM,EAAc,CAAEjK,GADPV,KA0CH,6BAIA,KACH6K,GAA+B,IAAxBD,GACN,qCACE,cAACL,GAAD,UACG7B,EAAcjD,KAAI,SAACgD,GAAD,OACjB,cAAC,GAAD,CAEEA,UAAWA,EACXzK,KAAMA,EACNkL,kBAAmBA,GAHdT,EAAUzI,SAOpBhC,GACC,cAACsM,GAAD,CAASpM,QApEF,WACf8M,GAASD,IAmED,SACGA,EAAQ,qBAAQ,6BAGpBA,GACC,uBAAMjB,SAAUmB,EAAhB,UACE,cAAC,GAAD,CACE/L,KAAK,OACLgL,MAAOb,EACP8B,YAAY,oDACZhB,SAAUA,IAEZ,cAAC,GAAD,CAAQjL,KAAM,SAAd,oC,66BCnMd,IAAMkM,GAAezO,IAAOiM,KAAV,MAaZC,GAAelM,IAAOU,OAAV,KAGPgO,EAAQ7O,KAAK,GAON6O,EAAQ7O,KAAK,GAClB6O,EAAQ5O,KAAK,IAOpBqM,GAAQnM,IAAOoM,MAAV,MAoIIuC,GAtHS,SAAC,GAYlB,IAXL9C,EAWI,EAXJA,QAEAxK,GASI,EAVJ4L,SAUI,EATJ5L,MACAyM,EAQI,EARJA,UACA/B,EAOI,EAPJA,cACAgC,EAMI,EANJA,iBACAC,EAKI,EALJA,cACAY,EAII,EAJJA,WAEAC,GAEI,EAHJ9F,QAGI,EAFJ8F,iBACAtC,EACI,EADJA,kBACI,EACoBE,mBAAS,IAD7B,mBACGC,EADH,KACSC,EADT,OAEoBF,oBAAS,GAF7B,mBAEGG,EAFH,KAESC,EAFT,OAGkBJ,oBAAS,GAH3B,mBAGGK,EAHH,KAGQC,EAHR,OAI4BN,mBAAS,IAJrC,gCAKyBZ,EAAQvF,QAA7B8B,EALJ,EAKIA,QAASC,EALb,EAKaA,QACT9B,EAAasF,EAAQvF,OAAO2B,OAAO3B,OAAnCC,SAEAlD,EAAOwI,EAAPxI,GAIFyL,EAAe,wCAAG,sBAAA5B,EAAA,+EAEd9J,GAAc,CAAEC,OAFF,OAGpB0J,GAAO,GAHa,+CAKpBtJ,QAAQC,IAAR,MALoB,wDAAH,qDAwBfqL,EAAWH,EAAWrI,GAEtB+B,EAAWF,EAAQI,MAAM,KAC/B,OACE,mCACGsE,GACC,gCAEE,0CACSxE,EAAS,GADlB,cACiC/B,KAEjC,uBAECqG,GACC,uBAAMO,SA1BC,SAAC/G,GAChBA,EAAEgH,iBAEW,KAATV,GALJmC,EAAgB,CAAExL,KAAIgF,QADNqE,IAWhBC,EAAQ,IACRE,GAASD,IALPU,MAAM,6DAsBA,UACE,cAAC,GAAD,CAAOC,MAAOb,EAAMc,SA1Cf,SAACpH,GAChBuG,EAAQvG,EAAEqH,OAAOF,UA0CP,cAACkB,GAAD,UACE,gCACE,cAAC,GAAD,CAAclM,KAAM,SAApB,0BACA,cAAC,GAAD,CAAchB,QAAS,kBAAMsL,GAASD,IAAtC,kCAOPA,GACC,gCACE,cAAC6B,GAAD,UAA0BpG,IAEzB0G,EACC,mCACE,cAACN,GAAD,UACE,gCACE,cAAC,GAAD,CACElN,QAAS,WACPsL,GAASD,GACTD,EAAQtE,IAHZ,0BAQA,cAAC,GAAD,CAAc9G,QAASuN,EAAvB,iCAON,8CAKN,cAAC,GAAD,CACEjD,QAASA,EACTiC,UAAWA,EACX/B,cAAeA,EACfgC,iBAAkBA,EAClBC,cAAeA,EACf3M,KAAMA,EACNkL,kBAAmBA,IAErB,6B,88BC7JV,I,GAAMJ,GAAQnM,IAAOoM,MAAV,MAcLvL,GAASb,IAAOU,OAAV,KASId,EAAQE,KAAK,GAEXF,EAAQE,KAAK,IAIzBkP,GAAWhP,IAAOC,IAAV,KACeL,EAAQC,KAAK,IAUpCoP,GAAkBjP,YAAOE,EAAPF,CAAH,MAsENkP,GAlES,SAAC,GAalB,IAZL7N,EAYI,EAZJA,KAEAI,GAUI,EAXJoK,QAWI,EAVJpK,MACA0N,EASI,EATJA,UACAlC,EAQI,EARJA,SACAa,EAOI,EAPJA,UACA/B,EAMI,EANJA,cACAgC,EAKI,EALJA,iBACAC,EAII,EAJJA,cACAY,EAGI,EAHJA,WACAC,EAEI,EAFJA,gBACAtC,EACI,EADJA,kBACI,EACuBE,mBAAS,IADhC,mBACGpE,EADH,KACYsE,EADZ,KAcJ,OACE,cAACsC,GAAD,UACE,eAACD,GAAD,WACE,uBAAM7B,SAfK,SAAC/G,GAChBA,EAAEgH,iBACc,KAAZ/E,GAIJ8G,EAAU,CAAE9G,YACZsE,EAAQ,KAJNW,MAAM,6DAYJ,UACE,cAAC,GAAD,CACE/K,KAAK,OACLgL,MAAOlF,EACPmG,YAAY,oDACZhB,SAXO,SAACpH,GAChBuG,EAAQvG,EAAEqH,OAAOF,UAYX,cAAC,GAAD,CAAQzN,MAAI,EAACyC,KAAM,SAAnB,6BAIF,uBACA,uBAEA,8BACGd,EAAKqH,KAAI,SAAC+C,GAAD,OACR,cAAC,GAAD,CAEEA,QAASA,EACToB,SAAUA,EACVa,UAAWA,EACX/B,cAAeA,EACfgC,iBAAkBA,EAClBC,cAAeA,EACfY,WAAYA,EACZvN,KAAMA,EACNwN,gBAAiBA,EACjBtC,kBAAmBA,GAVdV,EAAQxI,e,YClCV+L,IAvDXC,GAAa,0BACbC,GAAe,4B,GAKjBhN,EAAyB,8B,qBAH3BiN,G,MACAC,G,MACAC,G,SAMEnN,EAAyB,gC,qBAH3BoN,G,MACAC,G,MACAC,G,MAWWC,GAAa/N,YAAauN,IAK1BS,IAJchO,YAAawN,IAAc,kBAAqB,CACzES,IADoD,EAAGA,IAEvDxC,MAFoD,EAAQA,UAIlCzL,YAAayN,IAAe,kBAAsB,CAC5ElM,GADsD,EAAGA,GAEzDgF,QAFsD,EAAOA,aAIlD2H,GAAiBlO,YAC5B4N,IACA,kBAAsB,CACpBrM,GADF,EAAGA,GAEDgF,QAFF,EAAOA,YAcH4H,IAT4BnO,YAxBL,qCA0B3B,SAAC2F,GAAD,OAAUA,KAOajF,EACvB+M,IlBtC0B,SAAC,GAAqB,IAAnBlM,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC3B/E,EAAcC,KAAGC,UAAU,CAC/BH,KACAgF,YAGF,OADA5E,QAAQC,IAAcJ,GACfL,GAAOwE,KAAK,SAAUnE,OkBoCzB4M,GAAqB1N,EACzBkN,IlBa4B,SAAC,GAAqB,IAAnBrM,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC7B/E,EAAcC,KAAGC,UAAU,CAC/BH,KACAgF,YAEF,OAAOpF,GAAOwE,KAAP,2BAAgCpE,GAAMC,MkBfxC,SAAU8L,KAAV,iEACL,OADK,SACCpK,YAAWuK,GAAeU,IAD3B,OAEL,OAFK,SAECjL,YAAW0K,GAAiBQ,IAF7B,wCAMP,IAAM1I,GAAe,CACnBnE,GAAI,EACJgF,QAAS,MACTZ,KAAM,KACN0I,cAAe,KACfC,aAAc,MAsDDC,GAnDMnO,aAAa,kBAAC,GAE9BmN,IAAa,SAAClN,GAAD,OAAWqF,MAFK,YAAC,GAG9B8H,IAAe,SAACnN,EAAD,WAAUE,QAAW0N,EAArB,EAAqBA,IAAKxC,EAA1B,EAA0BA,MAA1B,mBAAC,eACZpL,GADW,kBAEb4N,EAAMxC,OALqB,YAAC,GAO9BgC,IAAgB,SAACpN,GAAD,mBAAC,eACbA,GADY,IAGfsF,KAAM,KACN6I,UAAW,UAXiB,YAAC,GAc9Bd,IAAwB,SAACrN,EAAD,OAAmBsF,EAAnB,EAAUpF,QAAV,mBAAC,eACrBF,GADoB,IAEvBsF,YAhB4B,YAAC,GAmB9BgI,IAAwB,SAACtN,EAAD,OAAmBiO,EAAnB,EAAU/N,QAAV,mBAAC,eACrBF,GADoB,IAEvBiO,oBArB4B,YAAC,GAuB9BT,IAA0B,SAACxN,EAAD,OAAmBsF,EAAnB,EAAUpF,QAAV,mBAAC,eACvBF,GADsB,IAEzBsF,YAzB4B,YAAC,GA4B9BmI,IAA0B,SAACzN,EAAD,OAAmBiO,EAAnB,EAAU/N,QAAV,mBAAC,eACvBF,GADsB,IAEzBiO,oBA9B4B,IAgDhC5I,ICfaiB,gBA5Fc,SAAC,GAAe,IAAbE,EAAY,EAAZA,MAAY,EACjB8D,oBAAS,GADQ,mBAC5B8D,GAD4B,WAElC3H,EAAWD,EAAMM,OAAjBL,OAFkC,EAGkBlC,aAC1D,gBAAGmF,EAAH,EAAGA,QAASxK,EAAZ,EAAYA,KAAMgP,EAAlB,EAAkBA,aAAlB,MAAsC,CACpCxE,QAASA,EAAQA,QACjBpK,KAAMoK,EAAQpK,KACdJ,KAAMA,EAAKA,KACXgH,QAASgI,EAAahI,QACtBhF,GAAIuF,EACJmD,cAAeF,EAAQE,kBAPnBF,EAHkC,EAGlCA,QAASpK,EAHyB,EAGzBA,KAAMJ,EAHmB,EAGnBA,KAAMgH,EAHa,EAGbA,QAAShF,EAHI,EAGJA,GAAI0I,EAHA,EAGAA,cAWpCpF,EAAWC,cACjBC,qBAAU,WAMR,OAHAF,EAASkJ,MAETlJ,EAASuE,GAAYtC,IACd,WACLjC,EAASkJ,MACTlJ,EAASwE,SAEV,CAACxE,EAAUtD,EAAIgF,EAASO,IA+C3B,OACE,cAAC,GAAD,CACEiD,QAASA,EAETsD,UAzCc,SAAC,GAAiB,IAAf9G,EAAc,EAAdA,QACnB1B,EAASmJ,GAAa,CAAEzM,KAAIgF,aAG5B1B,EAASuE,GADE7H,KAuCT4J,SAzBa,SAAC,GAAY,IAAV5J,EAAS,EAATA,GAClBsD,EAASvD,GAAc,CAAEC,SAyBvBuF,OAAQA,EACRnH,KAAMA,EACNJ,KAAMA,EACN2M,cAtDkB,SAAC,GAAY,IAAVjK,EAAS,EAATA,GACvB4C,EAASuE,GAAYnH,KAsDnBgI,cAAeA,EACfgC,iBAzCqB,SAAC,GAAqB,IAAnB1K,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC9B1B,EAASqJ,GAAe,CAAE3M,KAAIgF,aAC9B,IAAMtE,EAAKV,EACXsD,EAASuE,GAAYtC,IACrBjC,EAASyE,GAAcrH,IACvB4C,EAASyE,GAAcrH,KAqCrB+J,UArDc,SAAC,GAAY,IAAV/J,EAAS,EAATA,GACnB4C,EAASyE,GAAcrH,KAqDrB6K,WA7Be,SAAChG,GAClB,GAAIA,IAAWvH,EAEb,OADAkP,GAAQ,IACD,GA2BP1B,gBAvBoB,SAAC,GAAqB,IAAnBxL,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC7B1B,EAAS0E,GAAc,CAAEhI,KAAIgF,aAC7B1B,EAASuE,GAAYtC,KAsBnB2D,kBAnBsB,SAAC,GAAmC,IAAjClJ,EAAgC,EAAhCA,GAAIgF,EAA4B,EAA5BA,QAASgF,EAAmB,EAAnBA,aACxC1G,EAAS2E,GAAgB,CAAEjI,KAAIgF,aAC/B1B,EAASyE,GAAciC,UCvEZmD,GAVM,WACnB,OACE,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,Q,opBCLN,I,GAAMC,GAAoBzQ,IAAOC,IAAV,KAMPL,EAAQC,KAAK,IASvB6Q,GAAW1Q,IAAOC,IAAV,MA4BC0Q,GAbM,SAAC,GAAkB,IAAhBxQ,EAAe,EAAfA,SACtB,OACE,cAACsQ,GAAD,UACE,eAACC,GAAD,WACE,qBAAKhP,UAAU,YAAf,SACE,cAAC,IAAD,CAAMZ,GAAG,WAAT,wBAEDX,Q,qBCAQyQ,IApCXtB,GAAe,oBACfuB,GAAkB,uB,GAE+BvO,EACrD,iB,qBADKwO,G,MAAUC,G,MAAkBC,G,SAIW1O,EAC5C,c,qBADK2O,G,MAAOC,G,MAAeC,G,MAIhBC,GAActP,YACzBwN,IACA,kBAA2B,CACzB+B,KADF,EAAGA,KAEDtB,IAFF,EAASA,IAGPxC,MAHF,EAAcA,UAMH+D,GAAiBxP,YAAa+O,IAAiB,SAACQ,GAAD,OAAUA,KACzDE,GAAWzP,YACtBgP,IACA,kBAAoC,CAClCvK,SADF,EAAGA,SAED2B,MAFF,EAAaA,MAGXsJ,SAHF,EAAoBA,aAMTC,GAAQ3P,YAAamP,IAAO,kBAA6B,CACpE1K,SADuC,EAAGA,SAE1CiL,SAFuC,EAAaA,aAMhDE,GAAelP,EAAkBsO,IpBrCf,SAAC,GAAD,IAAGvK,EAAH,EAAGA,SAAU2B,EAAb,EAAaA,MAAOsJ,EAApB,EAAoBA,SAApB,OACtBvO,GAAOwE,KAAK,YAAalE,KAAGC,UAAU,CAAE+C,WAAU2B,QAAOsJ,iBoBqCrDG,GAAYnP,EAAkByO,IpBlCf,SAAC,GAAD,IAAG1K,EAAH,EAAGA,SAAUiL,EAAb,EAAaA,SAAb,OACnBvO,GAAOwE,KAAK,SAAUlE,KAAGC,UAAU,CAAE+C,WAAUiL,iBoBkC1C,SAAUZ,KAAV,iEACL,OADK,SACC5L,YAAW8L,GAAUY,IADtB,OAEL,OAFK,SAEC1M,YAAWiM,GAAOU,IAFnB,wCAKP,IAAMnK,GAAe,CACnB+J,SAAU,CACRhL,SAAU,GACViL,SAAU,GACVtJ,MAAO,GACP0J,gBAAiB,IAEnBH,MAAO,CACLlL,SAAU,GACViL,SAAU,IAEZK,KAAM,KACNC,QAAS,KACTC,UAAW,MAyCEF,GAtCF3P,aAAa,kBAAC,GAEtBoN,IAAe,SAACnN,EAAD,WAAUE,QAAWgP,EAArB,EAAqBA,KAAMtB,EAA3B,EAA2BA,IAAKxC,EAAhC,EAAgCA,MAAhC,OACdyE,aAAQ7P,GAAO,SAAC8P,GACdA,EAAMZ,GAAMtB,GAAOxC,QAJD,YAAC,GAMtBsD,IAAkB,SAAC1O,EAAD,SAAmBkP,EAAnB,EAAUhP,QAAV,mBAAC,eACfF,GADc,uBAEhBkP,EAAO7J,GAAa6J,IAFJ,qBAGX,MAHW,0BAIN,MAJM,OANG,YAAC,GAatBN,IAAmB,SAAC5O,EAAD,OAAmB0P,EAAnB,EAAUxP,QAAV,mBAAC,eAChBF,GADe,IAElB4P,UAAW,KACXF,YAhBoB,YAAC,GAmBtBb,IAAmB,SAAC7O,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eAChBF,GADe,IAElB4P,UAAW/O,OArBS,YAAC,GAwBtBkO,IAAgB,SAAC/O,EAAD,OAAmB0P,EAAnB,EAAUxP,QAAV,mBAAC,eACbF,GADY,IAEf4P,UAAW,KACXF,YA3BoB,YAAC,GA8BtBV,IAAgB,SAAChP,EAAD,OAAmBa,EAAnB,EAAUX,QAAV,mBAAC,eACbF,GADY,IAEf4P,UAAW/O,OAhCS,IAmCxBwE,I,s6BC7FF,IAAM0K,GAAgBlS,IAAOC,IAAV,KAGNL,EAAQC,KAAK,IAMpBsS,GAAcnS,IAAOoM,MAAV,KAGYxM,EAAQC,KAAK,GAMXD,EAAQC,KAAK,IAStCuS,GAASpS,IAAOC,IAAV,KAICL,EAAQC,KAAK,GAGXD,EAAQC,KAAK,IAMtBwS,GAAerS,IAAOC,IAAV,MAOZqS,GAAsBtS,YAAOa,EAAPb,CAAH,MAInBuS,GAAU,CACdd,MAAO,qBACPF,SAAU,4BA6DGiB,GA1DE,SAAC,GAA+C,IAA7CjQ,EAA4C,EAA5CA,KAAM8O,EAAsC,EAAtCA,KAAM7D,EAAgC,EAAhCA,SAAUL,EAAsB,EAAtBA,SAAUnK,EAAY,EAAZA,MAC5C0J,EAAO6F,GAAQhQ,GAErB,OACE,eAAC2P,GAAD,WACE,6BAAKxF,IACL,uBAAMS,SAAUA,EAAhB,UACE,cAACgF,GAAD,CACEM,aAAa,WACbC,KAAK,WACLlE,YAAY,qBACZhB,SAAUA,EACVD,MAAO8D,EAAK9K,WAEd,cAAC4L,GAAD,CACEM,aAAa,eACbC,KAAK,WACLlE,YAAY,2BACZjM,KAAK,WACLiL,SAAUA,EACVD,MAAO8D,EAAKG,WAEJ,aAATjP,GACC,cAAC4P,GAAD,CACEM,aAAa,eACbC,KAAK,kBACLlE,YAAY,wCACZjM,KAAK,WACLiL,SAAUA,EACVD,MAAO8D,EAAKO,kBAGN,aAATrP,GACC,cAAC4P,GAAD,CACEM,aAAa,QACbC,KAAK,QACLlE,YAAY,kCACZjM,KAAK,QACLiL,SAAUA,EACVD,MAAO8D,EAAKnJ,QAGflF,GAAS,cAACqP,GAAD,UAAerP,IACzB,cAACsP,GAAD,CAAqBxS,MAAI,EAACU,WAAS,EAAnC,SACGkM,OAGL,cAAC0F,GAAD,UACY,UAAT7P,EACC,cAAC,IAAD,CAAMzB,GAAG,YAAT,sCAEA,cAAC,IAAD,CAAMA,GAAG,SAAT,sCC/BK2H,gBA5EG,SAAC,GAAiB,IAAfM,EAAc,EAAdA,QAAc,EACP0D,mBAAS,MADF,mBAC1BzJ,EAD0B,KACnB2P,EADmB,KAE3BhM,EAAWC,cAFgB,EAGmBF,aAClD,gBAAGmL,EAAH,EAAGA,KAAMxQ,EAAT,EAASA,KAAT,MAAqB,CACnBgQ,KAAMQ,EAAKJ,MACXI,KAAMA,EAAKA,KACXE,UAAWF,EAAKE,UAChBvL,WAAYnF,EAAKmF,WACjBxD,MAAO3B,EAAK2B,MACZ3B,KAAMA,EAAKA,SAPPgQ,EAHyB,EAGzBA,KAAMQ,EAHmB,EAGnBA,KAAME,EAHa,EAGbA,UAAW1Q,EAHE,EAGFA,KAHE,EAGImF,WA8DrC,OAhCAK,qBAAU,WACRF,EAAS2K,GAAe,YACvB,CAAC3K,IAEJE,qBAAU,WACR,GAAIkL,EAIF,OAHAtO,QAAQC,IAAI,6BACZD,QAAQC,IAAIqO,QACZY,EAAS,mCAGX,GAAId,EAAM,CAAC,IACDtL,EAAa8K,EAAb9K,SACR9C,QAAQC,IAAI,mCACZiD,EAASZ,GAAMQ,OAEhB,CAACsL,EAAME,EAAWpL,EAAU0K,IAE/BxK,qBAAU,WACR,GAAIxF,EAAM,CACR0H,EAAQ6J,KAAK,KACb,IACE1M,aAAakD,QAAQ,OAAQC,KAAK7F,UAAUnC,IAC5CoC,QAAQC,IAAI,eACZ,MAAO0C,GACP3C,QAAQC,IAAI,+BAGdD,QAAQC,IAAI,OAAQrC,MAErB,CAAC0H,EAAS8I,EAAMR,EAAMhQ,EAAMsF,IAG7B,cAAC,GAAD,CACEpE,KAAK,QACL8O,KAAMA,EACN7D,SAvDa,SAACpH,GAAO,IAAD,EACEA,EAAEqH,OAAlBF,EADc,EACdA,MAAOmF,EADO,EACPA,KACf/L,EACEyK,GAAY,CACVC,KAAM,QACNtB,IAAK2C,EACLnF,YAkDFJ,SA5Ca,SAAC/G,GAChBA,EAAEgH,iBADoB,IAEd7G,EAAuB8K,EAAvB9K,SAAUiL,EAAaH,EAAbG,SAClB7K,EAAS8K,GAAM,CAAElL,WAAUiL,eA0CzBxO,MAAOA,OCjEE6P,GARG,WAChB,OACE,cAAC,GAAD,UACE,cAAC,GAAD,OC2FSpK,gBA5FM,SAAC,GAAiB,IAAfM,EAAc,EAAdA,QAAc,EACV0D,mBAAS,MADC,mBAC7BzJ,EAD6B,KACtB2P,EADsB,KAE9BhM,EAAWC,cAFmB,EAGIF,aAAY,gBAAGmL,EAAH,EAAGA,KAAMxQ,EAAT,EAASA,KAAT,MAAqB,CACvEgQ,KAAMQ,EAAKN,SACXM,KAAMA,EAAKA,KACXE,UAAWF,EAAKE,UAChB1Q,KAAMA,EAAKA,SAJLgQ,EAH4B,EAG5BA,KAAMQ,EAHsB,EAGtBA,KAAME,EAHgB,EAGhBA,UAAW1Q,EAHK,EAGLA,KA8E/B,OAtCAwF,qBAAU,WACRF,EAAS2K,GAAe,eACvB,CAAC3K,IAGJE,qBAAU,WACR,GAAIkL,EAGF,OAFAtO,QAAQC,IAAIqO,GAEsB,MAA9BA,EAAUjP,SAASgQ,YACrBH,EAAS,oFAIXA,EAAS,yCAIPd,IACFpO,QAAQC,IAAI,yCACZqF,EAAQ6J,KAAK,KACbnP,QAAQC,IAAImO,MAEb,CAACA,EAAME,EAAWpL,EAAUtF,IAG/BwF,qBAAU,WAAO,IACPN,EAAa8K,EAAb9K,SACR,GAAIA,EAAU,CACZwC,EAAQ6J,KAAK,KACb,IACE1M,aAAakD,QAAQ,OAAQC,KAAK7F,UAAU+C,IAC5C,MAAOH,GACP3C,QAAQC,IAAI,mCAGf,CAACqF,EAAS1H,IAGX,cAAC,GAAD,CACEkB,KAAK,WACL8O,KAAMA,EACN7D,SA3Ea,SAACpH,GAAO,IAAD,EACEA,EAAEqH,OAAlBF,EADc,EACdA,MAAOmF,EADO,EACPA,KACf/L,EACEyK,GAAY,CACVC,KAAM,WACNtB,IAAK2C,EACLnF,YAsEFJ,SAhEa,SAAC/G,GAChBA,EAAEgH,iBADoB,IAEd7G,EAA+C8K,EAA/C9K,SAAUiL,EAAqCH,EAArCG,SAAUI,EAA2BP,EAA3BO,gBAAiB1J,EAAUmJ,EAAVnJ,MAE7C,IAAI,CAAC3B,EAAUiL,EAAUI,EAAiB1J,GAAO6K,SAAS,IAK1D,OAAIvB,IAAaI,GACfe,EAAS,qFACThM,EAASyK,GAAY,CAAEC,KAAM,WAAYtB,IAAK,WAAYxC,MAAO,WACjE5G,EACEyK,GAAY,CAAEC,KAAM,WAAYtB,IAAK,kBAAmBxC,MAAO,YAInE5G,EAAS4K,GAAS,CAAEhL,WAAU2B,QAAOsJ,cAZnCmB,EAAS,qEA4DT3P,MAAOA,OClFEgQ,GARM,WACnB,OACE,cAAC,GAAD,UACE,cAAC,GAAD,O,2vBCAN,I,GAAMC,GAAcjT,YAAOE,EAAPF,CAAH,MAKXkT,GAAalT,IAAOoM,MAAV,KAKaxM,EAAQC,KAAK,IAIpCsT,GAAenT,IAAOC,IAAV,MAoEHmT,GAvDA,SAAC,GAAuC,IAArCjL,EAAoC,EAApCA,MAAOE,EAA6B,EAA7BA,QAASgL,EAAoB,EAApBA,cAC1BC,EAAeC,iBAAO,MACtBC,EAAgBD,iBAAO,MAE7B1M,qBAAU,WACR2M,EAAcC,QAAU,IAAIC,KAAMJ,EAAaG,QAAS,CACtDE,MAAO,SACPnF,YAAa,uDACboF,QAAS,CAGPC,QAAS,CACP,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,MAC5B,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,aAAc,aAAc,OAAQ,aAO3C,IAAMC,EAAQR,EAAcC,QAC5BO,EAAMC,GAAG,eAAe,SAACC,EAAOC,EAAUC,GACzB,SAAXA,GACFf,EAAc,CAAEtD,IAAK,UAAWxC,MAAOyG,EAAMK,KAAKC,iBAGrD,CAACjB,IAEJ,IAAMkB,EAAUhB,kBAAO,GACvB1M,qBAAU,WACJ0N,EAAQd,UACZc,EAAQd,SAAU,EAClBD,EAAcC,QAAQY,KAAKC,UAAYjM,KACtC,CAACA,IAMJ,OACE,eAAC4K,GAAD,WACE,cAACC,GAAD,CACE1E,YAAY,oDACZhB,SARgB,SAACpH,GACrBiN,EAAc,CAAEtD,IAAK,QAASxC,MAAOnH,EAAEqH,OAAOF,SAQ1CA,MAAOpF,IAET,cAACgL,GAAD,UACE,qBAAKqB,IAAKlB,U,YClCDmB,IA1CXpF,GAAa,mBACbC,GAAe,qB,GAKjBhN,EAAyB,oB,qBAH3BoS,G,MACAC,G,MACAC,G,MAEIC,GAAoB,0B,GAKtBvS,EAAyB,qB,qBAH3BwS,G,MACAC,G,MACAC,G,MAGWnF,GAAa/N,YAAauN,IAC1B+B,GAActP,YAAawN,IAAc,kBAAqB,CACzES,IADoD,EAAGA,IAEvDxC,MAFoD,EAAQA,UAIjD0H,GAAYnT,YAAa4S,IAAY,kBAA6B,CAC7EvM,MADgD,EAAGA,MAEnD9E,GAFgD,EAAUA,GAG1DgF,QAHgD,EAAcA,YAKnD6M,GAAkBpT,YAC7B+S,IACA,kBAA6C,CAC3C1M,MADF,EAAGA,MAED9E,GAFF,EAAUA,GAGRgF,QAHF,EAAcA,QAIZ8M,eAJF,EAAuBA,mBAOZC,GAAatT,YAAagT,IAAa,kBAAsB,CACxEzR,GADkD,EAAGA,GAErDgF,QAFkD,EAAOA,YAMrDgN,GAAgB7S,EAAkBkS,I7BxCf,SAAC,GAA4B,IAA1BvM,EAAyB,EAAzBA,MAAO9E,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QAC/B/E,EAAcC,KAAGC,UAAU,CAC/B2E,QACA9E,KACAgF,YAGF,OADA5E,QAAQC,IAAI,WAAYJ,GACjBL,GAAOwE,KAAK,QAASnE,M6BkCxBgS,GAAiB9S,EAAkBsS,I7BpBf,SAAC,GAAqB,IAAnBzR,EAAkB,EAAlBA,GAAIgF,EAAc,EAAdA,QACzB/E,EAAcC,KAAGC,UAAU,CAC/BH,KACAgF,YAEF,OAAOpF,GAAOL,IAAI,QAASU,M6BiBtB,SAAUmR,KAAV,iEACL,OADK,SACCzP,YAAW0P,GAAYW,IADxB,OAEL,OAFK,SAECrQ,YAAW8P,GAAaQ,IAFzB,wCAKP,IAAM9N,GAAe,CACnBW,MAAO,GACP9E,GAAI,GACJgF,QAAS,GACT8M,eAAgB,GAChB1N,KAAM,KACN6I,UAAW,MAgDEiF,GA7CDrT,aAAa,kBAAC,GAEvBmN,IAAa,SAAClN,GAAD,OAAWqF,MAFF,YAAC,GAGvB8H,IAAe,SAACnN,EAAD,WAAUE,QAAW0N,EAArB,EAAqBA,IAAKxC,EAA1B,EAA0BA,MAA1B,mBAAC,eACZpL,GADW,kBAEb4N,EAAMxC,OALc,YAAC,GAOvBmH,IAAa,SAACvS,GAAD,mBAAC,eACVA,GADS,IAGZsF,KAAM,KACN6I,UAAW,UAXU,YAAC,GAcvBqE,IAAqB,SAACxS,EAAD,OAAmBsF,EAAnB,EAAUpF,QAAV,EAAyBU,KAAzB,mBAAC,eAClBZ,GADiB,IAEpBsF,YAhBqB,YAAC,GAmBvBmN,IAAqB,SAACzS,EAAD,OAAmBmO,EAAnB,EAAUjO,QAAV,mBAAC,eAClBF,GADiB,IAEpBmO,iBArBqB,YAAC,GAuBvBuE,IAAoB,SACnB1S,EADmB,WAEjBE,QAAW8F,EAFM,EAENA,MAAO9E,EAFD,EAECA,GAAIgF,EAFL,EAEKA,QAAS8M,EAFd,EAEcA,eAFd,mBAAC,eAIjBhT,GAJgB,IAKnBgG,QACA9E,KACAgF,UACA8M,sBA/BqB,YAAC,GAiCvBJ,IAAsB,SAAC5S,EAAD,OAAmBsF,EAAnB,EAAUpF,QAAV,mBAAC,eACnBF,GADkB,IAErBsF,YAnCqB,YAAC,GAqCvBuN,IAAsB,SAAC7S,EAAD,OAAmBmO,EAAnB,EAAUjO,QAAV,mBAAC,eACnBF,GADkB,IAErBmO,iBAvCqB,IA0CzB9I,IC/EagO,GArBS,WACtB,IAAM7O,EAAWC,cADW,EAEDF,aAAY,gBAAG6O,EAAH,EAAGA,MAAH,MAAgB,CACrDpN,MAAOoN,EAAMpN,MACbE,QAASkN,EAAMlN,YAFTF,EAFoB,EAEpBA,MAAOE,EAFa,EAEbA,QAITgL,EAAgBoC,uBACpB,SAACpT,GAAD,OAAasE,EAASyK,GAAY/O,MAClC,CAACsE,IAQH,OALAE,qBAAU,WACR,OAAO,WACLF,EAASkJ,SAEV,CAAClJ,IAEF,cAAC,GAAD,CAAQ0M,cAAeA,EAAelL,MAAOA,EAAOE,QAASA,K,ukCClB7CrI,IAAOC,IAAV,KAESL,EAAQC,KAAK,GAI1BD,EAAQC,KAAK,IAMVG,IAAOqR,KAAV,KAKSzR,EAAQC,KAAK,GAiBjBD,EAAQC,KAAK,GAIXD,EAAQC,KAAK,IAKrBG,IAAOC,IAAV,KAEEL,EAAQC,KAAK,IAOHG,IAAOC,IAAV,M,kTCpDlB,IAAMyV,GAA0B1V,IAAOC,IAAV,MASvBQ,GAAeT,YAAOa,EAAPb,CAAH,MAgCH2V,GAzBY,SAAC,GAMrB,IALLC,EAKI,EALJA,SACAzG,EAII,EAJJA,UACA0G,EAGI,EAHJA,aACAV,EAEI,EAFJA,eACA9R,EACI,EADJA,GAEA,OACE,eAACqS,GAAD,WACIP,EAKA,eAAC,GAAD,CAAcrV,MAAI,EAACyB,QAAS,kBAAMsU,EAAa,CAAExS,QAAjD,4CAEGI,QAAQC,IAAIL,MANf,cAAC,GAAD,CAAcvD,MAAI,EAACyB,QAAS4N,EAA5B,6CAUF,cAAC,GAAD,CAAc5N,QAASqU,EAAvB,8BC8BSnN,gBA/DqB,SAAC,GAAwB,IAAtBM,EAAqB,EAArBA,QAG/BpC,GAHoD,EAAZgC,MACrBM,OAAjBL,OAEShC,eAHyC,EAYtDF,aAAY,gBAAG6O,EAAH,EAAGA,MAAH,MAAgB,CAC9BpN,MAAOoN,EAAMpN,MACb9E,GAAIkS,EAAMlS,GACVgF,QAASkN,EAAMlN,QACfyN,KAAMP,EAAMO,KACZrO,KAAM8N,EAAM9N,KACZ6I,UAAWiF,EAAMjF,UACjB6E,eAAgBI,EAAMJ,mBAdtBhN,EALwD,EAKxDA,MACAE,EANwD,EAMxDA,QAEAhF,GARwD,EAOxDyS,KAPwD,EAQxDzS,IACAoE,EATwD,EASxDA,KACA6I,EAVwD,EAUxDA,UACA6E,EAXwD,EAWxDA,eA4BFtO,qBAAU,WACR,GAAIY,EAAM,CACcA,EAAdsO,IAActO,EAATpG,KAEb0H,EAAQ6J,KAAR,KAEEtC,GACF7M,QAAQC,IAAI4M,KAEb,CAACvH,EAAStB,EAAM6I,IAInB,OACE,cAAC,GAAD,CACEjN,GAAIA,EACJ8R,eAAgBA,EAChBhG,UAjCc,WAChBxI,EACEsO,GAAU,CACR9M,QACA9E,KACAgF,cA6BFuN,SAvBa,WACf7M,EAAQiN,UAuBNH,aATiB,SAAC,GAAY,IAAVxS,EAAS,EAATA,GACtBsD,EAASyO,GAAW,CAAE/R,KAAIgF,mBCzCf4N,GAVG,WAChB,OACE,eAAC,EAAD,WACE,cAAC,GAAD,IACA,uBACA,cAAC,GAAD,Q,+tBCJN,IAAMhH,GAAkBjP,YAAOE,EAAPF,CAAH,MAGfgP,GAAWhP,IAAOC,IAAV,KACeL,EAAQC,KAAK,IAoBpCqW,IAPclW,IAAOC,IAAV,MAOKD,YAAOgH,GAAPhH,CAAH,KACGJ,EAAQC,KAAK,KAG7BsW,GAAcnW,IAAOC,IAAV,KAENL,EAAQC,KAAK,IAmET4I,gBAhEI,SAAC,GAUd,EATJhB,KASK,IARLzE,EAQI,EARJA,MACAf,EAOI,EAPJA,QACAmU,EAMI,EANJA,cAEAxN,GAII,EALJnH,KAKI,EAJJmH,QACA3D,EAGI,EAHJA,UACAoR,EAEI,EAFJA,QAEI,KADJ1N,MAEqB8D,oBAAS,IAD1B,6BAGJ,GAAIzJ,EACF,OAAIA,EAAMF,UAAsC,MAA1BE,EAAMF,SAASgQ,OAC5B,cAAC,GAAD,2FAGPrP,QAAQC,IAAIV,GAEP,cAAC,GAAD,0CAIT,GAAIf,EACF,OAAO,KAGT,IAAMyF,EAAUvC,SAASyD,EAAQ,IAE7B0N,EACFrR,GACAA,EAAUsR,MAAK,SAACC,GACd,OAAOA,EAAEnT,KAAOqE,KAGN,OAAV4O,EACFpQ,aAAakD,QAAQ,OAAQC,KAAK7F,UAAU8S,IAE5CA,EAAQjN,KAAKS,MAAM5D,aAAa2C,QAAQ,SA7BtC,MA+BgCyN,EAAMhQ,OAAlC6B,EA/BJ,EA+BIA,MAAOE,EA/BX,EA+BWA,QAASD,EA/BpB,EA+BoBA,QACCkO,EAAjBtO,aAGR,OAFAqO,EAAQC,EAAMhQ,OAAO2B,OAAO3B,OAAOC,UAGjC,eAAC,GAAD,WACE,eAAC,GAAD,WACE,iDAAU4B,KACV,cAAC+N,GAAD,CAAeO,cAAerO,EAASrB,cAAY,OAGpDqP,EACD,cAACD,GAAD,CAAaO,wBAAyB,CAAEC,OAAQtO,KAEhD,cAAC,GAAD,U,wwBC3FN,IAAMuO,GAAa5W,IAAOC,IAAV,MAaV4W,GAAgB7W,IAAOC,IAAV,MAmBbQ,GAAeT,YAAOa,EAAPb,CAAH,MAiCH8W,GA1BE,SAAC,GAQX,IAPLC,EAOI,EAPJA,QACA5O,EAMI,EANJA,MACA6O,EAKI,EALJA,YAKI,IAJJC,mBAII,MAJU,eAIV,MAHJC,kBAGI,MAHS,eAGT,EAFJC,EAEI,EAFJA,UACAC,EACI,EADJA,SAEA,OAAKL,EAEH,cAACH,GAAD,UACE,eAACC,GAAD,WACE,6BAAK1O,IACL,4BAAI6O,IACJ,sBAAKtV,UAAU,UAAf,UACE,cAAC,GAAD,CAAcH,QAAS6V,EAAvB,SAAkCF,IAClC,cAAC,GAAD,CAAcpX,MAAI,EAACyB,QAAS4V,EAA5B,SACGF,YATU,MCvCRI,GAXQ,SAAC,GAAsC,IAApCN,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC5C,OAAO,cAAC,GAAD,CACLL,QAASA,EACT5O,MAAM,kCACN6O,YAAY,0FACZC,YAAY,eACZE,UAAWA,EACXC,SAAUA,K,6fCJd,IAAME,GAAwBtX,IAAOC,IAAV,MAOrBiM,GAAelM,IAAOC,IAAV,KAGPyO,EAAQ7O,KAAK,GAON6O,EAAQ7O,KAAK,GAClB6O,EAAQ5O,KAAK,IA2DX2I,gBArDW,SAAC,GAAmD,IAAjD8O,EAAgD,EAAhDA,OAAQtK,EAAwC,EAAxCA,SAAUlH,EAA8B,EAA9BA,MAAOd,EAAuB,EAAvBA,UAAW0D,EAAY,EAAZA,MAAY,EACjD8D,oBAAS,GADwC,mBACpE+K,EADoE,KAC7DC,EAD6D,KAYnE7O,EAAWD,EAAMM,OAAjBL,OAEJ8O,EACFzS,GACAA,EAAUsR,MAAK,SAACC,GACd,OAAOA,EAAEnT,KAAO8B,SAASyD,EAAQ,OAEnB,OAAd3D,EACFiB,aAAakD,QAAQ,WAAYC,KAAK7F,UAAUkU,IAEhDA,EAAWrO,KAAKS,MAAM5D,aAAa2C,QAAQ,aAtB8B,MAyBhD6O,EAASpR,OAA5B6B,EAzBmE,EAyBnEA,MAAOE,EAzB4D,EAyB5DA,QACPhF,EAAOqU,EAAPrU,GAEF8R,EADeuC,EAASpR,OAAO2B,OAAO3B,OAApCC,SAOR,OACE,mCACGR,GACC,qCACE,eAACuR,GAAD,WACE,cAAC,GAAD,CAAc/V,QATJ,WAClBgW,EAAO,CAAEpP,QAAO9E,KAAIgF,UAAS8M,oBAQrB,0BACA,cAAC,GAAD,CAAc5T,QAtCF,WACpBkW,GAAS,IAqCD,6BAEF,cAAC,GAAD,CACEV,QAASS,EACTL,UApCQ,WAChBM,GAAS,GACTxK,KAmCQmK,SAxCO,WACfK,GAAS,cC0DEhP,gBAnFa,SAAC,GAAwB,IAAtBE,EAAqB,EAArBA,MAAOI,EAAc,EAAdA,QAAc,EAEzB0D,oBAAS,GAFgB,mBAE3C1G,EAF2C,KAEpCwK,EAFoC,KAG1C3H,EAAWD,EAAMM,OAAjBL,OACFjC,EAAWC,cAJiC,EAe9CF,aAAY,gBAAGe,EAAH,EAAGA,KAAMxF,EAAT,EAASA,QAASZ,EAAlB,EAAkBA,KAAM0D,EAAxB,EAAwBA,MAAOwQ,EAA/B,EAA+BA,MAA/B,MAA4C,CAC1D9N,KAAMA,EAAKA,KACXzE,MAAOyE,EAAKzE,MACZf,QAASA,EAAQ,kBACjBZ,KAAMA,EAAKA,KACXI,KAAMgG,EAAKhG,KACXiG,QAASD,EAAKC,QACdS,MAAOoN,EAAMpN,MACb9E,GAAIkS,EAAMlS,GACVgF,QAASkN,EAAMlN,QACf8M,eAAgBI,EAAMJ,eACtBlQ,UAAWF,EAAME,cApBjBwC,EANgD,EAMhDA,KACAzE,EAPgD,EAOhDA,MACAf,EARgD,EAQhDA,QACAZ,EATgD,EAShDA,KAEAI,GAXgD,EAUhDoK,QAVgD,EAWhDpK,MACAiG,EAZgD,EAYhDA,QAEAzC,EAdgD,EAchDA,UAeF4B,qBAAU,WAER,OAAO,WACLF,EAASW,SAEV,CAACX,EAAUe,IAEd,IAKMuF,EAAQ,wCAAG,4BAAAC,EAAA,sEAET7J,EAAKuF,EAFI,SAGP/E,GAAW,CAAER,OAHN,OAIb0F,EAAQ6J,KAAK,KAJA,gDAMbnP,QAAQC,IAAR,MANa,yDAAH,qDAmBd,OACE,mCACE,cAAC,GAAD,CACE+D,KAAMA,EACNxC,UAAWA,EACXhD,QAASA,EACTe,MAAOA,EACPvB,KAAMA,EACNmH,OAAQA,EACRyN,QAlBU,SAACsB,GACXA,IAAWtW,GACbkP,GAAQ,IAiBN6F,cACE,cAAC,GAAD,CACEnR,UAAWA,EACXsS,OArCK,SAAC,GAA4C,IAA1CpP,EAAyC,EAAzCA,MAAO9E,EAAkC,EAAlCA,GAAIgF,EAA8B,EAA9BA,QAAS8M,EAAqB,EAArBA,eACpCxO,EAASuO,GAAgB,CAAE/M,QAAO9E,KAAIgF,UAAS8M,oBAC/CpM,EAAQ6J,KAAK,WAoCL3F,SAAUA,EACVlH,MAAOA,WCpEJ6R,GAVE,WACf,OACE,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,Q,SCiBSC,OAnBf,WACE,OACE,qCACE,cAAC,KAAD,UACE,+CAEF,cAAC,IAAD,CACEC,UAAWtH,GACXuH,KAAM,CAAC,iBAAkB,SAAU,KACnCC,OAAK,IAEP,cAAC,IAAD,CAAOF,UAAWjF,GAAWkF,KAAK,WAClC,cAAC,IAAD,CAAOD,UAAW9E,GAAc+E,KAAK,cACrC,cAAC,IAAD,CAAOD,UAAW7B,GAAW8B,KAAK,WAClC,cAAC,IAAD,CAAOD,UAAWF,GAAUG,KAAK,4BCZxBE,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uCCeGQ,IAAV,SAAUA,KAAV,iEACL,OADK,SACCC,YAAI,CACR/H,KACApL,KACAiP,KACAxN,KACAhD,KAEAgG,KACAmF,OATG,wCAaQwJ,OAxBKC,2BAAgB,CAClChH,QACA5P,UACAZ,QACAkU,SACA9N,QACA1C,SACA8G,WACAwE,kBCNIyI,GAAiBC,eACjBC,GAAQC,uBACZL,GACAM,+BAAoBC,2BAAgBL,MAiBtCA,GAAeM,IAAIV,IAbnB,WACE,IACE,IAAMrX,EAAO6E,aAAa2C,QAAQ,QAClC,IAAKxH,EAAM,OACXoC,QAAQC,IAAI,kBAAmBrC,GAC/B,IAAM0U,EAAM1U,EAAKgY,WAAWC,QAAQ,KAAM,IAC1CN,GAAMrS,SAASb,GAAYiQ,IAC3BiD,GAAMrS,SAASZ,GAAMgQ,IACrB,MAAO3P,GACP3C,QAAQC,IAAI,2BAKhB6V,GAEAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,cAAC,IAAD,UACE,cAAC,KAAD,UACE,cAAC,GAAD,YAKRW,SAASC,eAAe,SAM1B3B,M","file":"static/js/main.0e896c54.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AiOutlineMenu } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\nimport Responsive from './Responsive';\n\nimport Button from './Button';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n  z-index: 3;\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 800;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst MenuList = styled(Link)`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst BoardItem = ({ board }) => {\n  const { name } = board.fields;\n  const { post_length } = board;\n  const number = post_length;\n\n  return (\n    <>\n      <Link to={`/board/${board.pk}`}>{name}</Link>\n    </>\n  );\n};\nconst Header = ({ user, onLogout, onClick, boards, data }) => {\n  return (\n    <>\n      <HeaderBlock>\n        {/* <Menu>\n          <AiOutlineMenu\n            className=\"menu\"\n            color=\"#22b8cf\"\n            onClick={onClick}\n          ></AiOutlineMenu>\n          <ul className=\"box\">\n            <h1>게시판</h1>\n            {boards && (\n              <ul>\n                {data.map((board) => (\n                  <BoardItem board={board} key={board.pk} />\n                ))}\n              </ul>\n            )}\n          </ul>\n        </Menu> */}\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            REACTERS\n          </Link>\n          <MenuList to=\"/\">FORUM</MenuList>\n          <MenuList to=\"/login\">BOARD</MenuList>\n          <MenuList to=\"/board/1\">Q&A</MenuList>\n\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user}</UserInfo>\n              <Button cyan onClick={onLogout}>\n                로그아웃\n              </Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button cyan to=\"/login\">\n                로그인\n              </Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type));\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\n// axios 인스턴스 생성\r\n\r\nconst client = axios.create();\r\n\r\n// // 글로벌 설정\r\n\r\n// // // API 주소 다른 곳 사용\r\n// client.defaults.baseURL =\r\n//   'http://ec2-3-35-233-97.ap-northeast-2.compute.amazonaws.com';\r\n\r\n// //header\r\n// client.defaults.headers.common['Authorization'] = '주소';\r\n\r\n// //인터셉터\r\n// axios.intercepter.response.use(\r\n//     response => {\r\n//         //요청 성공시 특정 작업\r\n//         return response;\r\n//     },\r\n//     error => {\r\n//         //요청 실패 시 특정 작업\r\n//         return Promise.reject(error);\r\n//     }\r\n// )\r\nexport default client;\r\n","import qs from \"qs\";\nimport client from \"./client\";\n// 게시판 목록 불러오기\nexport const getBoard = (posts) => (posts = client.get(`/board`));\n\n// 글쓰기\nexport const writePost = ({ title, pk, content }) => {\n  const queryString = qs.stringify({\n    title,\n    pk,\n    content,\n  });\n  console.log(\"postitem\", queryString);\n  return client.post(\"/post\", queryString);\n};\n\n// 댓글 쓰기\nexport const writeCommnet = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  console.log((\"query\", queryString));\n  return client.post(\"/reply\", queryString);\n};\n\n// 글 수정하기\nexport const updatePost = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/post\", queryString);\n};\n\n// 댓글 수정하기\nexport const changeComment = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/reply\", queryString);\n};\n// 대댓글 수정하기\nexport const changeReComment = ({ pk, content }) => {\n  const qeryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.put(\"/answer_reply\", qeryString);\n};\n\n// 댓글 삭제하기\nexport const deleteComment = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  console.log(\"hajsdfhajsdf\", pk);\n  return client.delete(\"/reply\", {\n    data: queryString,\n  });\n  // return client.delete(\"/reply\", queryString);\n};\n\nexport const deleteRecomment = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  return client.delete(\"/answer_reply\", { data: queryString });\n};\n\n// 글 삭제하기\nexport const deletePost = ({ pk }) => {\n  const queryString = qs.stringify({ pk });\n  return client.delete(\"/post\", { data: queryString });\n};\n\nexport const writeReCommnet = ({ pk, content }) => {\n  const queryString = qs.stringify({\n    pk,\n    content,\n  });\n  return client.post(`/answer_reply?pk=${pk}`, queryString);\n};\n\n// 댓글 읽어오기\nexport const readComment = (id) => client.get(`/reply?pk=${id}`);\n\n// 대댓글 읽어오기\nexport const readRecoment = (id) => client.get(`/answer_reply?pk=${id}`);\n\n// 글 읽어오기\nexport const readPost = (id) => client.get(`/post?pk=${id}`);\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n// 게시판 목록 불러오기\r\nconst [\r\n  READ_BOAD,\r\n  READ_BOAD_SUCCESS,\r\n  READ_BOAD_FAILURE,\r\n] = createRequestActionTypes('posts/READ_BOARD');\r\n\r\n// 글 목록 불러오기\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nconst TOGGLE_MENU = 'posts/TOGGLE/MENU';\r\n\r\nexport const toggleMenu = createAction(TOGGLE_MENU);\r\n\r\n// 액션 만들어주기\r\n\r\nexport const readBoard = createAction(READ_BOAD);\r\nexport const listPosts = createAction(LIST_POSTS, (id) => id);\r\n\r\n//Saga 만들어주기\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.readPost);\r\nconst readBoardSaga = createRequestSaga(READ_BOAD, postsAPI.getBoard);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n  yield takeLatest(READ_BOAD, readBoardSaga);\r\n}\r\n\r\nconst initialState = {\r\n  boards: null,\r\n  posts: null,\r\n  data: null,\r\n  postsdata: null,\r\n  error: null,\r\n  lastPage: 1,\r\n  toggle: false,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      postsdata: posts.data,\r\n      posts,\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [READ_BOAD_SUCCESS]: (state, { payload: boards, meta: response }) => ({\r\n      ...state,\r\n      boards,\r\n      data: boards.data,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    // (data = posts.data)\r\n    // console.log(data)\r\n    [READ_BOAD_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [TOGGLE_MENU]: (state, { payload: toggle }) => ({\r\n      ...state,\r\n      toggle: !toggle,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;\r\n","import client from './client';\r\nimport qs from 'qs';\r\n\r\n// 회원가입\r\n\r\nexport const register = ({ username, email, password }) =>\r\n  client.post('/register', qs.stringify({ username, email, password }));\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post('/login', qs.stringify({ username, password }));\r\n\r\n// 로그인 상태 확인\r\nexport const check = (user) => client.get(`/user?username=${user}`);\r\n\r\n// 로그아웃\r\nexport const logout = () => client.get('/logout');\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  'user/CHECK',\r\n);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK, (user) => user);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    console.log('hihih');\r\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\r\n  } catch (e) {\r\n    console.log('localStorage is not working');\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API 호출\r\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  data: null,\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      user: data.data.fields.username,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { readBoard, toggleMenu } from '../../modules/posts';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n  const { user, toggle, boards, data } = useSelector(({ user, posts }) => ({\r\n    user: user.user,\r\n    toggle: posts.toggle,\r\n    boards: posts.boards,\r\n    data: posts.data,\r\n  }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  //게시판 목록 불러오기\r\n  useEffect(() => {\r\n    dispatch(readBoard());\r\n  }, [dispatch]);\r\n  const onClick = () => {\r\n    dispatch(toggleMenu(toggle));\r\n  };\r\n  return (\r\n    <Header\r\n      user={user}\r\n      onLogout={onLogout}\r\n      onClick={onClick}\r\n      boards={boards}\r\n      data={data}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: black;\r\n\r\n  /* span 사이에 가운뎃점 문자 보여주기*/\r\n  span + span:before {\r\n    color: ${palette.gray[6]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n  }\r\n  div {\r\n    display: block;\r\n  }\r\n  span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ children, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <div></div>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag {\r\n    display: inline-block;\r\n    color: ${palette.cyan[7]};\r\n    text-decoration: none;\r\n    margin-right: 0.5rem;\r\n    &:hover {\r\n      color: ${palette.cyan[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n  return (\r\n    <TagsBlock>\r\n      {tags.map((tag) => (\r\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n          #{tag}\r\n        </Link>\r\n      ))}\r\n    </TagsBlock>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport posts from './posts';\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  data: null,\r\n  error: null,\r\n  _postId: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      data: post.data,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Responsive from \"../common/Responsive\";\nimport Button from \"../common/Button\";\nimport palette from \"../../lib/styles/palette\";\nimport SubInfo from \"../common/SubInfo\";\nimport Tags from \"../common/Tags\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { readPost } from \"../../modules/post\";\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst BoardItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-right: 2rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-right: 2rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst SideBlock = styled.div`\n  h1 {\n    font-size: 1.5rem;\n  }\n  position: fixed;\n  background-color: white;\n\n  width: 10%;\n  height: 100%;\n  margin-left: 100px;\n  margin-top: 70px;\n`;\n\nconst BoardItem = ({ board }) => {\n  const { name } = board.fields;\n  const { post_length } = board;\n  const number = post_length;\n\n  return (\n    <>\n      <h2>\n        <Link to={`/board/${board.pk}`}>{name}</Link>\n      </h2>\n      <SubInfo>{number}</SubInfo>\n    </>\n  );\n};\n\nconst PostItem = ({ post }) => {\n  const { reply_length } = post;\n  const { email, username } = post.fields.author.fields;\n\n  const { title, content, writeAt, board } = post.fields;\n\n  const postDate = writeAt.split(\"T\");\n\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/board/post/${post.pk}`}>{title}</Link>\n      </h2>\n\n      <p>\n        작성자 : {username} 작성일 {postDate[0]}\n      </p>\n      {/* <span>{content}</span> */}\n      <br />\n      <span>댓글 수 : {reply_length}</span>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({\n  posts,\n  boards,\n  loading,\n  error,\n  showWriteButton,\n  data,\n  match,\n  postsdata,\n  postId,\n  post,\n  user,\n}) => {\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n  // if (postId === undefined) {\n  //   return (postId = 1);\n  // }\n  const _postId = parseInt(localStorage.getItem(\"postId\"));\n  return (\n    <BoardItemBlock>\n      {/* <SideBlock>\n        <h1>게시판 목록</h1>\n\n        {!loading && boards && (\n          <div>\n            {data.map((board) => (\n              <BoardItem board={board} key={board.pk} />\n            ))}\n          </div>\n        )}\n      </SideBlock> */}\n      <PostListBlock>\n        <WritePostButtonWrapper>\n          {showWriteButton && user ? (\n            <Button cyan to={`/write/${postId}`}>\n              새 글 작성하기\n            </Button>\n          ) : null}\n        </WritePostButtonWrapper>\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n\n        {!loading && posts && (\n          <div>\n            {postsdata.map((post) => (\n              <PostItem post={post} key={post.pk} />\n            ))}\n          </div>\n        )}\n      </PostListBlock>\n    </BoardItemBlock>\n  );\n};\n\nexport default withRouter(PostList);\n","import React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts, readBoard } from '../../modules/posts';\r\nimport { readPost } from '../../modules/post';\r\n\r\nconst PostListContainer = ({ match, history, location }) => {\r\n  let { postId, commendId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const {\r\n    posts,\r\n    error,\r\n    loading,\r\n    user,\r\n    data,\r\n    boards,\r\n    post,\r\n    _postId,\r\n    postsdata,\r\n  } = useSelector(({ posts, loading, user, post }) => ({\r\n    posts: posts.posts,\r\n    error: posts.error,\r\n    loading: loading['posts/READ_BOARD'],\r\n    user: user.user,\r\n    data: posts.data,\r\n    boards: posts.boards,\r\n    post: post.post,\r\n    _postId: post._postId,\r\n    postsdata: posts.postsdata,\r\n  }));\r\n  //게시판 목록 불러오기\r\n  useEffect(() => {\r\n    dispatch(readBoard());\r\n  }, [dispatch]);\r\n  // 각 게시판 별 게시물들 불러오기\r\n  useEffect(() => {\r\n    if (postId === undefined) {\r\n      postId = 1;\r\n    }\r\n\r\n    dispatch(readPost(postId));\r\n    dispatch(listPosts(postId));\r\n  }, [dispatch, postId]);\r\n  useEffect(() => {\r\n    if (postId) {\r\n      try {\r\n        localStorage.setItem('postId', JSON.stringify(postId));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history]);\r\n  return (\r\n    <PostList\r\n      postId={postId}\r\n      loading={loading}\r\n      error={error}\r\n      boards={boards}\r\n      posts={posts}\r\n      data={data}\r\n      post={post}\r\n      user={user}\r\n      postsdata={postsdata}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 5rem;\r\n  padding-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { tag, username, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TagBlock = styled.div`\r\n  position: fixed;\r\n  top: 20%;\r\n  left: 10%;\r\n`;\r\n\r\nconst UserTagVerticalList = ({ title }) => {\r\n  return <TagBlock>Tag</TagBlock>;\r\n};\r\n\r\nexport default UserTagVerticalList;\r\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as postsAPI from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst [\n  READ_COMMENT,\n  READ_COMMENT_SUCCESS,\n  READ_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/READ_COMMENT\");\nconst [\n  DELETE_COMMENT,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/DELETE_COMMENT\");\nconst UNLOAD_COMMENT = \"post/UNLOAD_COMMENT\"; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nconst [\n  READ_RECOMMENT,\n  READ_RECOMMENT_SUUCCESS,\n  READ_RECOMMENT_FAILURE,\n] = createRequestActionTypes(\"post/READ_RECOMMENT\");\n\nconst [\n  CHANGE_COMMENT,\n  CHANGE_COMMENT_SUUCCESS,\n  CHANGE_COMMENT_FAILURE,\n] = createRequestActionTypes(\"post/CHANGE_COMMENT\");\n\nconst [\n  CHANGE_RECOMMENT,\n  CHANGE_RECOMMENT_SUUCCESS,\n  CHANGE_RECOMMENT_FAILURE,\n] = createRequestActionTypes(\"post/CHANGE_RECOMMENT\");\n\nexport const deleteComment = createAction(DELETE_COMMENT, ({ pk }) => ({ pk }));\nexport const readComment = createAction(READ_COMMENT, (id) => id);\nexport const unloadComment = createAction(UNLOAD_COMMENT);\nexport const readRecomment = createAction(READ_RECOMMENT, (id) => id);\nexport const changeComment = createAction(\n  CHANGE_COMMENT,\n  ({ pk, content }) => ({ pk, content })\n);\nexport const changeReComment = createAction(\n  CHANGE_RECOMMENT,\n  ({ pk, content }) => ({ pk, content })\n);\n\nconst readCommentSaga = createRequestSaga(READ_COMMENT, postsAPI.readComment);\nconst deleteCommentSaga = createRequestSaga(\n  DELETE_COMMENT,\n  postsAPI.deleteComment\n);\nconst readRecommentSaga = createRequestSaga(\n  READ_RECOMMENT,\n  postsAPI.readRecoment\n);\nconst changeCommentSaga = createRequestSaga(\n  CHANGE_COMMENT,\n  postsAPI.changeComment\n);\nconst changeReCommentSaga = createRequestSaga(\n  CHANGE_RECOMMENT,\n  postsAPI.changeReComment\n);\n\nexport function* commentSaga() {\n  yield takeLatest(READ_COMMENT, readCommentSaga);\n  yield takeLatest(DELETE_COMMENT, deleteCommentSaga);\n  yield takeLatest(READ_RECOMMENT, readRecommentSaga);\n  yield takeLatest(CHANGE_COMMENT, changeCommentSaga);\n  yield takeLatest(CHANGE_RECOMMENT, changeReCommentSaga);\n}\n\nconst initialState = {\n  comment: null,\n  recomment: null,\n  data: [],\n  recommentdata: [],\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n      data: comment.data,\n      comment,\n    }),\n    [READ_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [DELETE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n      comment,\n    }),\n    [DELETE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [READ_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\n      ...state,\n      recommentdata: recomment.data,\n      recomment,\n    }),\n    [READ_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CHANGE_COMMENT_SUUCCESS]: (state, { payload: comment }) => ({\n      ...state,\n\n      comment,\n    }),\n    [CHANGE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [CHANGE_RECOMMENT_SUUCCESS]: (state, { payload: recomment }) => ({\n      ...state,\n\n      recomment,\n    }),\n    [CHANGE_RECOMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_COMMENT]: () => initialState,\n  },\n  initialState\n);\n\nexport default post;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { deleteRecomment } from \"../../lib/api/posts\";\nimport palette from \"../../lib/styles/palette\";\n\nconst ReCommentBlock = styled.span`\n  display: flex;\n  justify-content: flex-start;\n\n  div {\n    display: flex;\n    justify-content: flex-end;\n\n    margin-top: -1.5rem;\n    width: 100%;\n    margin-bottom: 2rem;\n  }\n`;\n\nconst ActionButton = styled.button`\n  display: flex;\n  justify-content: flex-end;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  display: flex;\n  justify-content: flex-end;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst PostRecommentItem = ({\n  recomment,\n  onRecomment,\n  user,\n  onChangeReComment,\n}) => {\n  const { reply } = recomment.fields;\n  // username 불러오기\n  const { username } = recomment.fields.author.fields;\n  const { pk } = recomment;\n  const [text, setText] = useState(\"\");\n  const [edit, setEdit] = useState(false);\n  const [out, setOut] = useState(false);\n\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const onSumbit = (e) => {\n    e.preventDefault();\n    // 내용이 비어있을 경우 경고 표시\n    if (text === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    const content = text;\n    const recomment_pk = reply;\n    onChangeReComment({ pk, content, recomment_pk });\n    setText(\"\");\n    setEdit(!edit);\n  };\n\n  // 자신이 쓴 대댓글인지 확인\n  const ownRecomment = user === username;\n\n  const { writeAt, content } = recomment.fields;\n  const postDate = writeAt.split(\"T\");\n  // 대댓글 삭제\n  const onRemove = async () => {\n    try {\n      deleteRecomment({ pk });\n      setOut(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <>\n      {out || (\n        <div>\n          {/* 댓글 정보 */}\n          <span>\n            Date: {postDate[0]} username: {username}\n          </span>\n          <hr />\n          {/* 댓글 수정 부 form 으로 구현  */}\n          {edit && (\n            <form onSubmit={onSumbit}>\n              <Input value={text} onChange={onChange}></Input>\n              <ReCommentBlock>\n                <ActionButton type={\"submit\"}>등록</ActionButton>\n                <ActionButton onClick={() => setEdit(!edit)}>취소</ActionButton>\n              </ReCommentBlock>\n            </form>\n          )}\n          {edit || (\n            <div>\n              <ReCommentBlock>{content}</ReCommentBlock>\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\n              {ownRecomment ? (\n                <>\n                  <ReCommentBlock>\n                    <div>\n                      <ActionButton\n                        onClick={() => {\n                          setEdit(!edit);\n                          setText(content);\n                        }}\n                      >\n                        수정\n                      </ActionButton>\n                      <ActionButton onClick={onRemove}>삭제</ActionButton>\n                    </div>\n                  </ReCommentBlock>\n                </>\n              ) : (\n                <div>&nbsp;&nbsp;</div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PostRecommentItem;\n","import React, { useState } from \"react\";\nimport { AiOutlinePlusSquare, AiOutlineMinusSquare } from \"react-icons/ai\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport PostRecommentItem from \"./PostRecommentItem\";\nconst ToggleButton = styled.div`\n  display: block;\n  align-items: center;\n\n  font-weight: bold;\n  font-size: 1.5rem;\n  cursor: pointer;\n  box-sizing: border-box;\n  position: relative;\n  z-index: 2;\n  span {\n    position: absolute;\n    top: 0;\n    left: 1.7rem;\n    font-size: 1rem;\n    text-align: center;\n    margin-bottom: 2px;\n  }\n  p {\n    position: absolute;\n    top: -2rem;\n    left: 0;\n    width: 100%;\n    display: hidden;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n  float: right;\n`;\nconst Button2 = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  width: 100%;\n  color: white;\n  margin-bottom: 2rem;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n`;\nconst RecommentBlock = styled.div`\n  border: 1px solid rgba(0, 0, 0, 0.02);\n  background-color: rgba(0, 0, 0, 0.016);\n  padding: 1.5rem;\n  border-radius: 10px;\n  margin-top: 1.3125rem;\n`;\n\nconst PostCommentToggle = ({\n  comment,\n  onRecomment,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  onChangeReComment,\n  user,\n}) => {\n  const { pk } = comment;\n  const { answer_reply_length } = comment;\n  // const { id } = comment.recomments;\n  const [set, onSet] = useState(false);\n  const [setRe, onSetRe] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    onRecomment(text);\n    setText(\"\");\n  };\n  const onSubmitRe = (e) => {\n    e.preventDefault();\n    const content = text;\n    onWriteRecomment({ pk, content });\n    setText(\"\");\n  };\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  const onClick = () => {\n    onSet(!set);\n    let id = pk;\n    onClickRe({ id });\n  };\n  const onClick2 = () => {\n    onSetRe(!setRe);\n  };\n  const onClickrecomment = () => {\n    let id = pk;\n    onClickRe({ id });\n  };\n  const onRead = () => {\n    let id = pk;\n    onReadComment({ id });\n  };\n\n  return (\n    <>\n      <>\n        <ToggleButton>\n          {set ? (\n            <AiOutlineMinusSquare\n              onClick={onClick}\n              color=\"#22b8cf\"\n            ></AiOutlineMinusSquare>\n          ) : (\n            <AiOutlinePlusSquare\n              onClick={onClick}\n              color=\"#22b8cf\"\n            ></AiOutlinePlusSquare>\n          )}\n\n          {set ? (\n            <span onClick={onClick}>숨기기</span>\n          ) : (\n            <div>\n              {answer_reply_length === 0 ? (\n                <span onClick={onClick}>답글 달기</span>\n              ) : (\n                <span onClick={onClick}>{answer_reply_length}개의 댓글</span>\n              )}\n            </div>\n          )}\n        </ToggleButton>\n      </>\n      <br />\n      {set && answer_reply_length === 0 ? (\n        <form onSubmit={onSubmitRe}>\n          <Input\n            type=\"text\"\n            value={text}\n            placeholder=\"답글을 입력하세요\"\n            onChange={onChange}\n          ></Input>\n          <Button type={\"submit\"} onClick={onRead}>\n            등록\n          </Button>\n        </form>\n      ) : null}\n      {set && answer_reply_length !== 0 && (\n        <>\n          <RecommentBlock>\n            {recommentdata.map((recomment) => (\n              <PostRecommentItem\n                key={recomment.pk}\n                recomment={recomment}\n                user={user}\n                onChangeReComment={onChangeReComment}\n              ></PostRecommentItem>\n            ))}\n          </RecommentBlock>\n          {user && (\n            <Button2 onClick={onClick2}>\n              {setRe ? \"숨기기\" : \"답글달기\"}\n            </Button2>\n          )}\n          {setRe && (\n            <form onSubmit={onSubmitRe}>\n              <Input\n                type=\"text\"\n                value={text}\n                placeholder=\"답글을 입력하세요\"\n                onChange={onChange}\n              ></Input>\n              <Button type={\"submit\"}>등록</Button>\n            </form>\n          )}\n        </>\n      )}\n    </>\n  );\n};\nexport default PostCommentToggle;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { withRouter, Redirect } from \"react-dom\";\nimport palatte from \"../../lib/styles/palette\";\nimport PostCommentToggle from \"./PostCommentToggle\";\n// import { deleteComment } from \"../../modules/comment\";\nimport { changeComment, deleteComment, readComment } from \"../../lib/api/posts\";\nconst CommentBlock = styled.span`\n  display: flex;\n  justify-content: flex-start;\n\n  div {\n    display: flex;\n    justify-content: flex-end;\n\n    margin-top: -1.5rem;\n    width: 100%;\n    margin-bottom: 2rem;\n  }\n`;\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palatte.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palatte.gray[1]};\n    color: ${palatte.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst PostCommentItem = ({\n  comment,\n  onRemove,\n  user,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  ownComment,\n  history,\n  onChangeComment,\n  onChangeReComment,\n}) => {\n  const [text, setText] = useState(\"\");\n  const [edit, setEdit] = useState(false);\n  const [out, setOut] = useState(false);\n  const [redirect, setRedirect] = useState(\"\");\n  const { writeAt, content } = comment.fields;\n  const { username } = comment.fields.author.fields;\n\n  const { pk } = comment;\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  const onRemoveComment = async () => {\n    try {\n      await deleteComment({ pk });\n      setOut(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const onChangeComments = () => {\n    const content = text;\n    onChangeComment({ pk, content });\n  };\n  const onSumbit = (e) => {\n    e.preventDefault();\n    // 내용이 비어있을 경우 경고 표시\n    if (text === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    onChangeComments();\n    setText(\"\");\n    setEdit(!edit);\n  };\n\n  const ownThing = ownComment(username);\n\n  const postDate = writeAt.split(\"T\");\n  return (\n    <>\n      {out || (\n        <div>\n          {/* 댓글 정보 */}\n          <span>\n            Date: {postDate[0]} username: {username}\n          </span>\n          <hr />\n          {/* 댓글 수정 부 form 으로 구현  */}\n          {edit && (\n            <form onSubmit={onSumbit}>\n              <Input value={text} onChange={onChange}></Input>\n              <CommentBlock>\n                <div>\n                  <ActionButton type={\"submit\"}>등록</ActionButton>\n                  <ActionButton onClick={() => setEdit(!edit)}>\n                    취소\n                  </ActionButton>\n                </div>\n              </CommentBlock>\n            </form>\n          )}\n          {edit || (\n            <div>\n              <CommentBlock>{redirect ? content : content}</CommentBlock>\n              {/* 댓글 user와 같은지 확인하여 수정 삭제 가능 불가능 결정 */}\n              {ownThing ? (\n                <>\n                  <CommentBlock>\n                    <div>\n                      <ActionButton\n                        onClick={() => {\n                          setEdit(!edit);\n                          setText(content);\n                        }}\n                      >\n                        수정\n                      </ActionButton>\n                      <ActionButton onClick={onRemoveComment}>\n                        삭제\n                      </ActionButton>\n                    </div>\n                  </CommentBlock>\n                </>\n              ) : (\n                <div>&nbsp;&nbsp;</div>\n              )}\n            </div>\n          )}\n\n          <PostCommentToggle\n            comment={comment}\n            onClickRe={onClickRe}\n            recommentdata={recommentdata}\n            onWriteRecomment={onWriteRecomment}\n            onReadComment={onReadComment}\n            user={user}\n            onChangeReComment={onChangeReComment}\n          />\n          <br />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PostCommentItem;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PostCommentItem from \"./PostCommentItem\";\nimport palette from \"../../lib/styles/palette\";\nimport Responsive from \"../common/Responsive\";\nimport { stringify } from \"qs\";\nconst Input = styled.input`\n  resize: none;\n  padding: 1rem 1rem 1.5rem;\n  outline: none;\n  border: 1px solid rgb(233, 236, 239);\n  margin-bottom: 1.5rem;\n  width: 100%;\n  border-radius: 4px;\n  min-height: 6.125rem;\n  font-size: 1rem;\n  color: rgb(33, 37, 41);\n  line-height: 1.75;\n`;\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.cyan[5]};\n  &:hover {\n    background: ${palette.cyan[4]};\n  }\n  float: right;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\n\nconst PostCommentList = ({\n  user,\n  comment,\n  data,\n  onPublish,\n  onRemove,\n  onClickRe,\n  recommentdata,\n  onWriteRecomment,\n  onReadComment,\n  ownComment,\n  onChangeComment,\n  onChangeReComment,\n}) => {\n  const [content, setText] = useState(\"\");\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (content === \"\") {\n      alert(\"내용을 입력해주세요!\");\n      return;\n    }\n    onPublish({ content });\n    setText(\"\");\n  };\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n  return (\n    <PostViewerBlock>\n      <PostHead>\n        <form onSubmit={onSubmit}>\n          <Input\n            type=\"text\"\n            value={content}\n            placeholder=\"댓글을 입력하세요\"\n            onChange={onChange}\n          />\n          <Button cyan type={\"submit\"}>\n            등록\n          </Button>\n        </form>\n        <br />\n        <br />\n\n        <div>\n          {data.map((comment) => (\n            <PostCommentItem\n              key={comment.pk}\n              comment={comment}\n              onRemove={onRemove}\n              onClickRe={onClickRe}\n              recommentdata={recommentdata}\n              onWriteRecomment={onWriteRecomment}\n              onReadComment={onReadComment}\n              ownComment={ownComment}\n              user={user}\n              onChangeComment={onChangeComment}\n              onChangeReComment={onChangeReComment}\n            ></PostCommentItem>\n          ))}\n        </div>\n      </PostHead>\n    </PostViewerBlock>\n  );\n};\n\nexport default PostCommentList;\n","import { createAction, handleActions } from 'redux-actions';\n\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'commentwrite/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'commentwrite/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_COMMENT,\n  WRITE_COMMENT_SUCCESS,\n  WRITE_COMMENT_FAILURE,\n] = createRequestActionTypes('commentwrite/WRITE_COMMENT'); // 댓글 작성\nconst [\n  WRITE_RECOMMENT,\n  WRITE_RECOMMENT_SUCCESS,\n  WRITE_RECOMMENT_FAILURE,\n] = createRequestActionTypes('commentwrite/WRITE_RECOMMENT'); // 댓글 작성\n// const REMOVE = 'comment/REMOVE';\nconst SET_ORIGINAL_COMMENT = 'commentwrite/SET_ORIGINAL_COMMENT';\n// const TOGGLE = 'comment/TOGGLE';\n// const [\n//   UPDATE_COMMENT,\n//   UPDATE_COMMENT_SUCCESS,\n//   UPDATE_COMMENT_FAILURE,\n// ] = createRequestActionTypes('write/UPDATE_COMMENT'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writeComment = createAction(WRITE_COMMENT, ({ pk, content }) => ({\n  pk,\n  content,\n}));\nexport const writeReComment = createAction(\n  WRITE_RECOMMENT,\n  ({ pk, content }) => ({\n    pk,\n    content,\n  }),\n);\nexport const setOriginalComment = createAction(\n  SET_ORIGINAL_COMMENT,\n  (post) => post,\n);\n// export const updateComment = createAction(UPDATE_COMMENT, ({ id, text }) => ({\n//   id,\n//   text,\n// }));\n\nconst writeCommentSaga = createRequestSaga(\n  WRITE_COMMENT,\n  postsAPI.writeCommnet,\n);\n// const updatePostSaga = createRequestSaga(UPDATE_COMMENT, postsAPI);\nconst wrtieRecommentSaga = createRequestSaga(\n  WRITE_RECOMMENT,\n  postsAPI.writeReCommnet,\n);\nexport function* commentWriteSaga() {\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\n  yield takeLatest(WRITE_RECOMMENT, wrtieRecommentSaga);\n  // yield takeLatest(UPDATE_COMMENT, updatePostSaga);\n}\n\nconst initialState = {\n  pk: 3,\n  content: '123',\n  post: null,\n  selectComment: null,\n  commentError: null,\n};\n\nconst commentwrite = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_COMMENT]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_COMMENT_FAILURE]: (state, { payload: commentError }) => ({\n      ...state,\n      commentError,\n    }),\n    [WRITE_RECOMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_RECOMMENT_FAILURE]: (state, { payload: commentError }) => ({\n      ...state,\n      commentError,\n    }),\n    // [SET_ORIGINAL_COMMENT]: (state, { payload: post }) => ({\n    //   ...state,\n    //   title: post.title,\n    //   body: post.body,\n    //   tags: post.tags,\n    //   originalPostId: post._id,\n    // }),\n    // [UPDATE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\n    //   ...state,\n    //   comment,\n    // }),\n    // [UPDATE_COMMENT_FAILURE]: (state, { payload: postError }) => ({\n    //   ...state,\n    //   postError,\n    // }),\n  },\n  initialState,\n);\n\nexport default commentwrite;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  deleteComment,\n  readComment,\n  unloadComment,\n  readRecomment,\n  changeComment,\n  changeReComment,\n} from \"../../modules/comment\";\nimport PostCommentList from \"../../components/post/PostCommentList\";\nimport { withRouter } from \"react-router-dom\";\nimport {\n  initialize,\n  writeComment,\n  writeReComment,\n} from \"../../modules/commentwrite\";\n\nconst PostCommentContainer = ({ match }) => {\n  const [check, onCheck] = useState(false);\n  const { postId } = match.params;\n  const { comment, data, user, content, pk, recommentdata } = useSelector(\n    ({ comment, user, commentwrite }) => ({\n      comment: comment.comment,\n      data: comment.data,\n      user: user.user,\n      content: commentwrite.content,\n      pk: postId,\n      recommentdata: comment.recommentdata,\n    })\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    dispatch(initialize());\n    // 댓글 읽어오기\n    dispatch(readComment(postId));\n    return () => {\n      dispatch(initialize());\n      dispatch(unloadComment());\n    };\n  }, [dispatch, pk, content, postId]);\n  // 댓글 읽어오기\n  const onReadComment = ({ id }) => {\n    dispatch(readComment(id));\n  };\n  // 대댓글 읽어오기\n  const onClickRe = ({ id }) => {\n    dispatch(readRecomment(id));\n  };\n  // 댓글 쓰기\n  const onPublish = ({ content }) => {\n    dispatch(writeComment({ pk, content }));\n    //댓글 읽어오기\n    const id = pk;\n    dispatch(readComment(id));\n  };\n  // 대댓글 쓰기\n  const onWriteRecomment = ({ pk, content }) => {\n    dispatch(writeReComment({ pk, content }));\n    const id = pk;\n    dispatch(readComment(postId));\n    dispatch(readRecomment(id));\n    dispatch(readRecomment(id));\n  };\n\n  // // 댓글 삭제하기\n  // let is = 'hihi';\n  const onRemove = ({ pk }) => {\n    dispatch(deleteComment({ pk }));\n  };\n  // 작성자 게시물 확인하기\n  const ownComment = (postId) => {\n    if (postId === user) {\n      onCheck(true);\n      return true;\n    }\n  };\n  // 댓글 수정하기\n  const onChangeComment = ({ pk, content }) => {\n    dispatch(changeComment({ pk, content }));\n    dispatch(readComment(postId));\n  };\n  // 대댓글 수정하기\n  const onChangeReComment = ({ pk, content, recomment_pk }) => {\n    dispatch(changeReComment({ pk, content }));\n    dispatch(readRecomment(recomment_pk));\n  };\n  return (\n    <PostCommentList\n      comment={comment}\n      // onToggle={onToggle}\n      onPublish={onPublish}\n      onRemove={onRemove}\n      postId={postId}\n      data={data}\n      user={user}\n      onReadComment={onReadComment}\n      recommentdata={recommentdata}\n      onWriteRecomment={onWriteRecomment}\n      onClickRe={onClickRe}\n      ownComment={ownComment}\n      onChangeComment={onChangeComment}\n      onChangeReComment={onChangeReComment}\n    ></PostCommentList>\n  );\n};\n\nexport default withRouter(PostCommentContainer);\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\nimport UserTagVerticalList from '../components/post/UserTagVerticalList';\r\nimport PostCommentContainer from '../containers/post/PostCommentContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n// 페이지 레이아웃 담당\r\n\r\n// 화면 전체 채움\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  //flex로 내부 중앙 정렬\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n// 흰색 박스\r\nconst WitheBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WitheBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/board/1\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WitheBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(\r\n  REGISTER,\r\n  ({ username, email, password }) => ({\r\n    username,\r\n    email,\r\n    password,\r\n  }),\r\n);\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  cookies: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      auth: null,\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../common/Button';\r\n// 회원가입 또는 로그인 폼\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n// 스타일링 된 input\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n// 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\n// 에러 메세지\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일 입력\"\r\n            type=\"email\"\r\n            onChange={onChange}\r\n            value={form.email}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user, checkError } = useSelector(\r\n    ({ auth, user }) => ({\r\n      form: auth.login,\r\n      auth: auth.auth,\r\n      authError: auth.authError,\r\n      checkError: user.checkError,\r\n      error: user.error,\r\n      user: user.user,\r\n    }),\r\n  );\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('login'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류 발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      const { username } = form;\r\n      console.log('로그인 성공');\r\n      dispatch(check(username));\r\n    }\r\n  }, [auth, authError, dispatch, form]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        console.log('set user ok');\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n\r\n      console.log('user', user);\r\n    }\r\n  }, [history, auth, form, user, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\n\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password, passwordConfirm, email } = form;\n    // 하나라도 비어있다면\n    if ([username, password, passwordConfirm, email].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, email, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공 / 실패 처리\n  useEffect(() => {\n    if (authError) {\n      console.log(authError);\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타 이유\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      history.push('/');\n      console.log(auth);\n    }\n  }, [auth, authError, dispatch, user]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    const { username } = form;\n    if (username) {\n      history.push('/'); // 홈 화면으로 이동\n      try {\n        localStorage.setItem('user', JSON.stringify(username));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, content, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'content', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = content;\r\n  }, [content]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as api from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst INITIALIZE = \"write/INITIALIZE\"; // 모든 내용 초기화\nconst CHANGE_FIELD = \"write/CHANGE_FIELD\"; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes(\"write/WRITE_POST\"); // 포스트 작성\nconst SET_ORIGINAL_POST = \"write/SET_ORIGINAL_POST\";\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes(\"write/UPDATE_POST\"); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, pk, content }) => ({\n  title,\n  pk,\n  content,\n}));\nexport const setOriginalPost = createAction(\n  SET_ORIGINAL_POST,\n  ({ title, pk, content, originalPostId }) => ({\n    title,\n    pk,\n    content,\n    originalPostId,\n  })\n);\nexport const updatePost = createAction(UPDATE_POST, ({ pk, content }) => ({\n  pk,\n  content,\n}));\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, api.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, api.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: \"\",\n  pk: \"\",\n  content: \"\",\n  originalPostId: \"\",\n  post: null,\n  postError: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post, meta: response }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (\n      state,\n      { payload: { title, pk, content, originalPostId } }\n    ) => ({\n      ...state,\n      title,\n      pk,\n      content,\n      originalPostId,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState\n);\n\nexport default write;\n","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { title, content } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    content: write.content,\r\n  }));\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch],\r\n  );\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <Editor onChangeField={onChangeField} title={title} content={content} />\r\n  );\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove, onChangeTags }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map((tag) => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    (tag) => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (tag) => {\r\n      const nextTags = localTags.filter((t) => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({\r\n  onCancel,\r\n  onPublish,\r\n  onUpdatePost,\r\n  originalPostId,\r\n  pk,\r\n}) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      {!originalPostId ? (\r\n        <StyledButton cyan onClick={onPublish}>\r\n          포스트 등록\r\n        </StyledButton>\r\n      ) : (\r\n        <StyledButton cyan onClick={() => onUpdatePost({ pk })}>\r\n          포스트 수정\r\n          {console.log(pk)}\r\n        </StyledButton>\r\n      )}\r\n\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from \"react\";\nimport WriteActionButtons from \"../../components/write/WriteActionButtons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { writePost, updatePost } from \"../../modules/write\";\nimport { listPosts } from \"../../modules/posts\";\n\nconst WriteActionButtonsContainer = ({ history, match }) => {\n  const { postId } = match.params;\n\n  const dispatch = useDispatch();\n  const {\n    title,\n    content,\n    tags,\n    pk,\n    post,\n    postError,\n    originalPostId,\n  } = useSelector(({ write }) => ({\n    title: write.title,\n    pk: write.pk,\n    content: write.content,\n    tags: write.tags,\n    post: write.post,\n    postError: write.postError,\n    originalPostId: write.originalPostId,\n  }));\n\n  // 포스트 등록\n  const onPublish = () => {\n    dispatch(\n      writePost({\n        title,\n        pk,\n        content,\n      })\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n\n      history.push(`/`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  const onUpdatePost = ({ pk }) => {\n    dispatch(updatePost({ pk, content }));\n  };\n  return (\n    <WriteActionButtons\n      pk={pk}\n      originalPostId={originalPostId}\n      onPublish={onPublish}\n      onCancel={onCancel}\n      onUpdatePost={onUpdatePost}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <EditorContainer />\r\n      <hr />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport SubInfo from \"../common/SubInfo\";\r\nimport Tags from \"../common/Tags\";\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n  span {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst CommentHead = styled.div`\r\n  font-size: 2rem;\r\n  color: black;\r\n  margin-right: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst SubInfoinPost = styled(SubInfo)`\r\n  border: 1px solid ${palette.gray[2]};\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({\r\n  post,\r\n  error,\r\n  loading,\r\n  actionButtons,\r\n  data,\r\n  postId,\r\n  postsdata,\r\n  ownPost,\r\n  match,\r\n}) => {\r\n  const [set, onSet] = useState(false);\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    {\r\n      console.log(error);\r\n    }\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  const _postId = parseInt(postId, 10);\r\n  // postsdata 배열에서 주소와 일치하는 post 찾기\r\n  let _data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === _postId;\r\n    });\r\n  // redirecting(새로고침)에서 데이터 사라짐 방지용 localStorage 저장\r\n  if (_data !== null) {\r\n    localStorage.setItem(\"data\", JSON.stringify(_data));\r\n  } else {\r\n    _data = JSON.parse(localStorage.getItem(\"data\"));\r\n  }\r\n  const { title, content, writeAt } = _data.fields;\r\n  const { reply_length } = _data;\r\n  ownPost(_data.fields.author.fields.username);\r\n\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <h1>제목 : {title}</h1>\r\n        <SubInfoinPost publishedDate={writeAt} hasMarginTop />\r\n        {/* <Tags tags={tags} /> */}\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: content }} />\r\n\r\n      <PostHead />\r\n\r\n      {/* <PostHead>\r\n        <span>댓글개수 : {reply_length}</span>\r\n      </PostHead> */}\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst FullScreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancleText = '취소',\r\n  onConfirm,\r\n  onCancle,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <FullScreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancle}>{cancleText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </FullScreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancle }) => {\r\n  return <AskModal\r\n    visible={visible}\r\n    title=\"포스트 삭제\"\r\n    description=\"포스트를 정말 삭제하시겠습니까?\"\r\n    confirmText=\"삭제\"\r\n    onConfirm={onConfirm}\r\n    onCancle={onCancle}\r\n  ></AskModal>;\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palatte from \"../../lib/styles/palette\";\r\nimport AskRemoveModal from \"./AskRemoveModal\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst PostActionButtonBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palatte.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palatte.gray[1]};\r\n    color: ${palatte.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\nconst PostActionButtons = ({ onEdit, onRemove, check, postsdata, match }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancle = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n  const { postId } = match.params;\r\n\r\n  let new_data =\r\n    postsdata &&\r\n    postsdata.find((x) => {\r\n      return x.pk === parseInt(postId, 10);\r\n    });\r\n  if (postsdata !== null) {\r\n    localStorage.setItem(\"postdata\", JSON.stringify(new_data));\r\n  } else {\r\n    new_data = JSON.parse(localStorage.getItem(\"postdata\"));\r\n  }\r\n\r\n  const { title, content } = new_data.fields;\r\n  const { pk } = new_data;\r\n  const { username } = new_data.fields.author.fields;\r\n  const originalPostId = username;\r\n\r\n  const onEditThing = () => {\r\n    onEdit({ title, pk, content, originalPostId });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {check && (\r\n        <>\r\n          <PostActionButtonBlock>\r\n            <ActionButton onClick={onEditThing}>수정</ActionButton>\r\n            <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n          </PostActionButtonBlock>\r\n          <AskRemoveModal\r\n            visible={modal}\r\n            onConfirm={onConfirm}\r\n            onCancle={onCancle}\r\n          ></AskRemoveModal>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostActionButtons);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { readPost, unloadPost } from \"../../modules/post\";\r\nimport PostViewer from \"../../components/post/PostViewer\";\r\nimport PostActionButtons from \"../../components/post/PostActionButtons\";\r\nimport { setOriginalPost, updatePost } from \"../../modules/write\";\r\nimport { deletePost } from \"../../lib/api/posts\";\r\nimport { listPosts } from \"../../modules/posts\";\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const [check, onCheck] = useState(false);\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const {\r\n    post,\r\n    error,\r\n    loading,\r\n    user,\r\n    comment,\r\n    data,\r\n    _postId,\r\n\r\n    postsdata,\r\n  } = useSelector(({ post, loading, user, posts, write }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading[\"post/READ_POST\"],\r\n    user: user.user,\r\n    data: post.data,\r\n    _postId: post._postId,\r\n    title: write.title,\r\n    pk: write.pk,\r\n    content: write.content,\r\n    originalPostId: write.originalPostId,\r\n    postsdata: posts.postsdata,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, _postId]);\r\n\r\n  const onEdit = ({ title, pk, content, originalPostId }) => {\r\n    dispatch(setOriginalPost({ title, pk, content, originalPostId }));\r\n    history.push(\"/write\");\r\n  };\r\n  // 게시물 삭제\r\n  const onRemove = async () => {\r\n    try {\r\n      let pk = postId;\r\n      await deletePost({ pk });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  // 수정 삭제 (id 확인)\r\n  const ownPost = (PostId) => {\r\n    if (PostId === user) {\r\n      onCheck(true);\r\n    }\r\n  };\r\n\r\n  // const ownPost = (user) === (post && postsdata.user._id);\r\n  // const ownComment = (user && user._id) === (post && post.user_id);\r\n\r\n  return (\r\n    <>\r\n      <PostViewer\r\n        post={post}\r\n        postsdata={postsdata}\r\n        loading={loading}\r\n        error={error}\r\n        data={data}\r\n        postId={postId}\r\n        ownPost={ownPost}\r\n        actionButtons={\r\n          <PostActionButtons\r\n            postsdata={postsdata}\r\n            onEdit={onEdit}\r\n            onRemove={onRemove}\r\n            check={check}\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from 'react';\r\nimport UserTagVerticalList from '../components/post/UserTagVerticalList';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostCommentContainer from '../containers/post/PostCommentContainer';\r\n\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n      <PostCommentContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom';\r\nimport PostListPage from './pages/PostListPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport WritePage from './pages/WritePage';\r\nimport PostPage from './pages/PostPage';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>REACTERS</title>\r\n      </Helmet>\r\n      <Route\r\n        component={PostListPage}\r\n        path={['/board/:postId', '/board', '/']}\r\n        exact\r\n      />\r\n      <Route component={LoginPage} path=\"/login\" />\r\n      <Route component={RegisterPage} path=\"/register\" />\r\n      <Route component={WritePage} path=\"/write\" />\r\n      <Route component={PostPage} path=\"/board/post/:postId\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport loading from './loading';\r\nimport auth, { authSaga } from './auth';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nimport comment, { commentSaga } from './comment';\r\nimport commentwrite, { commentWriteSaga } from './commentwrite';\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n  comment,\r\n  commentwrite,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    authSaga(),\r\n    userSaga(),\r\n    writeSaga(),\r\n    postSaga(),\r\n    postsSaga(),\r\n\r\n    commentSaga(),\r\n    commentWriteSaga(),\r\n  ]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleWare from 'redux-saga';\r\nimport rootReducer, { rootSaga } from './modules';\r\nimport { tempSetUser, check } from './modules/user';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\nconst sagaMiddleware = createSagaMiddleWare();\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\r\n);\r\n\r\n// local Stroage에 저장된 user 불러와 \"\" 제거\r\nfunction loadUser() {\r\n  try {\r\n    const user = localStorage.getItem('user');\r\n    if (!user) return;\r\n    console.log('localuser is : ', user);\r\n    const _id = user.toString().replace(/\"/g, '');\r\n    store.dispatch(tempSetUser(_id));\r\n    store.dispatch(check(_id));\r\n  } catch (e) {\r\n    console.log('Storage is not working');\r\n  }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <HelmetProvider>\r\n          <App />\r\n        </HelmetProvider>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}